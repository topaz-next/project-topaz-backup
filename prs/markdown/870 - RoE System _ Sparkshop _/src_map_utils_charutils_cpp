@@ -61,6 +61,9 @@ along with this program.  If not, see http://www.gnu.org/licenses/
 #include "../packets/message_special.h"
 #include "../packets/message_standard.h"
 #include "../packets/quest_mission_log.h"
+#include "../packets/roe_sparkupdate.h"
+#include "../packets/roe_update.h"
+#include "../packets/roe_questlog.h"
 #include "../packets/server_ip.h"
 
 #include "../ability.h"
@@ -351,10 +354,11 @@ namespace charutils
             "missions,"             // 21
             "assault,"              // 22
             "campaign,"             // 23
-            "playtime,"             // 24
-            "campaign_allegiance,"  // 25
-            "isstylelocked,"        // 26
-            "moghancement "         // 27
+            "eminence,"             // 24
+            "playtime,"             // 25
+            "campaign_allegiance,"  // 26
+            "isstylelocked,"        // 27
+            "moghancement "         // 28
             "FROM chars "
             "WHERE charid = %u";
 
@@ -429,10 +433,20 @@ namespace charutils
             Sql_GetData(SqlHandle, 23, &campaign, &length);
             memcpy(&PChar->m_campaignLog, campaign, (length > sizeof(PChar->m_campaignLog) ? sizeof(PChar->m_campaignLog) : length));
 
-            PChar->SetPlayTime(Sql_GetUIntData(SqlHandle, 24));
-            PChar->profile.campaign_allegiance = (uint8)Sql_GetIntData(SqlHandle, 25);
-            PChar->setStyleLocked(Sql_GetIntData(SqlHandle, 26) == 1 ? true : false);
-            PChar->SetMoghancement(Sql_GetUIntData(SqlHandle, 27));
+            length = 0;
+            char* eminence = nullptr;
+            Sql_GetData(SqlHandle, 24, &eminence, &length);
+            memcpy(&PChar->m_eminenceLog, eminence, (length > sizeof(PChar->m_eminenceLog) ? sizeof(PChar->m_eminenceLog) : length));
+            for(int i = 0; i < 31; i++) // Build eminence lookup map
+            {
+                uint16 record = PChar->m_eminenceLog.active[i];
+                if(record) PChar->m_eminenceCache.activemap.set(record);
+            }
+
+            PChar->SetPlayTime(Sql_GetUIntData(SqlHandle, 25));
+            PChar->profile.campaign_allegiance = (uint8)Sql_GetIntData(SqlHandle, 26);
+            PChar->setStyleLocked(Sql_GetIntData(SqlHandle, 27) == 1 ? true : false);
+            PChar->SetMoghancement(Sql_GetUIntData(SqlHandle, 28));
         }
 
         LoadSpells(PChar);
@@ -3983,6 +3997,26 @@ namespace charutils
             PChar->id);
     }
 
+    /************************************************************************
+    *                                                                       *
+    *  Save Eminence Records                                                *
+    *                                                                       *
+    ************************************************************************/
+
+    void SaveEminenceData(CCharEntity* PChar)
+    {
+        const char* Query =
+            "UPDATE chars "
+            "SET "
+            "eminence = '%s' "
+            "WHERE charid = %u;";
+
+        char eminenceList[sizeof(PChar->m_eminenceLog) * 2 + 1];
+        Sql_EscapeStringLen(SqlHandle, eminenceList, (const char*)&PChar->m_eminenceLog, sizeof(PChar->m_eminenceLog));
+
+        Sql_Query(SqlHandle, Query, eminenceList, PChar->id);
+    }
+
     /************************************************************************
     *                                                                       *
     *  Cохраняем список колючевых предметов                                 *
@@ -4971,13 +5005,125 @@ namespace charutils
         const char* Query = "UPDATE char_points SET %s = GREATEST(LEAST(%s+%d, %d), 0) WHERE charid = %u;";
 
         Sql_Query(SqlHandle, Query, type, type, amount, max, PChar->id);
+
+        if (strcmp(type, "spark_of_eminence") == 0)
+            PChar->pushPacket(new CRoeSparkUpdatePacket(PChar));
     }
 
     void SetPoints(CCharEntity* PChar, const char* type, int32 amount)
     {
         const char* Query = "UPDATE char_points SET %s = %d WHERE charid = %u;";
 
         Sql_Query(SqlHandle, Query, type, amount, PChar->id);
+
+        if (strcmp(type, "spark_of_eminence") == 0)
+            PChar->pushPacket(new CRoeSparkUpdatePacket(PChar));
+    }
+
+    void SetEminenceRecordCompletion(CCharEntity* PChar, uint16 recordID, bool newStatus)
+    {
+        uint8 page = recordID / 8;
+        uint8 bit = recordID % 8;
+        if(newStatus)
+            PChar->m_eminenceLog.complete[page] |= (1 << bit);
+        else
+            PChar->m_eminenceLog.complete[page] &= ~(1 << bit);
+
+        for(int i = 0; i < 4; i++)
+        {
+            PChar->pushPacket(new CRoeQuestLogPacket(PChar, i));
+        }
+        charutils::SaveEminenceData(PChar);
+    }
+
+    bool GetEminenceRecordCompletion(CCharEntity* PChar, uint16 recordID)
+    {
+        uint8 page = recordID / 8;
+        uint8 bit = recordID % 8;
+        return PChar->m_eminenceLog.complete[page] & (1 << bit);
+    }
+
+    bool AddEminenceRecord(CCharEntity* PChar, uint16 recordID)
+    {
+        // TODO: Time limited records aren't implemented yet and can't be accepted normally.
+        //       For now we are refusing their IDs outright and protecting its slot from use here.
+        if(recordID > 2047)
+            return false;
+
+        // Per above, this i < 30 is correct.
+        for(int i = 0; i < 30; i++)
+        {
+            if(PChar->m_eminenceLog.active[i] == 0)
+            {
+                PChar->m_eminenceLog.active[i] = recordID;
+                PChar->m_eminenceCache.activemap.set(recordID);
+
+                PChar->pushPacket(new CRoeUpdatePacket(PChar));
+                PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, recordID, 0, MSGBASIC_ROE_START));
+                SaveEminenceData(PChar);
+                return true;
+            }
+            else if(PChar->m_eminenceLog.active[i] == recordID)
+            {
+                return false;
+            }
+        }
+        return false;
+    }
+
+    bool DelEminenceRecord(CCharEntity* PChar, uint16 recordID)
+    {
+        for(int i = 0; i < 31; i++)
+        {
+            if(PChar->m_eminenceLog.active[i] == recordID)
+            {
+                PChar->m_eminenceLog.active[i] = 0;
+                PChar->m_eminenceLog.progress[i] = 0;
+                PChar->m_eminenceCache.activemap.reset(recordID);
+                // Shift entries up so records are shown in retail-accurate order.
+                for(int j = i; j < 29 && PChar->m_eminenceLog.active[j+1] != 0; j++)
+                {
+                    std::swap(PChar->m_eminenceLog.active[j], PChar->m_eminenceLog.active[j+1]);
+                    std::swap(PChar->m_eminenceLog.progress[j], PChar->m_eminenceLog.progress[j+1]);
+                }
+                PChar->pushPacket(new CRoeUpdatePacket(PChar));
+                charutils::SaveEminenceData(PChar);
+                return true;
+            }
+        }
+        return false;
+    }
+
+    bool HasEminenceRecord(CCharEntity* PChar, uint16 recordID)
+    {
+        return PChar->m_eminenceCache.activemap.test(recordID);
+    }
+
+    uint32 GetEminenceRecordProgress(CCharEntity* PChar, uint16 recordID)
+    {
+        for(int i = 0; i < 31; i++)
+        {
+            if(PChar->m_eminenceLog.active[i] == recordID)
+            {
+                return PChar->m_eminenceLog.progress[i];
+            }
+        }
+        return 0;
+    }
+
+    bool SetEminenceRecordProgress(CCharEntity* PChar, uint16 recordID, uint32 progress)
+    {
+        for(int i = 0; i < 31; i++)
+        {
+            if(PChar->m_eminenceLog.active[i] == recordID)
+            {
+                PChar->m_eminenceLog.progress[i] = progress;
+                PChar->pushPacket(new CRoeUpdatePacket(PChar));
+                charutils::SaveEminenceData(PChar);
+                return true;
+            }
+        }
+        return false;
     }
 
     int32 GetPoints(CCharEntity* PChar, const char* type)