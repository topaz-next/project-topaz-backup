@@ -108,9 +108,9 @@ function doBoostGain(caster, target, spell, effect)
     }
 
     for i, effect in ipairs(effectOverwrite) do
-            --printf("BOOST-GAIN: CHECKING FOR EFFECT %d...",effect)
+            --printf("BOOST-GAIN: CHECKING FOR EFFECT %d...", effect)
             if caster:hasStatusEffect(effect) then
-                --printf("BOOST-GAIN: HAS EFFECT %d, DELETING...",effect)
+                --printf("BOOST-GAIN: HAS EFFECT %d, DELETING...", effect)
                 caster:delStatusEffect(effect)
             end
     end
@@ -145,7 +145,7 @@ end
 --   getCureFinal returns the final cure amount
 --   Source: http://members.shaw.ca/pizza_steve/cure/Cure_Calculator.html
 ---------------------------------
-function getCurePower(caster,isBlueMagic)
+function getCurePower(caster, isBlueMagic)
     local MND = caster:getStat(tpz.mod.MND)
     local VIT = caster:getStat(tpz.mod.VIT)
     local skill = caster:getSkillLevel(tpz.skill.HEALING_MAGIC)
@@ -159,10 +159,10 @@ function getCurePowerOld(caster)
     local power = ((3 * MND) + VIT + (3 * math.floor(skill/5)))
     return power
 end
-function getBaseCure(power,divisor,constant,basepower)
+function getBaseCure(power, divisor, constant, basepower)
     return ((power - basepower) / divisor) + constant
 end
-function getBaseCureOld(power,divisor,constant)
+function getBaseCureOld(power, divisor, constant)
     return (power / 2) / divisor + constant
 end
 
@@ -240,8 +240,8 @@ function getCureFinal(caster, spell, basecure, minCure, isBlueMagic)
     return final
 end
 
-function getCureAsNukeFinal(caster,spell,power,divisor,constant,basepower)
-    return getCureFinal(caster,spell,power,divisor,constant,basepower)
+function getCureAsNukeFinal(caster, spell, power, divisor, constant, basepower)
+    return getCureFinal(caster, spell, power, divisor, constant, basepower)
 end
 
 -----------------------------------
@@ -251,15 +251,15 @@ end
 -- affinities that strengthen/weaken the index element
 
 
-function AffinityBonusDmg(caster,ele)
+function AffinityBonusDmg(caster, ele)
 
     local affinity = caster:getMod(strongAffinityDmg[ele])
     local bonus = 1.00 + affinity * 0.05 -- 5% per level of affinity
     -- print(bonus)
     return bonus
 end
 
-function AffinityBonusAcc(caster,ele)
+function AffinityBonusAcc(caster, ele)
 
     local affinity = caster:getMod(strongAffinityAcc[ele])
     local bonus = 0 + affinity * 10 -- 10 acc per level of affinity
@@ -302,7 +302,7 @@ function applyResistanceEffect(caster, target, spell, params)
     end
 
     if (skill == tpz.skill.SINGING and caster:hasStatusEffect(tpz.effect.TROUBADOUR)) then
-        if (math.random(0,99) < caster:getMerit(tpz.merit.TROUBADOUR)-25) then
+        if (math.random(0, 99) < caster:getMerit(tpz.merit.TROUBADOUR)-25) then
             return 1.0
         end
     end
@@ -331,14 +331,14 @@ function applyResistanceEffect(caster, target, spell, params)
 end
 
 -- Applies resistance for things that may not be spells - ie. Quick Draw
-function applyResistanceAbility(player,target,element,skill,bonus)
+function applyResistanceAbility(player, target, element, skill, bonus)
     local p = getMagicHitRate(player, target, skill, element, 0, bonus)
 
     return getMagicResist(p)
 end
 
 -- Applies resistance for additional effects
-function applyResistanceAddEffect(player,target,element,bonus)
+function applyResistanceAddEffect(player, target, element, bonus)
 
     local p = getMagicHitRate(player, target, 0, element, 0, bonus)
 
@@ -425,16 +425,16 @@ function getMagicResist(magicHitRate)
     -- Determine final resist based on which thresholds have been crossed.
     if (resvar <= sixteenth) then
         resist = 0.0625
-        --printf("Spell resisted to 1/16!!!  Threshold = %u",sixteenth)
+        --printf("Spell resisted to 1/16!!!  Threshold = %u", sixteenth)
     elseif (resvar <= eighth) then
         resist = 0.125
-        --printf("Spell resisted to 1/8!  Threshold = %u",eighth)
+        --printf("Spell resisted to 1/8!  Threshold = %u", eighth)
     elseif (resvar <= quart) then
         resist = 0.25
-        --printf("Spell resisted to 1/4.  Threshold = %u",quart)
+        --printf("Spell resisted to 1/4.  Threshold = %u", quart)
     elseif (resvar <= half) then
         resist = 0.5
-        --printf("Spell resisted to 1/2.  Threshold = %u",half)
+        --printf("Spell resisted to 1/2.  Threshold = %u", half)
     else
         resist = 1.0
         --printf("1.0")
@@ -565,7 +565,7 @@ function handleAfflatusMisery(caster, spell, dmg)
     return dmg
 end
 
- function finalMagicAdjustments(caster,target,spell,dmg)
+ function finalMagicAdjustments(caster, target, spell, dmg)
     --Handles target's HP adjustment and returns UNSIGNED dmg (absorb message is set in this function)
 
     -- handle multiple targets
@@ -621,7 +621,7 @@ end
     else
         target:takeSpellDamage(caster, spell, dmg, tpz.attackType.MAGICAL, tpz.damageType.ELEMENTAL + spell:getElement())
         target:handleAfflatusMiseryDamage(dmg)
-        target:updateEnmityFromDamage(caster,dmg)
+        target:updateEnmityFromDamage(caster, dmg)
         -- Only add TP if the target is a mob
         if (target:getObjType() ~= tpz.objType.PC) then
             target:addTP(100)
@@ -631,7 +631,7 @@ end
     return dmg
  end
 
-function finalMagicNonSpellAdjustments(caster,target,ele,dmg)
+function finalMagicNonSpellAdjustments(caster, target, ele, dmg)
     --Handles target's HP adjustment and returns SIGNED dmg (negative values on absorb)
 
     dmg = target:magicDmgTaken(dmg)
@@ -653,16 +653,16 @@ function finalMagicNonSpellAdjustments(caster,target,ele,dmg)
     end
     --Not updating enmity from damage, as this is primarily used for additional effects (which don't generate emnity)
     -- in the case that updating enmity is needed, do it manually after calling this
-    --target:updateEnmityFromDamage(caster,dmg)
+    --target:updateEnmityFromDamage(caster, dmg)
 
     return dmg
 end
 
-function adjustForTarget(target,dmg,ele)
-    if (dmg > 0 and math.random(0,99) < target:getMod(tpz.magic.absorbMod[ele])) then
+function adjustForTarget(target, dmg, ele)
+    if (dmg > 0 and math.random(0, 99) < target:getMod(tpz.magic.absorbMod[ele])) then
         return -dmg
     end
-    if (math.random(0,99) < target:getMod(nullMod[ele])) then
+    if (math.random(0, 99) < target:getMod(nullMod[ele])) then
         return 0
     end
     --Moved non element specific absorb and null mod checks to core
@@ -807,7 +807,7 @@ function addBonuses(caster, spell, target, dmg, params)
         end
 
         local mab_crit = caster:getMod(tpz.mod.MAGIC_CRITHITRATE)
-        if ( math.random(1,100) < mab_crit ) then
+        if ( math.random(1, 100) < mab_crit ) then
            mab = mab + ( 10 + caster:getMod(tpz.mod.MAGIC_CRIT_DMG_INCREASE ) )
         end
 
@@ -1211,9 +1211,9 @@ function doNuke(caster, target, spell, params)
     --add on bonuses (staff/day/weather/jas/mab/etc all go in this function)
     dmg = addBonuses(caster, spell, target, dmg, params)
     --add in target adjustment
-    dmg = adjustForTarget(target,dmg,spell:getElement())
+    dmg = adjustForTarget(target, dmg, spell:getElement())
     --add in final adjustments
-    dmg = finalMagicAdjustments(caster,target,spell,dmg)
+    dmg = finalMagicAdjustments(caster, target, spell, dmg)
     return dmg
 end
 
@@ -1231,11 +1231,11 @@ function doDivineBanishNuke(caster, target, spell, params)
     --add on bonuses (staff/day/weather/jas/mab/etc all go in this function)
     dmg = addBonuses(caster, spell, target, dmg, params)
     --add in target adjustment
-    dmg = adjustForTarget(target,dmg,spell:getElement())
+    dmg = adjustForTarget(target, dmg, spell:getElement())
     --handling afflatus misery
     dmg = handleAfflatusMisery(caster, spell, dmg)
     --add in final adjustments
-    dmg = finalMagicAdjustments(caster,target,spell,dmg)
+    dmg = finalMagicAdjustments(caster, target, spell, dmg)
     return dmg
 end
 