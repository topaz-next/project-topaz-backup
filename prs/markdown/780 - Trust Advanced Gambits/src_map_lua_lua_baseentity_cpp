@@ -12278,7 +12278,6 @@ inline int32 CLuaBaseEntity::clearTrusts(lua_State* L)
     return 0;
 }
 
-
 /************************************************************************
 *  Function: getTrustID()
 *  Purpose :
@@ -12295,6 +12294,36 @@ inline int32 CLuaBaseEntity::getTrustID(lua_State* L)
     return 1;
 }
 
+/************************************************************************
+*  Function: trustPartyMessage()
+*  Purpose :
+*  Example : mob:trustPartyMessage(message_id)
+*  Notes   :
+************************************************************************/
+
+inline int32 CLuaBaseEntity::trustPartyMessage(lua_State* L)
+{
+    TPZ_DEBUG_BREAK_IF(m_PBaseEntity == nullptr);
+    TPZ_DEBUG_BREAK_IF(m_PBaseEntity->objtype != TYPE_TRUST);
+    TPZ_DEBUG_BREAK_IF(lua_isnil(L, 1) || !lua_isnumber(L, 1));
+
+    auto PTrust = static_cast<CTrustEntity*>(m_PBaseEntity);
+
+    auto message_id = (uint32)lua_tointeger(L, 1);
+
+    auto PMaster = static_cast<CCharEntity*>(PTrust->PMaster);
+    if (PMaster)
+    {
+        PMaster->ForParty([&](CBattleEntity* PMember)
+            {
+                auto PCharMember = static_cast<CCharEntity*>(PMember);
+                PCharMember->pushPacket(new CMessageCombatPacket(PTrust, PMember, message_id, 0, 711));
+            });
+    }
+
+    return 0;
+}
+
 /************************************************************************
 *  Function: addSimpleGambit()
 *  Purpose :
@@ -12318,11 +12347,11 @@ inline int32 CLuaBaseEntity::addSimpleGambit(lua_State* L)
 
     auto target = static_cast<G_TARGET>(lua_tointeger(L, 1));
     auto condition = static_cast<G_CONDITION>(lua_tointeger(L, 2));
-    auto condition_arg = static_cast<uint16>(lua_tointeger(L, 3));
+    auto condition_arg = static_cast<uint32>(lua_tointeger(L, 3));
 
     auto reaction = static_cast<G_REACTION>(lua_tointeger(L, 4));
     auto selector = static_cast<G_SELECT>(lua_tointeger(L, 5));
-    auto selector_arg = static_cast<uint16>(lua_tointeger(L, 6));
+    auto selector_arg = static_cast<uint32>(lua_tointeger(L, 6));
 
     // Optional
     auto retry_delay = 0;
@@ -12331,7 +12360,9 @@ inline int32 CLuaBaseEntity::addSimpleGambit(lua_State* L)
         retry_delay = (uint16)lua_tointeger(L, 7);
     }
 
-    Gambit_t g{ { target, condition, condition_arg }, { reaction, selector, selector_arg } };
+    Gambit_t g;
+    g.predicates.emplace_back(Predicate_t{ target, condition, condition_arg });
+    g.actions.emplace_back(Action_t{ reaction, selector, selector_arg });
     g.retry_delay = retry_delay;
 
     auto trust = static_cast<CTrustEntity*>(m_PBaseEntity);
@@ -12349,73 +12380,94 @@ inline int32 CLuaBaseEntity::addSimpleGambit(lua_State* L)
 *  Notes   : Adds a behaviour to the gambit system
 ************************************************************************/
 
-inline void build_gambit(lua_State* L, std::vector<int>& nums, int index, int depth = 0)
+inline int32 CLuaBaseEntity::addFullGambit(lua_State* L)
 {
-    lua_pushvalue(L, index);
-    lua_pushnil(L);
-    while (lua_next(L, -2))
-    {
-        lua_pushvalue(L, -2);
+    TPZ_DEBUG_BREAK_IF(m_PBaseEntity == nullptr);
+    TPZ_DEBUG_BREAK_IF(m_PBaseEntity->objtype != TYPE_TRUST);
+    TPZ_DEBUG_BREAK_IF(lua_isnil(L, 1) || !lua_istable(L, 1));
 
-        auto key = lua_tostring(L, -1);
-        auto value = lua_tostring(L, -2);
-        auto type = lua_type(L, -2);
-        auto type_name = lua_typename(L, type);
+    using namespace gambits;
 
-        printf("(depth: %d, type: %s) %s => %s\n", depth, type_name, key, value);
+    // ===
 
-        // TODO: This is bad.
-        if (depth == 3)
-        {
-            nums.push_back((int)lua_tonumber(L, -2));
-        }
+    Gambit_t g;
 
-        if (lua_istable(L, -2))
-        {
-            build_gambit(L, nums, -2, ++depth);
-        }
-        else
+    bool gambit_error = false;
+
+    lua_pushvalue(L, 1); // Push main table onto stack
+
+    lua_getfield(L, 1, "predicates"); // Acts as push
+    if (lua_istable(L, -1)) // Found
+    {
+        auto table = lua_gettop(L);
+        lua_pushnil(L);
+        while (lua_next(L, table) != 0)
         {
-            // TODO: Hack to keep depth constant for numbers
-            ++depth;
-        }
+            Predicate_t new_predicate;
+            auto sub_table = lua_gettop(L);
+            lua_pushnil(L);
+            while (lua_next(L, sub_table) != 0)
+            {
+                auto key = std::string(lua_tostring(L, -2));
+                auto value = static_cast<uint32>(lua_tonumber(L, -1));
+                lua_pop(L, 1);
 
-        --depth;
-        lua_pop(L, 2);
+                if (!new_predicate.parseInput(key, value))
+                {
+                    gambit_error = true;
+                }
+            }
+            g.predicates.emplace_back(new_predicate);
+            lua_pop(L, 1);
+        }
+        lua_pop(L, 1);
+    }
+    else // No predicates block found!
+    {
+        gambit_error = true;
     }
-    lua_pop(L, 1);
-    --depth;
-}
 
-inline int32 CLuaBaseEntity::addFullGambit(lua_State* L)
-{
-    TPZ_DEBUG_BREAK_IF(m_PBaseEntity == nullptr);
-    TPZ_DEBUG_BREAK_IF(m_PBaseEntity->objtype != TYPE_TRUST);
-    TPZ_DEBUG_BREAK_IF(lua_isnil(L, 1) || !lua_istable(L, 1));
+    lua_getfield(L, 1, "actions");
+    if (lua_istable(L, -1))
+    {
+        auto table = lua_gettop(L);
+        lua_pushnil(L);
+        while (lua_next(L, table) != 0)
+        {
+            Action_t new_action;
+            auto sub_table = lua_gettop(L);
+            lua_pushnil(L);
+            while (lua_next(L, sub_table) != 0)
+            {
+                auto key = std::string(lua_tostring(L, -2));
+                auto value = static_cast<uint32>(lua_tonumber(L, -1));
+                lua_pop(L, 1);
 
-    using namespace gambits;
+                if (!new_action.parseInput(key, (uint32)value))
+                {
+                    gambit_error = true;
+                }
+            }
+            g.actions.emplace_back(new_action);
+            lua_pop(L, 1);
+        }
+        lua_pop(L, 1);
+    }
+    else // No actions block found!
+    {
+        gambit_error = true;
+    }
 
-    std::vector<int> nums;
-    build_gambit(L, nums, 1);
+    lua_pop(L, 1);
 
-    TPZ_DEBUG_BREAK_IF(nums.size() != 6);
+    lua_pop(L, 1); // Main table
 
-    if (nums.size() != 6)
+    if (gambit_error)
     {
         ShowWarning("Invalid Gambit");
-        return 0;
     }
 
-    // TODO: don't hardcode this...
-    auto target = static_cast<G_TARGET>(nums[0]);
-    auto condition = static_cast<G_CONDITION>(nums[1]);
-    auto condition_arg = static_cast<uint16>(nums[2]);
-
-    auto reaction = static_cast<G_REACTION>(nums[3]);
-    auto selector = static_cast<G_SELECT>(nums[4]);
-    auto selector_arg = static_cast<uint16>(nums[5]);
-
-    Gambit_t g{ { target, condition, condition_arg }, { reaction, selector, selector_arg } };
+    // ===
 
     auto trust = static_cast<CTrustEntity*>(m_PBaseEntity);
     auto controller = static_cast<CTrustController*>(trust->PAI->GetController());
@@ -12425,25 +12477,115 @@ inline int32 CLuaBaseEntity::addFullGambit(lua_State* L)
     return 0;
 }
 
-inline int32 CLuaBaseEntity::trustPartyMessage(lua_State* L)
+/************************************************************************
+*  Function: setTPSkills()
+*  Purpose :
+*  Example : mob:setTPSkills(...)
+*  Notes   :
+************************************************************************/
+
+int32 CLuaBaseEntity::setTPSkills(lua_State* L)
 {
     TPZ_DEBUG_BREAK_IF(m_PBaseEntity == nullptr);
     TPZ_DEBUG_BREAK_IF(m_PBaseEntity->objtype != TYPE_TRUST);
-    TPZ_DEBUG_BREAK_IF(lua_isnil(L, 1) || !lua_isnumber(L, 1));
+    TPZ_DEBUG_BREAK_IF(lua_isnil(L, 1) || !lua_istable(L, 1));
 
-    auto PTrust = static_cast<CTrustEntity*>(m_PBaseEntity);
+    auto trust = static_cast<CTrustEntity*>(m_PBaseEntity);
+    auto controller = static_cast<CTrustController*>(trust->PAI->GetController());
+    auto mLvl = trust->GetMLevel();
 
-    auto message_id = static_cast<int32>(lua_tointeger(L, 1));
+    using namespace gambits;
 
-    auto PMaster = static_cast<CCharEntity*>(PTrust->PMaster);
-    if (PMaster)
+    // TODO: This is all garbage and arcane, can be done better!
+
+    std::vector<uint32> skills_data;
+
+    // skills
+    lua_getfield(L, 1, "skills");
+    if (lua_istable(L, -1))
     {
-        PMaster->ForParty([&](CBattleEntity* PMember)
+        auto table = lua_gettop(L);
+        lua_pushnil(L);
+        while (lua_next(L, table) != 0)
         {
-            auto PCharMember = static_cast<CCharEntity*>(PMember);
-            PCharMember->pushPacket(new CMessageCombatPacket(PTrust, PMember, message_id, 0, 711));
-        });
+            auto sub_table = lua_gettop(L);
+            lua_pushnil(L);
+            while (lua_next(L, sub_table) != 0)
+            {
+                auto value = static_cast<uint32>(lua_tonumber(L, -1));
+                skills_data.emplace_back(value);
+                lua_pop(L, 1);
+            }
+            lua_pop(L, 1);
+        }
     }
+    else
+    {
+        // No skills, fatal!
+    }
+    lua_pop(L, 1);
+
+    // Handle skills_data
+    for (size_t i = 0; i < skills_data.size(); i += 3)
+    {
+        auto skill_type = skills_data[i];
+        auto skill_id = skills_data[i + 1];
+        auto min_level = skills_data[i + 2];
+
+        TrustSkill_t skill{ static_cast<G_REACTION>(skill_type), skill_id, min_level };
+        if (skill.skill_type == G_REACTION::WS)
+        {
+            CWeaponSkill* PWeaponSkill = battleutils::GetWeaponSkill(skill_id);
+            if (!PWeaponSkill)
+            {
+                ShowWarning("CLuaBaseEntity::setTPSkills: Error loading WeaponSkill id %d for trust %s\n", skill_id, trust->name);
+                break;
+            }
+            skill.primary = PWeaponSkill->getPrimarySkillchain();
+            skill.secondary = PWeaponSkill->getSecondarySkillchain();
+            skill.tertiary = PWeaponSkill->getTertiarySkillchain();
+        }
+        else // MS
+        {
+            CMobSkill* PMobSkill = battleutils::GetMobSkill(skill_id);
+            if (!PMobSkill)
+            {
+                ShowWarning("CLuaBaseEntity::setTPSkills: Error loading MobSkill id %d for trust %s\n", skill_id, trust->name);
+                break;
+            }
+            skill.primary = PMobSkill->getPrimarySkillchain();
+            skill.secondary = PMobSkill->getSecondarySkillchain();
+            skill.tertiary = PMobSkill->getTertiarySkillchain();
+        }
+        
+        if (mLvl >= min_level)
+        {
+            controller->m_GambitsContainer->tp_skills.emplace_back(skill);
+        }
+     }
+
+    // mode
+    uint32 mode = 0;
+    lua_getfield(L, 1, "mode");
+    if (lua_isnumber(L, -1))
+    {
+        mode = static_cast<uint32>(lua_tonumber(L, -1));
+    }
+    lua_pop(L, 1);
+
+    // skill_select
+    uint32 skill_select = 0;
+    lua_getfield(L, 1, "skill_select");
+    if (lua_isnumber(L, -1))
+    {
+        skill_select = static_cast<uint32>(lua_tonumber(L, -1));
+    }
+    lua_pop(L, 1);
+
+    lua_pop(L, 1); // Init state
+
+    controller->m_GambitsContainer->tp_trigger = static_cast<G_TP_TRIGGER>(mode);
+    controller->m_GambitsContainer->tp_select = static_cast<G_SELECT>(skill_select);
 
     return 0;
 }
@@ -14936,6 +15078,8 @@ Lunar<CLuaBaseEntity>::Register_t CLuaBaseEntity::methods[] =
     LUNAR_DECLARE_METHOD(CLuaBaseEntity,sendReraise),
     LUNAR_DECLARE_METHOD(CLuaBaseEntity,sendTractor),
 
+    LUNAR_DECLARE_METHOD(CLuaBaseEntity,messageCombat),
+
     LUNAR_DECLARE_METHOD(CLuaBaseEntity,engage),
     LUNAR_DECLARE_METHOD(CLuaBaseEntity,isEngaged),
     LUNAR_DECLARE_METHOD(CLuaBaseEntity,disengage),
@@ -15099,10 +15243,11 @@ Lunar<CLuaBaseEntity>::Register_t CLuaBaseEntity::methods[] =
     LUNAR_DECLARE_METHOD(CLuaBaseEntity,spawnTrust),
     LUNAR_DECLARE_METHOD(CLuaBaseEntity,clearTrusts),
     LUNAR_DECLARE_METHOD(CLuaBaseEntity,getTrustID),
+    LUNAR_DECLARE_METHOD(CLuaBaseEntity,trustPartyMessage),
     LUNAR_DECLARE_METHOD(CLuaBaseEntity,addSimpleGambit),
     LUNAR_DECLARE_METHOD(CLuaBaseEntity,addFullGambit),
-    LUNAR_DECLARE_METHOD(CLuaBaseEntity,trustPartyMessage),
-
+    LUNAR_DECLARE_METHOD(CLuaBaseEntity,setTPSkills),
+  
     // Mob Entity-Specific
     LUNAR_DECLARE_METHOD(CLuaBaseEntity,setMobLevel),
     LUNAR_DECLARE_METHOD(CLuaBaseEntity,getSystem),