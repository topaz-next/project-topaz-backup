@@ -1,9 +1,15 @@
-#include "gambits_container.h"
+ï»¿#include "gambits_container.h"
 
 #include "../../ability.h"
 #include "../../spell.h"
+#include "../../mobskill.h"
 #include "../../weapon_skill.h"
+#include "../../ai/states/ability_state.h"
+#include "../../ai/states/mobskill_state.h"
+#include "../../ai/states/magic_state.h"
+#include "../../ai/states/weaponskill_state.h"
 #include "../../utils/battleutils.h"
+#include "../../utils/trustutils.h"
 
 namespace gambits
 {
@@ -13,11 +19,14 @@ namespace gambits
 void CGambitsContainer::AddGambit(Gambit_t gambit)
 {
     bool available = true;
-    if (gambit.action.reaction == G_REACTION::MA && gambit.action.select == G_SELECT::SPECIFIC)
+    for (auto& action : gambit.actions)
     {
-        if (!spell::CanUseSpell(static_cast<CBattleEntity*>(POwner), static_cast<SpellID>(gambit.action.select_arg)))
+        if (action.reaction == G_REACTION::MA && action.select == G_SELECT::SPECIFIC)
         {
-            available = false;
+            if (!spell::CanUseSpell(static_cast<CBattleEntity*>(POwner), static_cast<SpellID>(action.select_arg)))
+            {
+                available = false;
+            }
         }
     }
     if (available)
@@ -32,156 +41,151 @@ void CGambitsContainer::Tick(time_point tick)
     {
         return;
     }
+
+    // TODO: Is this necessary?
+    // Not already doing something
+    if (POwner->PAI->IsCurrentState<CAbilityState>() ||
+        POwner->PAI->IsCurrentState<CMagicState>() ||
+        POwner->PAI->IsCurrentState<CWeaponSkillState>() ||
+        POwner->PAI->IsCurrentState<CMobSkillState>())
+    {
+        return;
+    }
+
     auto random_offset = static_cast<std::chrono::milliseconds>(tpzrand::GetRandomNumber(1000, 2500));
     m_lastAction = tick + random_offset;
 
     auto controller = static_cast<CTrustController*>(POwner->PAI->GetController());
 
-    for (auto gambit : gambits)
+    // Deal with TP skills before any gambits
+    // TODO: Should this be its own special gambit?
+    if (POwner->health.tp >= 1000 && TryTrustSkill())
     {
-        if (tick < gambit.last_used + std::chrono::seconds(gambit.retry_delay))
-        {
-            continue;
-        }
-
-        auto checkTrigger = [&](CBattleEntity* target, Predicate_t& predicate) -> bool
-        {
-            switch (predicate.condition)
-            {
-            case G_CONDITION::ALWAYS:
-            {
-                return true;
-                break;
-            }
-            case G_CONDITION::HPP_LT:
-            {
-                return target->GetHPP() < predicate.condition_arg;
-                break;
-            }
-            case G_CONDITION::HPP_GTE:
-            {
-                return target->GetHPP() >= predicate.condition_arg;
-                break;
-            }
-            case G_CONDITION::MPP_LT:
-            {
-                return target->GetMPP() < predicate.condition_arg;
-                break;
-            }
-            case G_CONDITION::TP_LT:
-            {
-                return target->health.tp < predicate.condition_arg;
-                break;
-            }
-            case G_CONDITION::TP_GTE:
-            {
-                return target->health.tp >= predicate.condition_arg;
-                break;
-            }
-            case G_CONDITION::STATUS:
-            {
-                return target->StatusEffectContainer->HasStatusEffect(static_cast<EFFECT>(predicate.condition_arg));
-                break;
-            }
-            case G_CONDITION::NOT_STATUS:
-            {
-                return !target->StatusEffectContainer->HasStatusEffect(static_cast<EFFECT>(predicate.condition_arg));
-                break;
-            }
-            case G_CONDITION::STATUS_FLAG:
-            {
-                return target->StatusEffectContainer->HasStatusEffectByFlag(static_cast<EFFECTFLAG>(predicate.condition_arg));
-                break;
-            }
-            case G_CONDITION::HAS_TOP_ENMITY:
-            {
-                return (controller->GetTopEnmity()) ? controller->GetTopEnmity()->targid == POwner->targid : false;
-                break;
-            }
-            case G_CONDITION::NOT_HAS_TOP_ENMITY:
-            {
-                return (controller->GetTopEnmity()) ? controller->GetTopEnmity()->targid != POwner->targid : false;
-                break;
-            }
-            case G_CONDITION::SC_AVAILABLE:
-            {
-                auto PSCEffect = target->StatusEffectContainer->GetStatusEffect(EFFECT_SKILLCHAIN);
-                return PSCEffect && PSCEffect->GetStartTime() + 3s < server_clock::now() && PSCEffect->GetTier() == 0;
-                break;
-            }
-            case G_CONDITION::NOT_SC_AVAILABLE:
-            {
-                auto PSCEffect = target->StatusEffectContainer->GetStatusEffect(EFFECT_SKILLCHAIN);
-                return PSCEffect == nullptr;
-                break;
-            }
-            case G_CONDITION::MB_AVAILABLE:
-            {
-                auto PSCEffect = target->StatusEffectContainer->GetStatusEffect(EFFECT_SKILLCHAIN);
-                return PSCEffect && PSCEffect->GetStartTime() + 3s < server_clock::now() && PSCEffect->GetTier() > 0;
-                break;
-            }
-            default: { return false;  break; }
-            }
-        };
+        return;
+    }
 
-        CBattleEntity* target = nullptr;
-        if (gambit.predicate.target == G_TARGET::SELF)
+    auto runPredicate = [&](Predicate_t& predicate) -> bool
+    {
+        if (predicate.target == G_TARGET::SELF)
         {
-            target = checkTrigger(POwner, gambit.predicate) ? POwner : nullptr;
+            return CheckTrigger(POwner, predicate);
         }
-        else if (gambit.predicate.target == G_TARGET::TARGET)
+        else if (predicate.target == G_TARGET::TARGET)
         {
-            auto mob = POwner->GetBattleTarget();
-            target = checkTrigger(mob, gambit.predicate) ? mob : nullptr;
+            return CheckTrigger(POwner->GetBattleTarget(), predicate);
         }
-        else if (gambit.predicate.target == G_TARGET::PARTY)
+        else if (predicate.target == G_TARGET::PARTY)
         {
-            auto isValidMember = [&](CBattleEntity* PPartyTarget)
+            auto isValidMember = [&](CBattleEntity* PPartyTarget) -> bool
             {
-                return !target && PPartyTarget->isAlive() &&
+                return PPartyTarget->isAlive() &&
                     POwner->loc.zone == PPartyTarget->loc.zone &&
                     distance(POwner->loc.p, PPartyTarget->loc.p) <= 15.0f;
             };
 
+            auto result = false;
             static_cast<CCharEntity*>(POwner->PMaster)->ForPartyWithTrusts([&](CBattleEntity* PMember)
             {
-                if (isValidMember(PMember) && checkTrigger(PMember, gambit.predicate))
+                if (isValidMember(PMember) && CheckTrigger(PMember, predicate))
                 {
-                    target = PMember;
+                    result = true;
                 }
             });
+
+            return result;
         }
-        else if (gambit.predicate.target == G_TARGET::MASTER)
+        else if (predicate.target == G_TARGET::MASTER)
         {
-            target = POwner->PMaster;
+            return CheckTrigger(POwner->PMaster, predicate);
         }
-        else if (gambit.predicate.target == G_TARGET::TANK)
+
+        // Fallthrough
+        return false;
+    };
+
+    // Didn't WS/MS, go for other Gambits
+    for (auto gambit : gambits)
+    {
+        if (tick < gambit.last_used + std::chrono::seconds(gambit.retry_delay))
         {
-            // TODO
+            continue;
         }
 
-        if (target)
+        for (auto& action : gambit.actions)
         {
-            if (gambit.action.reaction == G_REACTION::MA)
+            // Make sure that the predicates remain true for each action in a gambit
+            bool all_predicates_true = true;
+            for (auto& predicate : gambit.predicates)
+            {
+                if (!runPredicate(predicate))
+                {
+                    all_predicates_true = false;
+                }
+            }
+            if (!all_predicates_true) { break; }
+
+            // TODO: This whole section is messy and bonkers
+            // Try and extract target out the first predicate
+            CBattleEntity* target = nullptr;
+            if (gambit.predicates[0].target == G_TARGET::SELF)
+            {
+                target = CheckTrigger(POwner, gambit.predicates[0]) ? POwner : nullptr;
+            }
+            else if (gambit.predicates[0].target == G_TARGET::TARGET)
             {
-                if (gambit.action.select == G_SELECT::SPECIFIC)
+                auto mob = POwner->GetBattleTarget();
+                target = CheckTrigger(mob, gambit.predicates[0]) ? mob : nullptr;
+            }
+            else if (gambit.predicates[0].target == G_TARGET::PARTY)
+            {
+                auto isValidMember = [&](CBattleEntity* PPartyTarget)
+                {
+                    return !target && PPartyTarget->isAlive() &&
+                        POwner->loc.zone == PPartyTarget->loc.zone &&
+                        distance(POwner->loc.p, PPartyTarget->loc.p) <= 15.0f;
+                };
+
+                static_cast<CCharEntity*>(POwner->PMaster)->ForPartyWithTrusts([&](CBattleEntity* PMember)
+                {
+                    if (isValidMember(PMember) && CheckTrigger(PMember, gambit.predicates[0]))
+                    {
+                        target = PMember;
+                    }
+                });
+            }
+            else if (gambit.predicates[0].target == G_TARGET::MASTER)
+            {
+                target = POwner->PMaster;
+            }
+            else if (gambit.predicates[0].target == G_TARGET::TANK)
+            {
+                // TODO
+            }
+
+            if (!target)
+            {
+                break;
+            }
+
+            if (action.reaction == G_REACTION::MA)
+            {
+                if (action.select == G_SELECT::SPECIFIC)
                 {
-                    auto spell_id = POwner->SpellContainer->GetAvailable(static_cast<SpellID>(gambit.action.select_arg));
+                    auto spell_id = POwner->SpellContainer->GetAvailable(static_cast<SpellID>(action.select_arg));
                     if (spell_id.has_value())
                     {
                         controller->Cast(target->targid, static_cast<SpellID>(spell_id.value()));
                     }
                 }
-                else if (gambit.action.select == G_SELECT::HIGHEST)
+                else if (action.select == G_SELECT::HIGHEST)
                 {
-                    auto spell_id = POwner->SpellContainer->GetBestAvailable(static_cast<SPELLFAMILY>(gambit.action.select_arg));
+                    auto spell_id = POwner->SpellContainer->GetBestAvailable(static_cast<SPELLFAMILY>(action.select_arg));
                     if (spell_id.has_value())
                     {
                         controller->Cast(target->targid, static_cast<SpellID>(spell_id.value()));
                     }
                 }
-                else if (gambit.action.select == G_SELECT::LOWEST)
+                else if (action.select == G_SELECT::LOWEST)
                 {
                     // TODO
                     //auto spell_id = POwner->SpellContainer->GetWorstAvailable(static_cast<SPELLFAMILY>(gambit.action.select_arg));
@@ -190,15 +194,15 @@ void CGambitsContainer::Tick(time_point tick)
                     //    controller->Cast(target->targid, static_cast<SpellID>(spell_id.value()));
                     //}
                 }
-                else if (gambit.action.select == G_SELECT::RANDOM)
+                else if (action.select == G_SELECT::RANDOM)
                 {
                     auto spell_id = POwner->SpellContainer->GetSpell();
                     if (spell_id.has_value())
                     {
                         controller->Cast(target->targid, static_cast<SpellID>(spell_id.value()));
                     }
                 }
-                else if (gambit.action.select == G_SELECT::MB_ELEMENT)
+                else if (action.select == G_SELECT::MB_ELEMENT)
                 {
                     CStatusEffect* PSCEffect = target->StatusEffectContainer->GetStatusEffect(EFFECT_SKILLCHAIN, 0);
                     std::list<SKILLCHAIN_ELEMENT> resonanceProperties;
@@ -228,15 +232,16 @@ void CGambitsContainer::Tick(time_point tick)
                             }
                         }
                     }
+
                     if (spell_id.has_value())
                     {
                         controller->Cast(target->targid, static_cast<SpellID>(spell_id.value()));
                     }
                 }
             }
-            else if (gambit.action.reaction == G_REACTION::JA)
+            else if (action.reaction == G_REACTION::JA)
             {
-                CAbility* PAbility = ability::GetAbility(gambit.action.select_arg);
+                CAbility* PAbility = ability::GetAbility(action.select_arg);
                 if (PAbility->getValidTarget() == TARGET_SELF)
                 {
                     target = POwner;
@@ -246,44 +251,256 @@ void CGambitsContainer::Tick(time_point tick)
                     target = POwner->GetBattleTarget();
                 }
 
-                if (gambit.action.select == G_SELECT::SPECIFIC)
+                if (action.select == G_SELECT::SPECIFIC)
                 {
                     controller->Ability(target->targid, PAbility->getID());
                 }
             }
-            else if (gambit.action.reaction == G_REACTION::WS)
+            else if (action.reaction == G_REACTION::MSG)
             {
-                CWeaponSkill* PWeaponSkill = battleutils::GetWeaponSkill(gambit.action.select_arg);
-                if (battleutils::isValidSelfTargetWeaponskill(PWeaponSkill->getID()))
+                if (action.select == G_SELECT::SPECIFIC)
                 {
-                    target = POwner;
-                }
-                else
-                {
-                    target = POwner->GetBattleTarget();
+                    //trustutils::SendTrustMessage(POwner, action.select_arg);
                 }
+            }
+
+            // Assume success
+            if (gambit.retry_delay != 0)
+            {
+                gambit.last_used = tick;
+            }
+        }
+    }
+}
+
+bool CGambitsContainer::CheckTrigger(CBattleEntity* trigger_target, Predicate_t& predicate)
+{
+    auto controller = static_cast<CTrustController*>(POwner->PAI->GetController());
+    switch (predicate.condition)
+    {
+        case G_CONDITION::ALWAYS:
+        {
+            return true;
+            break;
+        }
+        case G_CONDITION::HPP_LT:
+        {
+            return trigger_target->GetHPP() < predicate.condition_arg;
+            break;
+        }
+        case G_CONDITION::HPP_GTE:
+        {
+            return trigger_target->GetHPP() >= predicate.condition_arg;
+            break;
+        }
+        case G_CONDITION::MPP_LT:
+        {
+            return trigger_target->GetMPP() < predicate.condition_arg;
+            break;
+        }
+        case G_CONDITION::TP_LT:
+        {
+            return trigger_target->health.tp < (int16)predicate.condition_arg;
+            break;
+        }
+        case G_CONDITION::TP_GTE:
+        {
+            return trigger_target->health.tp >= (int16)predicate.condition_arg;
+            break;
+        }
+        case G_CONDITION::STATUS:
+        {
+            return trigger_target->StatusEffectContainer->HasStatusEffect(static_cast<EFFECT>(predicate.condition_arg));
+            break;
+        }
+        case G_CONDITION::NOT_STATUS:
+        {
+            return !trigger_target->StatusEffectContainer->HasStatusEffect(static_cast<EFFECT>(predicate.condition_arg));
+            break;
+        }
+        case G_CONDITION::STATUS_FLAG:
+        {
+            return trigger_target->StatusEffectContainer->HasStatusEffectByFlag(static_cast<EFFECTFLAG>(predicate.condition_arg));
+            break;
+        }
+        case G_CONDITION::HAS_TOP_ENMITY:
+        {
+            return (controller->GetTopEnmity()) ? controller->GetTopEnmity()->targid == POwner->targid : false;
+            break;
+        }
+        case G_CONDITION::NOT_HAS_TOP_ENMITY:
+        {
+            return (controller->GetTopEnmity()) ? controller->GetTopEnmity()->targid != POwner->targid : false;
+            break;
+        }
+        case G_CONDITION::SC_AVAILABLE:
+        {
+            auto PSCEffect = trigger_target->StatusEffectContainer->GetStatusEffect(EFFECT_SKILLCHAIN);
+            return PSCEffect && PSCEffect->GetStartTime() + 3s < server_clock::now() && PSCEffect->GetTier() == 0;
+            break;
+        }
+        case G_CONDITION::NOT_SC_AVAILABLE:
+        {
+            auto PSCEffect = trigger_target->StatusEffectContainer->GetStatusEffect(EFFECT_SKILLCHAIN);
+            return PSCEffect == nullptr;
+            break;
+        }
+        case G_CONDITION::MB_AVAILABLE:
+        {
+            auto PSCEffect = trigger_target->StatusEffectContainer->GetStatusEffect(EFFECT_SKILLCHAIN);
+            return PSCEffect && PSCEffect->GetStartTime() + 3s < server_clock::now() && PSCEffect->GetTier() > 0;
+            break;
+        }
+        case G_CONDITION::READYING_WS:
+        {
+            return trigger_target->PAI->IsCurrentState<CWeaponSkillState>();
+            break;
+        }
+        case G_CONDITION::READYING_MS:
+        {
+            return trigger_target->PAI->IsCurrentState<CMobSkillState>();
+            break;
+        }
+        case G_CONDITION::READYING_JA:
+        {
+            return trigger_target->PAI->IsCurrentState<CAbilityState>();
+            break;
+        }
+        case G_CONDITION::CASTING_MA:
+        {
+            return trigger_target->PAI->IsCurrentState<CMagicState>();
+            break;
+        }
+        case G_CONDITION::RANDOM:
+        {
+            return tpzrand::GetRandomNumber<uint16>(100) < (int16)predicate.condition_arg;
+            break;
+        }
+        default: { return false;  break; }
+    }
+}
 
-                if (gambit.action.select == G_SELECT::SPECIFIC)
+bool CGambitsContainer::TryTrustSkill()
+{
+    auto target = POwner->GetBattleTarget();
+
+    auto checkTPTrigger = [&]() -> bool
+    {
+        if (POwner->health.tp >= 3000) { return true; } // Go, go, go!
+
+        switch (tp_trigger)
+        {
+        case G_TP_TRIGGER::ASAP:
+        {
+            return true;
+            break;
+        }
+        case G_TP_TRIGGER::OPENER:
+        {
+            bool result = false;
+            static_cast<CCharEntity*>(POwner->PMaster)->ForPartyWithTrusts([&result](CBattleEntity* PMember)
+            {
+                if (PMember->health.tp >= 1000)
                 {
-                    controller->WeaponSkill(target->targid, PWeaponSkill->getID());
+                    result = true;
                 }
+            });
+            return result;
+            break;
+        }
+        case G_TP_TRIGGER::CLOSER:
+        {
+            auto PSCEffect = target->StatusEffectContainer->GetStatusEffect(EFFECT_SKILLCHAIN);
+
+            // TODO: ...and has a valid WS...
+
+            return PSCEffect && PSCEffect->GetStartTime() + 3s < server_clock::now() && PSCEffect->GetTier() == 0;
+            break;
+        }
+        default:
+        {
+            return false;
+            break;
+        }
+        }
+    };
+
+    std::optional<TrustSkill_t> chosen_skill;
+    SKILLCHAIN_ELEMENT chosen_skillchain = SC_NONE;
+    if (checkTPTrigger() && !tp_skills.empty())
+    {
+        switch (tp_select)
+        {
+            case G_SELECT::RANDOM:
+            {
+                chosen_skill = tp_skills.at(tpzrand::GetRandomNumber(tp_skills.size() - 1));
+                break;
             }
-            else if (gambit.action.reaction == G_REACTION::MS)
+            case G_SELECT::HIGHEST: // Form the best possible skillchain
             {
-                if (gambit.action.select == G_SELECT::SPECIFIC)
+                auto PSCEffect = target->StatusEffectContainer->GetStatusEffect(EFFECT_SKILLCHAIN);
+
+                if (!PSCEffect) // Opener
+                {
+                    // TODO: This relies on the skills being passed in in some kind of correct order...
+                    // Probably best to do this another way
+                    chosen_skill = tp_skills.at(tp_skills.size() - 1);
+                    break;
+                }
+
+                // Closer
+                for (auto& skill : tp_skills)
                 {
-                    auto mob = POwner->GetBattleTarget();
-                    controller->MobSkill(mob->targid, gambit.action.select_arg);
+                    std::list<SKILLCHAIN_ELEMENT> resonanceProperties;
+                    if (uint16 power = PSCEffect->GetPower())
+                    {
+                        resonanceProperties.push_back((SKILLCHAIN_ELEMENT)(power & 0xF));
+                        resonanceProperties.push_back((SKILLCHAIN_ELEMENT)(power >> 4 & 0xF));
+                        resonanceProperties.push_back((SKILLCHAIN_ELEMENT)(power >> 8));
+                    }
+
+                    std::list<SKILLCHAIN_ELEMENT> skillProperties;
+                    skillProperties.push_back((SKILLCHAIN_ELEMENT)skill.primary);
+                    skillProperties.push_back((SKILLCHAIN_ELEMENT)skill.secondary);
+                    skillProperties.push_back((SKILLCHAIN_ELEMENT)skill.tertiary);
+                    if (SKILLCHAIN_ELEMENT possible_skillchain = battleutils::FormSkillchain(resonanceProperties, skillProperties); possible_skillchain != SC_NONE)
+                    {
+                        if (possible_skillchain >= chosen_skillchain)
+                        {
+                            chosen_skill = skill;
+                            chosen_skillchain = possible_skillchain;
+                        }
+                    }
                 }
+                break;
             }
+            default: { break; }
+        }
+    }
 
-            // Assume success
-            if (gambit.retry_delay != 0)
+    if (chosen_skill)
+    {
+        auto controller = static_cast<CTrustController*>(POwner->PAI->GetController());
+        if (chosen_skill->skill_type == G_REACTION::WS)
+        {
+            CWeaponSkill* PWeaponSkill = battleutils::GetWeaponSkill(chosen_skill->skill_id);
+            if (battleutils::isValidSelfTargetWeaponskill(PWeaponSkill->getID()))
             {
-                gambit.last_used = tick;
+                target = POwner;
+            }
+            else
+            {
+                target = POwner->GetBattleTarget();
             }
+            controller->WeaponSkill(target->targid, PWeaponSkill->getID());
+        }
+        else // Mobskill
+        {
+            controller->MobSkill(target->targid, chosen_skill->skill_id);
         }
+        return true;
     }
+    return false;
 }
 
 } // namespace gambits
\ No newline at end of file