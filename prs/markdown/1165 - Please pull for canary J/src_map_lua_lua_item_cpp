@@ -22,6 +22,7 @@ along with this program.  If not, see http://www.gnu.org/licenses/
 #include "lua_item.h"
 
 #include "../../common/showmsg.h"
+#include "../map.h"
 #include "../utils/itemutils.h"
 #include "../items/item.h"
 #include "../items/item_equipment.h"
@@ -119,6 +120,53 @@ inline int32 CLuaItem::getTrialNumber(lua_State* L)
     return 1;
 }
 
+inline int32 CLuaItem::getMatchingTrials(lua_State* L)
+{
+    TPZ_DEBUG_BREAK_IF(m_PLuaItem == nullptr);
+
+    auto PItem = static_cast<CItemEquipment*>(m_PLuaItem);
+
+    const char* Query =
+        "SELECT trialId FROM `magian` "
+        "WHERE `reqItem` = %u AND "
+        "`reqItemAug1` = %u AND "
+        "`reqItemAug2` = %u AND "
+        "`reqItemAug3` = %u AND "
+        "`reqItemAug4` = %u AND "
+        "`reqItemAugValue1` = %u AND "
+        "`reqItemAugValue2` = %u AND "
+        "`reqItemAugValue3` = %u AND "
+        "`reqItemAugValue4` = %u AND "
+        "`trialTarget` <> 0;";
+
+    int32 augs[4][2] {};
+    for(int i = 0; i < 4; i++){
+        auto augbits = PItem->getAugment(i);
+        uint16 augmentid = (uint16)unpackBitsBE((uint8*)(&augbits), 0, 11);
+        uint8 augmentVal = (uint8)unpackBitsBE((uint8*)(&augbits), 11, 5);
+        augs[i][0] = augmentid;
+        augs[i][1] = augmentVal;
+    }
+
+    int32 ret = Sql_Query(SqlHandle, Query, PItem->getID(),
+            augs[0][0], augs[1][0], augs[2][0], augs[3][0],
+            augs[0][1], augs[1][1], augs[2][1], augs[3][1]);
+
+    lua_newtable(L);
+    if (ret != SQL_ERROR && Sql_NumRows(SqlHandle) != 0)
+    {
+        int32 trialCount {0};
+        while(Sql_NextRow(SqlHandle) == SQL_SUCCESS)
+        {
+            lua_pushinteger(L, ++trialCount);
+            lua_pushinteger(L, (int32)Sql_GetIntData(SqlHandle, 0));
+            lua_settable(L,-3);
+        }
+    }
+    return 1;
+
+}
+
 inline int32 CLuaItem::getWornItem(lua_State* L)
 {
     TPZ_DEBUG_BREAK_IF(m_PLuaItem == nullptr);
@@ -353,6 +401,7 @@ Lunar<CLuaItem>::Register_t CLuaItem::methods[] =
     LUNAR_DECLARE_METHOD(CLuaItem,getBasePrice),
     LUNAR_DECLARE_METHOD(CLuaItem,getSlotID),
     LUNAR_DECLARE_METHOD(CLuaItem,getTrialNumber),
+    LUNAR_DECLARE_METHOD(CLuaItem,getMatchingTrials),
     LUNAR_DECLARE_METHOD(CLuaItem,getWornItem),
     LUNAR_DECLARE_METHOD(CLuaItem,isType),
     LUNAR_DECLARE_METHOD(CLuaItem,isSubType),