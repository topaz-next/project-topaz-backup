@@ -34,7 +34,6 @@ along with this program.  If not, see http://www.gnu.org/licenses/
 #include "petutils.h"
 #include "zoneutils.h"
 #include "../entities/mobentity.h"
-#include "../entities/trustentity.h"
 #include "../entities/automatonentity.h"
 #include "../ability.h"
 #include "../status_effect_container.h"
@@ -56,29 +55,29 @@ along with this program.  If not, see http://www.gnu.org/licenses/
 #include "../packets/entity_update.h"
 #include "../packets/message_standard.h"
 #include "../packets/pet_sync.h"
-#include "../packets/trust_sync.h"
 
 struct Pet_t
 {
+    uint16      PetID;      // ID in pet_list.sql
     look_t		look;		// внешний вид
     string_t	name;		// имя
     ECOSYSTEM	EcoSystem;	// эко-система
 
-    uint8		minLevel;	// минимально-возможный  уровень
-    uint8		maxLevel;	// максимально-возможный уровень
+    uint8       minLevel;	// минимально-возможный  уровень
+    uint8       maxLevel;	// максимально-возможный уровень
 
     uint8       name_prefix;
-    uint8		size;		// размер модели
-    uint16		m_Family;
-    uint32		time;		// время существования (будет использоваться для задания длительности статус эффекта)
+    uint8       size;		// размер модели
+    uint16      m_Family;
+    uint32      time;		// время существования (будет использоваться для задания длительности статус эффекта)
 
-    uint8		mJob;
-    uint8		m_Element;
+    uint8       mJob;
+    uint8       m_Element;
     float       HPscale;                             // HP boost percentage
     float       MPscale;                             // MP boost percentage
 
     uint16      cmbDelay;
-    uint8 		speed;
+    uint8       speed;
     // stat ranks
     uint8        strRank;
     uint8        dexRank;
@@ -141,6 +140,7 @@ namespace petutils
 
         const char* Query =
             "SELECT\
+                pet_list.petid,\
                 pet_list.name,\
                 modelid,\
                 minLevel,\
@@ -178,44 +178,45 @@ namespace petutils
             {
                 Pet_t* Pet = new Pet_t();
 
-                Pet->name.insert(0, (const char*)Sql_GetData(SqlHandle, 0));
+                Pet->PetID = (uint16)Sql_GetIntData(SqlHandle, 0);
+                Pet->name.insert(0, (const char*)Sql_GetData(SqlHandle, 1));
 
-                memcpy(&Pet->look, Sql_GetData(SqlHandle, 1), 20);
-                Pet->minLevel = (uint8)Sql_GetIntData(SqlHandle, 2);
-                Pet->maxLevel = (uint8)Sql_GetIntData(SqlHandle, 3);
-                Pet->time = Sql_GetUIntData(SqlHandle, 4);
-                Pet->size = Sql_GetUIntData(SqlHandle, 5);
-                Pet->EcoSystem = (ECOSYSTEM)Sql_GetIntData(SqlHandle, 6);
-                Pet->m_Family = (uint16)Sql_GetIntData(SqlHandle, 7);
-                Pet->mJob = (uint8)Sql_GetIntData(SqlHandle, 8);
-                Pet->m_Element = (uint8)Sql_GetIntData(SqlHandle, 9);
+                memcpy(&Pet->look, Sql_GetData(SqlHandle, 2), 20);
+                Pet->minLevel = (uint8)Sql_GetIntData(SqlHandle, 3);
+                Pet->maxLevel = (uint8)Sql_GetIntData(SqlHandle, 4);
+                Pet->time = Sql_GetUIntData(SqlHandle, 5);
+                Pet->size = Sql_GetUIntData(SqlHandle, 6);
+                Pet->EcoSystem = (ECOSYSTEM)Sql_GetIntData(SqlHandle, 7);
+                Pet->m_Family = (uint16)Sql_GetIntData(SqlHandle, 8);
+                Pet->mJob = (uint8)Sql_GetIntData(SqlHandle, 9);
+                Pet->m_Element = (uint8)Sql_GetIntData(SqlHandle, 10);
 
-                Pet->HPscale = Sql_GetFloatData(SqlHandle, 10);
-                Pet->MPscale = Sql_GetFloatData(SqlHandle, 11);
+                Pet->HPscale = Sql_GetFloatData(SqlHandle, 11);
+                Pet->MPscale = Sql_GetFloatData(SqlHandle, 12);
 
-                Pet->speed = (uint8)Sql_GetIntData(SqlHandle, 12);
+                Pet->speed = (uint8)Sql_GetIntData(SqlHandle, 13);
 
-                Pet->strRank = (uint8)Sql_GetIntData(SqlHandle, 13);
-                Pet->dexRank = (uint8)Sql_GetIntData(SqlHandle, 14);
-                Pet->vitRank = (uint8)Sql_GetIntData(SqlHandle, 15);
-                Pet->agiRank = (uint8)Sql_GetIntData(SqlHandle, 16);
-                Pet->intRank = (uint8)Sql_GetIntData(SqlHandle, 17);
-                Pet->mndRank = (uint8)Sql_GetIntData(SqlHandle, 18);
-                Pet->chrRank = (uint8)Sql_GetIntData(SqlHandle, 19);
-                Pet->defRank = (uint8)Sql_GetIntData(SqlHandle, 20);
-                Pet->attRank = (uint8)Sql_GetIntData(SqlHandle, 21);
-                Pet->accRank = (uint8)Sql_GetIntData(SqlHandle, 22);
-                Pet->evaRank = (uint8)Sql_GetIntData(SqlHandle, 23);
+                Pet->strRank = (uint8)Sql_GetIntData(SqlHandle, 14);
+                Pet->dexRank = (uint8)Sql_GetIntData(SqlHandle, 15);
+                Pet->vitRank = (uint8)Sql_GetIntData(SqlHandle, 16);
+                Pet->agiRank = (uint8)Sql_GetIntData(SqlHandle, 17);
+                Pet->intRank = (uint8)Sql_GetIntData(SqlHandle, 18);
+                Pet->mndRank = (uint8)Sql_GetIntData(SqlHandle, 19);
+                Pet->chrRank = (uint8)Sql_GetIntData(SqlHandle, 20);
+                Pet->defRank = (uint8)Sql_GetIntData(SqlHandle, 21);
+                Pet->attRank = (uint8)Sql_GetIntData(SqlHandle, 22);
+                Pet->accRank = (uint8)Sql_GetIntData(SqlHandle, 23);
+                Pet->evaRank = (uint8)Sql_GetIntData(SqlHandle, 24);
 
-                Pet->hasSpellScript = (bool)Sql_GetIntData(SqlHandle, 24);
+                Pet->hasSpellScript = (bool)Sql_GetIntData(SqlHandle, 25);
 
-                Pet->spellList = (uint8)Sql_GetIntData(SqlHandle, 25);
+                Pet->spellList = (uint8)Sql_GetIntData(SqlHandle, 26);
 
                 // resistances
-                Pet->slashres = (uint16)(Sql_GetFloatData(SqlHandle, 26) * 1000);
-                Pet->pierceres = (uint16)(Sql_GetFloatData(SqlHandle, 27) * 1000);
-                Pet->hthres = (uint16)(Sql_GetFloatData(SqlHandle, 28) * 1000);
-                Pet->impactres = (uint16)(Sql_GetFloatData(SqlHandle, 29) * 1000);
+                Pet->slashres = (uint16)(Sql_GetFloatData(SqlHandle, 27) * 1000);
+                Pet->pierceres = (uint16)(Sql_GetFloatData(SqlHandle, 28) * 1000);
+                Pet->hthres = (uint16)(Sql_GetFloatData(SqlHandle, 29) * 1000);
+                Pet->impactres = (uint16)(Sql_GetFloatData(SqlHandle, 30) * 1000);
 
                 Pet->firedef = 0;
                 Pet->icedef = 0;
@@ -226,18 +227,18 @@ namespace petutils
                 Pet->lightdef = 0;
                 Pet->darkdef = 0;
 
-                Pet->fireres = (uint16)((Sql_GetFloatData(SqlHandle, 30) - 1) * -100);
-                Pet->iceres = (uint16)((Sql_GetFloatData(SqlHandle, 31) - 1) * -100);
-                Pet->windres = (uint16)((Sql_GetFloatData(SqlHandle, 32) - 1) * -100);
-                Pet->earthres = (uint16)((Sql_GetFloatData(SqlHandle, 33) - 1) * -100);
-                Pet->thunderres = (uint16)((Sql_GetFloatData(SqlHandle, 34) - 1) * -100);
-                Pet->waterres = (uint16)((Sql_GetFloatData(SqlHandle, 35) - 1) * -100);
-                Pet->lightres = (uint16)((Sql_GetFloatData(SqlHandle, 36) - 1) * -100);
-                Pet->darkres = (uint16)((Sql_GetFloatData(SqlHandle, 37) - 1) * -100);
+                Pet->fireres = (uint16)((Sql_GetFloatData(SqlHandle, 31) - 1) * -100);
+                Pet->iceres = (uint16)((Sql_GetFloatData(SqlHandle, 32) - 1) * -100);
+                Pet->windres = (uint16)((Sql_GetFloatData(SqlHandle, 33) - 1) * -100);
+                Pet->earthres = (uint16)((Sql_GetFloatData(SqlHandle, 34) - 1) * -100);
+                Pet->thunderres = (uint16)((Sql_GetFloatData(SqlHandle, 35) - 1) * -100);
+                Pet->waterres = (uint16)((Sql_GetFloatData(SqlHandle, 36) - 1) * -100);
+                Pet->lightres = (uint16)((Sql_GetFloatData(SqlHandle, 37) - 1) * -100);
+                Pet->darkres = (uint16)((Sql_GetFloatData(SqlHandle, 38) - 1) * -100);
 
-                Pet->cmbDelay = (uint16)Sql_GetIntData(SqlHandle, 38);
-                Pet->name_prefix = (uint8)Sql_GetUIntData(SqlHandle, 39);
-                Pet->m_MobSkillList = (uint16)Sql_GetUIntData(SqlHandle, 40);
+                Pet->cmbDelay = (uint16)Sql_GetIntData(SqlHandle, 39);
+                Pet->name_prefix = (uint8)Sql_GetUIntData(SqlHandle, 40);
+                Pet->m_MobSkillList = (uint16)Sql_GetUIntData(SqlHandle, 41);
 
                 g_PPetList.push_back(Pet);
             }
@@ -634,190 +635,6 @@ namespace petutils
         }
     }
 
-    void LoadTrustStats(CTrustEntity* PTrust)
-    {
-        // Cargo cult of PC calculations.
-
-        float raceStat = 0;         // конечное число HP для уровня на основе расы.
-        float jobStat = 0;          // конечное число HP для уровня на основе первичной профессии.
-        float sJobStat = 0;         // коенчное число HP для уровня на основе вторичной профессии.
-        int32 bonusStat = 0;            // бонусное число HP которое добавляется при соблюдении некоторых условий.
-
-        int32 baseValueColumn = 0;  // номер колонки с базовым количеством HP
-        int32 scaleTo60Column = 1;  // номер колонки с модификатором до 60 уровня
-        int32 scaleOver30Column = 2;    // номер колонки с модификатором после 30 уровня
-        int32 scaleOver60Column = 3;    // номер колонки с модификатором после 60 уровня
-        int32 scaleOver75Column = 4;    // номер колонки с модификатором после 75 уровня
-        int32 scaleOver60 = 2;          // номер колонки с модификатором для расчета MP после 60 уровня
-        int32 scaleOver75 = 3;          // номер колонки с модификатором для расчета Статов после 75-го уровня
-
-        uint8 grade;
-
-        uint8 mlvl = PTrust->GetMLevel();
-        uint8 slvl = PTrust->GetSLevel();
-        JOBTYPE mjob = PTrust->GetMJob();
-        JOBTYPE sjob = PTrust->GetSJob();
-
-        uint8 race = 0;                 //Human
-
-        switch (PTrust->look.race)
-        {
-        case 3:
-        case 4: race = 1; break;    //Elvaan
-        case 5:
-        case 6: race = 2; break;    //Tarutaru
-        case 7: race = 3; break;    //Mithra
-        case 8: race = 4; break;    //Galka
-        }
-
-        // Расчет прироста HP от main job
-
-        int32 mainLevelOver30 = std::clamp(mlvl - 30, 0, 30);          // Расчет условия +1HP каждый лвл после 30 уровня
-        int32 mainLevelUpTo60 = (mlvl < 60 ? mlvl - 1 : 59);        // Первый режим рассчета до 60 уровня (Используется так же и для MP)
-        int32 mainLevelOver60To75 = std::clamp(mlvl - 60, 0, 15);      // Второй режим расчета после 60 уровня
-        int32 mainLevelOver75 = (mlvl < 75 ? 0 : mlvl - 75);            // Третий режим расчета после 75 уровня
-
-                                                                        //Расчет бонусного количества HP
-
-        int32 mainLevelOver10 = (mlvl < 10 ? 0 : mlvl - 10);            // +2HP на каждом уровне после 10
-        int32 mainLevelOver50andUnder60 = std::clamp(mlvl - 50, 0, 10);    // +2HP на каждом уровне в промежутке от 50 до 60 уровня
-        int32 mainLevelOver60 = (mlvl < 60 ? 0 : mlvl - 60);
-
-        // Расчет прироста HP от дополнительной профессии
-
-        int32 subLevelOver10 = std::clamp(slvl - 10, 0, 20);               // +1HP на каждый уровень после 10 (/2)
-        int32 subLevelOver30 = (slvl < 30 ? 0 : slvl - 30);             // +1HP на каждый уровень после 30
-
-                                                                        // Расчет raceStat jobStat bonusStat sJobStat
-                                                                        // Расчет по расе
-
-        grade = grade::GetRaceGrades(race, 0);
-
-        raceStat = grade::GetHPScale(grade, baseValueColumn) +
-            (grade::GetHPScale(grade, scaleTo60Column) * mainLevelUpTo60) +
-            (grade::GetHPScale(grade, scaleOver30Column) * mainLevelOver30) +
-            (grade::GetHPScale(grade, scaleOver60Column) * mainLevelOver60To75) +
-            (grade::GetHPScale(grade, scaleOver75Column) * mainLevelOver75);
-
-        // raceStat = (int32)(statScale[grade][baseValueColumn] + statScale[grade][scaleTo60Column] * (mlvl - 1));
-
-        // Расчет по main job
-        grade = grade::GetJobGrade(mjob, 0);
-
-        jobStat = grade::GetHPScale(grade, baseValueColumn) +
-            (grade::GetHPScale(grade, scaleTo60Column) * mainLevelUpTo60) +
-            (grade::GetHPScale(grade, scaleOver30Column) * mainLevelOver30) +
-            (grade::GetHPScale(grade, scaleOver60Column) * mainLevelOver60To75) +
-            (grade::GetHPScale(grade, scaleOver75Column) * mainLevelOver75);
-
-        // Расчет бонусных HP
-        bonusStat = (mainLevelOver10 + mainLevelOver50andUnder60) * 2;
-
-        // Расчет по support job
-        if (slvl > 0)
-        {
-            grade = grade::GetJobGrade(sjob, 0);
-
-            sJobStat = grade::GetHPScale(grade, baseValueColumn) +
-                (grade::GetHPScale(grade, scaleTo60Column) * (slvl - 1)) +
-                (grade::GetHPScale(grade, scaleOver30Column) * subLevelOver30) +
-                subLevelOver30 + subLevelOver10;
-            sJobStat = sJobStat / 2;
-        }
-
-
-        PTrust->health.maxhp = (int16)(map_config.player_hp_multiplier * (raceStat + jobStat + bonusStat + sJobStat));
-
-        //Начало расчера MP
-
-        raceStat = 0;
-        jobStat = 0;
-        sJobStat = 0;
-
-        // Расчет MP расе.
-        grade = grade::GetRaceGrades(race, 1);
-
-        //Если у main job нет МП рейтинга, расчитиваем расовый бонус на основе уровня subjob уровня(при условии, что у него есть МП рейтинг)
-        if (grade::GetJobGrade(mjob, 1) == 0)
-        {
-            if (grade::GetJobGrade(sjob, 1) != 0 && slvl > 0)                   // В этом выражении ошибка
-            {
-                raceStat = (grade::GetMPScale(grade, 0) + grade::GetMPScale(grade, scaleTo60Column) * (slvl - 1)) / map_config.sj_mp_divisor;   // Вот здесь ошибка
-            }
-        }
-        else {
-            //Расчет нормального расового бонуса
-            raceStat = grade::GetMPScale(grade, 0) +
-                grade::GetMPScale(grade, scaleTo60Column) * mainLevelUpTo60 +
-                grade::GetMPScale(grade, scaleOver60) * mainLevelOver60;
-        }
-
-        //Для главной профессии
-        grade = grade::GetJobGrade(mjob, 1);
-        if (grade > 0)
-        {
-            jobStat = grade::GetMPScale(grade, 0) +
-                grade::GetMPScale(grade, scaleTo60Column) * mainLevelUpTo60 +
-                grade::GetMPScale(grade, scaleOver60) * mainLevelOver60;
-        }
-
-        //Для дополнительной профессии
-        if (slvl > 0)
-        {
-            grade = grade::GetJobGrade(sjob, 1);
-            sJobStat = (grade::GetMPScale(grade, 0) + grade::GetMPScale(grade, scaleTo60Column) * (slvl - 1)) / map_config.sj_mp_divisor;
-        }
-
-        PTrust->health.maxmp = (int16)(map_config.player_mp_multiplier * (raceStat + jobStat + sJobStat)); // результат расчета MP
-
-        uint8 counter = 0;
-
-        for (uint8 StatIndex = 2; StatIndex <= 8; ++StatIndex)
-        {
-            // расчет по расе
-            grade = grade::GetRaceGrades(race, StatIndex);
-            raceStat = grade::GetStatScale(grade, 0) + grade::GetStatScale(grade, scaleTo60Column) * mainLevelUpTo60;
-
-            if (mainLevelOver60 > 0)
-            {
-                raceStat += grade::GetStatScale(grade, scaleOver60) * mainLevelOver60;
-
-                if (mainLevelOver75 > 0)
-                {
-                    raceStat += grade::GetStatScale(grade, scaleOver75) * mainLevelOver75 - (mlvl >= 75 ? 0.01f : 0);
-                }
-            }
-
-            // расчет по профессии
-            grade = grade::GetJobGrade(mjob, StatIndex);
-            jobStat = grade::GetStatScale(grade, 0) + grade::GetStatScale(grade, scaleTo60Column) * mainLevelUpTo60;
-
-            if (mainLevelOver60 > 0)
-            {
-                jobStat += grade::GetStatScale(grade, scaleOver60) * mainLevelOver60;
-
-                if (mainLevelOver75 > 0)
-                {
-                    jobStat += grade::GetStatScale(grade, scaleOver75) * mainLevelOver75 - (mlvl >= 75 ? 0.01f : 0);
-                }
-            }
-
-            // расчет по дополнительной профессии
-            if (slvl > 0)
-            {
-                grade = grade::GetJobGrade(sjob, StatIndex);
-                sJobStat = (grade::GetStatScale(grade, 0) + grade::GetStatScale(grade, scaleTo60Column) * (slvl - 1)) / 2;
-            }
-            else {
-                sJobStat = 0;
-            }
-
-            // Вывод значения
-            ref<uint16>(&PTrust->stats, counter) = (uint16)((raceStat + jobStat + sJobStat));
-            counter += 2;
-        }
-    }
-
     void LoadAvatarStats(CPetEntity* PPet)
     {
         // Объявление переменных, нужных для рассчета.
@@ -1027,73 +844,6 @@ namespace petutils
         }
     }
 
-    void SpawnTrust(CCharEntity* PMaster, uint32 TrustID)
-    {
-        // TODO: You can only spawn trusts in battle areas, similar to pets. See MSGBASIC_TRUST_NOT_HERE
-
-        // TODO: There is an expandable limit of trusts you can summon, based on key items.
-        size_t maxTrusts = 5;
-
-        // TODO: These checks should be done at before spellcast time!!
-        // If you're in a party, you can only spawn trusts if:
-        //  * You're the party leader
-        //  * The party isn't full
-        //  * The party isn't part of an alliance
-        if (PMaster->PParty != nullptr)
-        {
-            CBattleEntity* PLeader = PMaster->PParty->GetLeader();
-            if (PLeader == nullptr || PLeader->id != PMaster->id)
-            {
-                PMaster->pushPacket(new CMessageStandardPacket(PMaster, 0, MsgStd::TrustSoloOrLeader));
-                return;
-            }
-            if (PMaster->PParty->members.size() >= 6)
-            {
-                PMaster->pushPacket(new CMessageStandardPacket(PMaster, 0, MsgStd::TrustLimit));
-                return;
-            }
-            if (PMaster->PParty->m_PAlliance != nullptr)
-            {
-                PMaster->pushPacket(new CMessageStandardPacket(PMaster, 0, MsgStd::TrustSoloOrLeader));
-                return;
-            }
-
-            // Reduce the max number of summonable trusts
-            maxTrusts = 6 - PMaster->PParty->members.size();
-        }
-
-        if (PMaster->PTrusts.size() >= maxTrusts)
-        {
-            PMaster->pushPacket(new CMessageStandardPacket(PMaster, 0, MsgStd::TrustLimit));
-            return;
-        }
-
-        // You can't spawn the same trust twice
-        // TODO: This includes otherwise distinct trusts, e.g. Shantotto and Shantotto II, only 1 can be called.
-        //       It'd probably be "good enough" to use the name as a heuristic, looking for "II" (this catches 99% of them).
-        for (auto PTrust : PMaster->PTrusts)
-        {
-            if (PTrust->m_PetID == TrustID)
-            {
-                PMaster->pushPacket(new CMessageStandardPacket(PMaster, 0, MsgStd::TrustSame));
-                return;
-            }
-        }
-
-        // Make a new party if we weren't in one.
-        // TODO: It's actually not a real party: /sea shows your name as grey not yellow, but it shows as a party on the GUI.
-        if (PMaster->PParty == nullptr)
-        {
-            PMaster->PParty = new CParty(PMaster);
-        }
-
-        CTrustEntity* PTrust = LoadTrust(PMaster, TrustID);
-        PMaster->PTrusts.insert(PMaster->PTrusts.begin(), PTrust);
-        PMaster->StatusEffectContainer->CopyConfrontationEffect(PTrust);
-        PMaster->loc.zone->InsertPET(PTrust);
-        PMaster->PParty->ReloadParty();
-    }
-
     void SpawnMobPet(CBattleEntity* PMaster, uint32 PetID)
     {
         // this is ONLY used for mob smn elementals / avatars
@@ -1399,12 +1149,15 @@ namespace petutils
 
     void LoadPet(CBattleEntity* PMaster, uint32 PetID, bool spawningFromZone)
     {
-        TPZ_DEBUG_BREAK_IF(PetID >= g_PPetList.size());
+        TPZ_DEBUG_BREAK_IF(PMaster == nullptr);
+
+        Pet_t* PPetData = new Pet_t();
+
+        PPetData = *std::find_if(g_PPetList.begin(), g_PPetList.end(), [PetID](Pet_t* t) { return t->PetID == PetID; });
+
         if (PMaster->GetMJob() != JOB_DRG && PetID == PETID_WYVERN)
             return;
 
-        Pet_t* PPetData = g_PPetList.at(PetID);
-
         if (PMaster->objtype == TYPE_PC)
         {
             ((CCharEntity*)PMaster)->petZoningInfo.petID = PetID;
@@ -1437,8 +1190,8 @@ namespace petutils
 
                     if (wyvernid != 0)
                     {
-                        g_PPetList.at(PetID)->name.clear();
-                        g_PPetList.at(PetID)->name.insert(0, (const char*)Sql_GetData(SqlHandle, 0));
+                        PPetData->name.clear();
+                        PPetData->name.insert(0, (const char*)Sql_GetData(SqlHandle, 0));
                     }
                 }
             }
@@ -1463,8 +1216,8 @@ namespace petutils
 
                     if (adventuringfellowid != 0)
                     {
-                        g_PPetList.at(PetID)->name.clear();
-                        g_PPetList.at(PetID)->name.insert(0, Sql_GetData(SqlHandle, 0));
+                        PPetData->name.clear();
+                        PPetData->name.insert(0, Sql_GetData(SqlHandle, 0));
                     }
                 }
             }
@@ -1491,7 +1244,7 @@ namespace petutils
                         uint16 chocoboname1 = chocoboid & 0x0000FFFF;
                         uint16 chocoboname2 = chocoboid >>= 16;
 
-                        g_PPetList.at(PetID)->name.clear();
+                        PPetData->name.clear();
 
                         Query =
                             "SELECT\
@@ -1505,7 +1258,7 @@ namespace petutils
                             {
                                 if (chocoboname1 != 0 && chocoboname2 != 0)
                                 {
-                                    g_PPetList.at(PetID)->name.insert(0, (const char*)Sql_GetData(SqlHandle, 0));
+                                    PPetData->name.insert(0, (const char*)Sql_GetData(SqlHandle, 0));
                                 }
                             }
                         }
@@ -1536,19 +1289,19 @@ namespace petutils
 
         if (petType != PETTYPE_AUTOMATON)
         {
-            PPet->look = g_PPetList.at(PetID)->look;
-            PPet->name = g_PPetList.at(PetID)->name;
+            PPet->look = PPetData->look;
+            PPet->name = PPetData->name;
         }
         else
         {
             PPet->look.size = MODEL_AUTOMATON;
         }
-        PPet->m_name_prefix = g_PPetList.at(PetID)->name_prefix;
-        PPet->m_Family = g_PPetList.at(PetID)->m_Family;
-        PPet->m_MobSkillList = g_PPetList.at(PetID)->m_MobSkillList;
-        PPet->SetMJob(g_PPetList.at(PetID)->mJob);
-        PPet->m_Element = g_PPetList.at(PetID)->m_Element;
-        PPet->m_PetID = PetID;
+        PPet->m_name_prefix = PPetData->name_prefix;
+        PPet->m_Family = PPetData->m_Family;
+        PPet->m_MobSkillList = PPetData->m_MobSkillList;
+        PPet->SetMJob(PPetData->mJob);
+        PPet->m_Element = PPetData->m_Element;
+        PPet->m_PetID = PPetData->PetID;
 
         if (PPet->getPetType() == PETTYPE_AVATAR)
         {
@@ -1560,7 +1313,7 @@ namespace petutils
             {
                 PPet->SetMLevel(PMaster->GetSLevel());
             }
-            else{ //should never happen
+            else { //should never happen
                 ShowDebug("%s summoned an avatar but is not SMN main or SMN sub! Please report. \n", PMaster->GetName());
                 PPet->SetMLevel(1);
             }
@@ -1715,59 +1468,12 @@ namespace petutils
 
         FinalizePetStatistics(PMaster, PPet);
         PPet->status = STATUS_NORMAL;
-        PPet->m_ModelSize = g_PPetList.at(PetID)->size;
-        PPet->m_EcoSystem = g_PPetList.at(PetID)->EcoSystem;
+        PPet->m_ModelSize = PPetData->size;
+        PPet->m_EcoSystem = PPetData->EcoSystem;
 
         PMaster->PPet = PPet;
     }
 
-    CTrustEntity* LoadTrust(CCharEntity* PMaster, uint32 TrustID)
-    {
-        TPZ_DEBUG_BREAK_IF(TrustID >= g_PPetList.size());
-        CTrustEntity* PTrust = new CTrustEntity(PMaster);
-        PTrust->loc = PMaster->loc;
-        PTrust->m_OwnerID.id = PMaster->id;
-        PTrust->m_OwnerID.targid = PMaster->targid;
-
-        // spawn me randomly around master
-        PTrust->loc.p = nearPosition(PMaster->loc.p, CPetController::PetRoamDistance, (float)M_PI);
-        Pet_t* trust = g_PPetList.at(TrustID);
-        PTrust->look = trust->look;
-        PTrust->name = trust->name;
-        PTrust->m_name_prefix = trust->name_prefix;
-        PTrust->m_Family = trust->m_Family;
-        PTrust->m_MobSkillList = trust->m_MobSkillList;
-        PTrust->SetMJob(trust->mJob);
-        PTrust->SetSJob(trust->mJob); // TODO: This may not be true for some trusts
-        PTrust->m_Element = trust->m_Element;
-        PTrust->m_PetID = TrustID;
-        PTrust->status = STATUS_NORMAL;
-        PTrust->m_ModelSize = trust->size;
-        PTrust->m_EcoSystem = trust->EcoSystem;
-
-        // assume level matches master
-        PTrust->SetMLevel(PMaster->GetMLevel());
-        PTrust->SetSLevel(PMaster->GetSLevel());
-
-        // TODO: Proper stats per trust
-        PTrust->setModifier(Mod::ATT, battleutils::GetMaxSkill(SKILL_CLUB, JOB_WHM, PTrust->GetMLevel()));
-        PTrust->setModifier(Mod::ACC, battleutils::GetMaxSkill(SKILL_CLUB, JOB_WHM, PTrust->GetMLevel()));
-        PTrust->setModifier(Mod::EVA, battleutils::GetMaxSkill(SKILL_THROWING, JOB_WHM, PTrust->GetMLevel())); // Throwing??
-        PTrust->setModifier(Mod::DEF, battleutils::GetMaxSkill(SKILL_THROWING, JOB_WHM, PTrust->GetMLevel()));
-        //set C magic evasion
-        PTrust->setModifier(Mod::MEVA, battleutils::GetMaxSkill(SKILL_ELEMENTAL_MAGIC, JOB_RDM, PTrust->GetMLevel()));
-        // HP/MP STR/DEX/etc..
-        LoadTrustStats(PTrust);
-
-        PTrust->health.tp = 0;
-        PTrust->UpdateHealth();
-        PTrust->health.hp = PTrust->GetMaxHP();
-        PTrust->health.mp = PTrust->GetMaxMP();
-
-        // TODO: Load stats from script
-        return PTrust;
-    }
-
     void LoadWyvernStatistics(CBattleEntity* PMaster, CPetEntity* PPet, bool finalize)
     {
         //set the wyvern job based on master's SJ