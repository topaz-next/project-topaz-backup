@@ -24,6 +24,8 @@
 #include "../../common/utils.h"
 
 #include <unordered_map>
+#include <string>
+#include <array>
 
 #include "luautils.h"
 #include "lua_action.h"
@@ -47,6 +49,7 @@
 #include "../party.h"
 #include "../alliance.h"
 #include "../entities/mobentity.h"
+#include "../roe.h"
 #include "../spell.h"
 #include "../weapon_skill.h"
 #include "../vana_time.h"
@@ -80,6 +83,7 @@
 #include "../ai/states/magic_state.h"
 #include <optional>
 #include "../battlefield.h"
+#include "../daily_system.h"
 #include "../packets/char_emotion.h"
 
 namespace luautils
@@ -118,6 +122,8 @@ namespace luautils
         lua_register(LuaHandle, "GetPlayerByName", luautils::GetPlayerByName);
         lua_register(LuaHandle, "GetPlayerByID", luautils::GetPlayerByID);
         lua_register(LuaHandle, "GetMobAction", luautils::GetMobAction);
+        lua_register(LuaHandle, "GetMagianTrial", luautils::GetMagianTrial);
+        lua_register(LuaHandle, "GetMagianTrialsWithParent", luautils::GetMagianTrialsWithParent);
         lua_register(LuaHandle, "VanadielTime", luautils::VanadielTime);
         lua_register(LuaHandle, "VanadielTOTD", luautils::VanadielTOTD);
         lua_register(LuaHandle, "VanadielHour", luautils::VanadielHour);
@@ -151,6 +157,7 @@ namespace luautils
         lua_register(LuaHandle, "GetItem", luautils::GetItem);
         lua_register(LuaHandle, "getAbility", luautils::getAbility);
         lua_register(LuaHandle, "getSpell", luautils::getSpell);
+        lua_register(LuaHandle, "SelectDailyItem", luautils::SelectDailyItem);
 
         Lunar<CLuaAbility>::Register(LuaHandle);
         Lunar<CLuaAction>::Register(LuaHandle);
@@ -1042,6 +1049,140 @@ namespace luautils
         return 1;
     }
 
+    /*******************************************************************************
+    *                                                                              *
+    *  Returns data of Magian trials                                               *
+    *  Will return a single table with keys matching the SQL table column          *
+    *  names if given one trial #, or will return a table of likewise trial        *
+    *  columns if given a table of trial #s.                                       *
+    *  examples: GetMagianTrial(2)          returns {column = value, ...}          *
+    *            GetMagianTrial({2, 16})    returns { 2 = { column = value, ...},  *
+    *                                                16 = { column = value, ...}}  *
+    *******************************************************************************/
+
+    int32 GetMagianTrial(lua_State* L)
+    {
+        if (!lua_isnil(L, 1))
+        {
+            // Get all magian table columns to build lua keys
+            const char* ColumnQuery = "SHOW COLUMNS FROM `magian`;";
+            std::vector<std::string> magianColumns;
+            if (Sql_Query(SqlHandle, ColumnQuery) == SQL_SUCCESS && Sql_NumRows(SqlHandle) != 0)
+            {
+                while(Sql_NextRow(SqlHandle) == SQL_SUCCESS)
+                {
+                    magianColumns.push_back((const char*)Sql_GetData(SqlHandle, 0));
+                }
+            } else {
+                ShowError("Error: No columns in `magian` table?");
+                lua_pushnil(L);
+                return 1;
+            }
+
+            const char* Query = "SELECT * FROM `magian` WHERE trialId = %u;";
+
+            if (lua_isnumber(L, 1))
+            {
+                int32 trial = static_cast<int32>(lua_tointeger(L, 1));
+                int32 field {0};
+                lua_newtable(L);
+                if (Sql_Query(SqlHandle, Query, trial) != SQL_ERROR && Sql_NumRows(SqlHandle) != 0 && Sql_NextRow(SqlHandle) == SQL_SUCCESS)
+                {
+                    for(auto column: magianColumns)
+                    {
+                        lua_pushstring(L, column.c_str());
+                        lua_pushinteger(L, (int32)Sql_GetIntData(SqlHandle, field++));
+                        lua_settable(L,-3);
+                    }
+                }
+            }
+            else if (lua_istable(L, 1))
+            {
+                // parse provided trial's from table
+                std::vector<int32> trials;
+                for(size_t i = 1, j = lua_objlen(L, 1); i <= j; i++)
+                {
+                    lua_pushinteger(L, i);
+                    lua_gettable(L, 1);
+                    if(!lua_tointeger(L, -1))
+                    {
+                        lua_pop(L, 1);
+                        continue;
+                    }
+                    trials.push_back(static_cast<int32>(lua_tointeger(L, -1)));
+                    lua_pop(L, 1);
+                }
+
+                // Build outer table
+                lua_newtable(L);
+                // one inner table each trial { trial# = { column = value, ... } }
+                for(auto trial: trials)
+                {
+                    int32 ret = Sql_Query(SqlHandle, Query, trial);
+                    if (ret != SQL_ERROR && Sql_NumRows(SqlHandle) != 0 && Sql_NextRow(SqlHandle) == SQL_SUCCESS)
+                    {
+                        lua_pushinteger(L, trial);
+                        lua_newtable(L);
+                        int32 field {0};
+                        for(auto column: magianColumns)
+                        {
+                            lua_pushstring(L, column.c_str());
+                            int t = (int32)Sql_GetIntData(SqlHandle, field++);
+                            lua_pushinteger(L, t);
+                            lua_settable(L,-3);
+                        }
+                        lua_settable(L,-3);
+                    }
+                }
+            } else {
+                return 0;
+            }
+            return 1;
+        }
+        lua_pushnil(L);
+        return 1;
+    }
+
+    /*******************************************************************************
+    *                                                                              *
+    *  Returns a list of trial numbers who have the given parent trial             *
+    *                                                                              *
+    *******************************************************************************/
+
+    int32 GetMagianTrialsWithParent(lua_State* L)
+    {
+        TPZ_DEBUG_BREAK_IF(lua_isnil(L, 1) || !lua_isnumber(L, 1));
+
+        if (lua_isnumber(L, 1))
+        {
+            int32 parentTrial = static_cast<int32>(lua_tointeger(L, 1));
+            const char* Query = "SELECT `trialId` from `magian` WHERE `previousTrial` = %u;";
+
+            int32 ret = Sql_Query(SqlHandle, Query, parentTrial);
+            if(ret != SQL_ERROR && Sql_NumRows(SqlHandle) > 0)
+            {
+                lua_newtable(L);
+                int32 field {0};
+                while(Sql_NextRow(SqlHandle) == 0)
+                {
+                    int32 childTrial = Sql_GetIntData(SqlHandle, 0);
+                    lua_pushinteger(L, ++field);
+                    lua_pushinteger(L, childTrial);
+                    lua_settable(L, -3);
+                }
+            }
+            else
+            {
+                lua_pushnil(L);
+            }
+        }
+        else
+        {
+            lua_pushnil(L);
+        }
+        return 1;
+    }
+
     /************************************************************************
     *                                                                       *
     *  ** DEPRECATED **                                                     *
@@ -2796,6 +2937,8 @@ namespace luautils
 
         CCharEntity* PChar = dynamic_cast<CCharEntity*>(PKiller);
 
+        roeutils::event(ROE_MOBKILL, (CCharEntity*)PKiller, RoeDatagram("mob", (CMobEntity*)PMob));
+
         if (PChar && PMob->objtype == TYPE_MOB)
         {
             // onMobDeathEx
@@ -2891,9 +3034,21 @@ namespace luautils
         else
         {
             int8 File[255];
-            memset(File, 0, sizeof(File));
-            PMob->objtype == TYPE_PET ? snprintf((char*)File, sizeof(File), "scripts/globals/pets/%s.lua", static_cast<CPetEntity*>(PMob)->GetScriptName().c_str()) :
-                snprintf((char*)File, sizeof(File), "scripts/zones/%s/mobs/%s.lua", PMob->loc.zone->GetName(), PMob->GetName());;
+            switch (PMob->objtype)
+            {
+            case TYPE_MOB:
+                snprintf((char*)File, sizeof(File), "scripts/zones/%s/mobs/%s.lua", PMob->loc.zone->GetName(), PMob->GetName());
+                break;
+            case TYPE_PET:
+                snprintf((char*)File, sizeof(File), "scripts/globals/pets/%s.lua", static_cast<CPetEntity*>(PMob)->GetScriptName().c_str());
+                break;
+            case TYPE_TRUST:
+                snprintf((char*)File, sizeof(File), "scripts/globals/spells/trust/%s.lua", PMob->GetName());
+                break;
+            default:
+                ShowWarning("luautils::onMobDeath (%d): unknown objtype\n", PMob->objtype);
+                break;
+            }
 
             lua_pushnil(LuaHandle);
             lua_setglobal(LuaHandle, "onMobDeath");
@@ -2941,8 +3096,22 @@ namespace luautils
         TPZ_DEBUG_BREAK_IF(PMob == nullptr);
 
         int8 File[255];
-        PMob->objtype == TYPE_PET ? snprintf((char*)File, sizeof(File), "scripts/globals/pets/%s.lua", static_cast<CPetEntity*>(PMob)->GetScriptName().c_str()) :
+        switch (PMob->objtype)
+        {
+        case TYPE_MOB:
             snprintf((char*)File, sizeof(File), "scripts/zones/%s/mobs/%s.lua", PMob->loc.zone->GetName(), PMob->GetName());
+            break;
+        case TYPE_PET:
+            snprintf((char*)File, sizeof(File), "scripts/globals/pets/%s.lua", static_cast<CPetEntity*>(PMob)->GetScriptName().c_str());
+            break;
+        case TYPE_TRUST:
+            snprintf((char*)File, sizeof(File), "scripts/globals/spells/trust/%s.lua", PMob->GetName());
+            break;
+        default:
+            ShowWarning("luautils::onMobSpawn (%d): unknown objtype\n", PMob->objtype);
+            break;
+        }
+
         if (prepFile(File, "onMobSpawn"))
         {
             return -1;
@@ -2951,7 +3120,6 @@ namespace luautils
         CLuaBaseEntity LuaMobEntity(PMob);
         Lunar<CLuaBaseEntity>::push(LuaHandle, &LuaMobEntity);
 
-
         if (lua_pcall(LuaHandle, 1, 0, 0))
         {
             ShowError("luautils::onMobSpawn: %s\n", lua_tostring(LuaHandle, -1));
@@ -3028,8 +3196,21 @@ namespace luautils
         TPZ_DEBUG_BREAK_IF(PMob == nullptr);
 
         int8 File[255];
-        PMob->objtype == TYPE_PET ? snprintf((char*)File, sizeof(File), "scripts/globals/pets/%s.lua", static_cast<CPetEntity*>(PMob)->GetScriptName().c_str()) :
+        switch (PMob->objtype)
+        {
+        case TYPE_MOB:
             snprintf((char*)File, sizeof(File), "scripts/zones/%s/mobs/%s.lua", PMob->loc.zone->GetName(), PMob->GetName());
+            break;
+        case TYPE_PET:
+            snprintf((char*)File, sizeof(File), "scripts/globals/pets/%s.lua", static_cast<CPetEntity*>(PMob)->GetScriptName().c_str());
+            break;
+        case TYPE_TRUST:
+            snprintf((char*)File, sizeof(File), "scripts/globals/spells/trust/%s.lua", PMob->GetName());
+            break;
+        default:
+            ShowWarning("luautils::onMobDespawn (%d): unknown objtype\n", PMob->objtype);
+            break;
+        }
 
         if (prepFile(File, "onMobDespawn"))
         {
@@ -3148,7 +3329,7 @@ namespace luautils
     *                                                                       *
     ************************************************************************/
 
-    std::tuple<int32, uint8, uint8> OnUseWeaponSkill(CCharEntity* PChar, CBaseEntity* PMob, CWeaponSkill* wskill, uint16 tp, bool primary, action_t& action, CBattleEntity* taChar)
+    std::tuple<int32, uint8, uint8> OnUseWeaponSkill(CBattleEntity* PChar, CBaseEntity* PMob, CWeaponSkill* wskill, uint16 tp, bool primary, action_t& action, CBattleEntity* taChar)
     {
         lua_prepscript("scripts/globals/weaponskills/%s.lua", wskill->getName());
 
@@ -4545,6 +4726,16 @@ namespace luautils
         }
     }
 
+    int32 SelectDailyItem(lua_State* L)
+    {
+        TPZ_DEBUG_BREAK_IF(lua_isnil(L, 1) || !lua_isuserdata(L, 1));
+        TPZ_DEBUG_BREAK_IF(lua_isnil(L, 2) || !lua_isnumber(L, 2));
+        CLuaBaseEntity* PLuaBaseEntity = Lunar<CLuaBaseEntity>::check(L, 1);
+        CCharEntity* player = (CCharEntity*)PLuaBaseEntity->GetBaseEntity();
+        lua_pushinteger(L, daily::SelectItem(player, (uint8)lua_tointeger(L, 2)));
+        return 1;
+    }
+
     void OnPlayerEmote(CCharEntity* PChar, Emote EmoteID)
     {
         lua_prepscript("scripts/globals/player.lua");