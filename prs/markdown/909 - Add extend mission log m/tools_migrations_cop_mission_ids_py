@@ -55,43 +55,44 @@ def check_preconditions(cur):
 
 def needs_to_run(cur):
     # Ensure old mission IDs are still being used
-    cur.execute("SELECT missions FROM chars WHERE missions IS NOT NULL LIMIT 1;")
-
-    row = cur.fetchone()
-    if row and len(row[0]) != 1050:
+    cur.execute("SELECT COUNT(*) FROM chars WHERE LENGTH(missions) < 1050;")
+    row = cur.fetchone()[0]
+    if row and row > 0:
         return True
-    if row and len(row[0]) == 1050:
-        row = bytearray(bytes(row[0]))
+    cur.execute("SELECT missions FROM chars WHERE missions IS NOT NULL AND LENGTH(missions) = 1050 LIMIT 1;")
+    row = cur.fetchone()
+    if row:
+        row = bytearray(row[0])
         currentMissionID = int.from_bytes(row[420:422], byteorder='little')
         if currentMissionID < 101:
             return True
     return False
 
 
 def migrate(cur, db):
-    minID = 0
-    maxID = 0
-
-    cur.execute("SELECT MIN(charid), MAX(charid) FROM chars;")
-
+    efile = open('migration_errors.log', 'a')
+    cur.execute("SELECT charid FROM chars WHERE LENGTH(missions) = 1050;")
     rows = cur.fetchall()
-
-    for ids in rows:
-
-        minID = ids[0]
-        maxID = ids[1]
-
-        for charid in range(minID, maxID + 1):
-            cur.execute("SELECT missions FROM chars WHERE charid = {} AND missions IS NOT NULL".format(charid))
-            row = cur.fetchone()
-            if row:
-                row = bytearray(bytes(row[0]))
+    for charid in rows:
+        charid = charid[0]
+        cur.execute("SELECT missions FROM chars WHERE charid = {}".format(charid))
+        row = cur.fetchone()
+        if row:
+            try:
+                row = bytearray(row[0])
                 currentMissionID = int.from_bytes(row[420:422], byteorder='little')
+                if currentMissionID not in mission_map:
+                    if currentMissionID > 100:
+                        continue
+                    efile.write('[cop_mission_ids] Invalid CoP mission for charid: ' + str(charid) + ', Mission ID: ' + str(currentMissionID) + '.')
+                    continue
                 newMissionID = mission_map[currentMissionID]
                 row[420:422] = newMissionID.to_bytes(2, 'little')
-            try:
-                cur.execute("UPDATE chars SET missions = %s WHERE charid = %s", (row, charid))
-                db.commit()
-            except mysql.connector.Error as err:
-                print("Something went wrong: {}".format(err))                
+                try:
+                    cur.execute("UPDATE chars SET missions = %s WHERE charid = %s", (row, charid))
+                    db.commit()
+                except mysql.connector.Error as err:
+                    print("Something went wrong: {}".format(err))
+            except:
+                efile.write('[cop_mission_ids] Error reading missions in chars table for charid: ' + str(charid) + '\n')
     db.commit()
\ No newline at end of file