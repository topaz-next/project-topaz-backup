@@ -112,7 +112,7 @@ function calculateRawWSDmg(attacker, target, wsID, tp, action, wsParams, calcPar
         end
 
         -- Add on native crit hit rate (guesstimated, it actually follows an exponential curve)
-        nativecrit = (attacker:getStat(tpz.mod.DEX) - target:getStat(tpz.mod.AGI))*0.005; -- assumes +0.5% crit rate per 1 dDEX
+        nativecrit = (attacker:getStat(tpz.mod.DEX) - target:getStat(tpz.mod.AGI))*0.005 -- assumes +0.5% crit rate per 1 dDEX
         if (nativecrit > 0.2) then -- caps only apply to base rate, not merits and mods
             nativecrit = 0.2
         elseif (nativecrit < 0.05) then
@@ -143,7 +143,7 @@ function calculateRawWSDmg(attacker, target, wsID, tp, action, wsParams, calcPar
     hitdmg, calcParams = getSingleHitDamage(attacker, target, dmg, wsParams, calcParams)
     finaldmg = finaldmg + hitdmg
 
-    -- Have to calculate added bonus for SA/TA here; since it is done outside of the fTP multiplier
+    -- Have to calculate added bonus for SA/TA here since it is done outside of the fTP multiplier
     if attacker:getMainJob() == tpz.job.THF then
         -- Add DEX/AGI bonus to first hit if THF main and valid Sneak/Trick Attack
         if calcParams.sneakApplicable then 
@@ -649,7 +649,7 @@ function fTP(tp,ftp1,ftp2,ftp3)
     else
         print("fTP error: TP value is not between 1000-3000!")
     end
-    return 1; -- no ftp mod
+    return 1 -- no ftp mod
 end
 
 function calculatedIgnoredDef(tp, def, ignore1, ignore2, ignore3)
@@ -658,7 +658,7 @@ function calculatedIgnoredDef(tp, def, ignore1, ignore2, ignore3)
     elseif (tp>=2000 and tp<=3000) then
         return (ignore2 + ( ((ignore3-ignore2)/1000) * (tp-2000)))*def
     end
-    return 1; -- no def ignore mod
+    return 1 -- no def ignore mod
 end
 
 -- Given the raw ratio value (atk/def) and levels, returns the cRatio (min then max)
@@ -928,7 +928,7 @@ function getAlpha(level)
     elseif (level < 99) then
         alpha = 0.85
     else
-        alpha = 1; 
+        alpha = 1 
     end
     return alpha
 end
@@ -944,7 +944,7 @@ function getMultiAttacks(attacker, target, numHits)
 
     -- Add Ambush Augments to Triple Attack
     if (attacker:hasTrait(76) and attacker:isBehind(target, 23)) then -- TRAIT_AMBUSH
-        tripleRate = tripleRate + attacker:getMerit(tpz.merit.AMBUSH) / 3; -- Value of Ambush is 3 per mert, augment gives +1 Triple Attack per merit
+        tripleRate = tripleRate + attacker:getMerit(tpz.merit.AMBUSH) / 3 -- Value of Ambush is 3 per mert, augment gives +1 Triple Attack per merit
     end
 
     -- QA/TA/DA can only proc on the first hit of each weapon or each fist