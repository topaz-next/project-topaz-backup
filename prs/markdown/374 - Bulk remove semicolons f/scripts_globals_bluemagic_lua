@@ -2,33 +2,33 @@ require("scripts/globals/status")
 require("scripts/globals/magic")
 
 -- The TP modifier
-TPMOD_NONE = 0;
-TPMOD_CRITICAL = 1;
-TPMOD_DAMAGE = 2;
-TPMOD_ACC = 3;
-TPMOD_ATTACK = 4;
+TPMOD_NONE = 0
+TPMOD_CRITICAL = 1
+TPMOD_DAMAGE = 2
+TPMOD_ACC = 3
+TPMOD_ATTACK = 4
 
 -- The SC the spell makes
-SC_IMPACTION = 0;
-SC_TRANSFIXION = 1;
-SC_DETONATION = 2;
-SC_REVERBERATION = 3;
-SC_SCISSION = 4;
-SC_INDURATION = 5;
-SC_LIQUEFACTION = 6;
-SC_COMPRESSION = 7;
-
-SC_FUSION = 8;
-SC_FRAGMENTATION = 9;
-SC_DISTORTION = 10;
-SC_GRAVITATION = 11;
-
-SC_DARK = 12;
-SC_LIGHT = 13;
-
-INT_BASED = 1;
-CHR_BASED = 2;
-MND_BASED = 3;
+SC_IMPACTION = 0
+SC_TRANSFIXION = 1
+SC_DETONATION = 2
+SC_REVERBERATION = 3
+SC_SCISSION = 4
+SC_INDURATION = 5
+SC_LIQUEFACTION = 6
+SC_COMPRESSION = 7
+
+SC_FUSION = 8
+SC_FRAGMENTATION = 9
+SC_DISTORTION = 10
+SC_GRAVITATION = 11
+
+SC_DARK = 12
+SC_LIGHT = 13
+
+INT_BASED = 1
+CHR_BASED = 2
+MND_BASED = 3
 
 -- Get the damage for a blue magic physical spell.
 -- caster - The entity casting the spell.
@@ -54,7 +54,7 @@ MND_BASED = 3;
 --      .agi_wsc - Same as above.
 function BluePhysicalSpell(caster, target, spell, params)
     -- store related values
-    local magicskill = caster:getSkillLevel(tpz.skill.BLUE_MAGIC); -- skill + merits + equip bonuses
+    local magicskill = caster:getSkillLevel(tpz.skill.BLUE_MAGIC) -- skill + merits + equip bonuses
     -- TODO: Under Chain affinity?
     -- TODO: Under Efflux?
     -- TODO: Merits.
@@ -66,154 +66,154 @@ function BluePhysicalSpell(caster, target, spell, params)
     -- worked out from http://wiki.ffxiclopedia.org/wiki/Calculating_Blue_Magic_Damage
     -- Final D value ??= floor(D+fSTR+WSC) * Multiplier
 
-    local D =  math.floor((magicskill * 0.11)) * 2 + 3;
+    local D =  math.floor((magicskill * 0.11)) * 2 + 3
     -- cap D
     if (D > params.duppercap) then
-        D = params.duppercap;
+        D = params.duppercap
     end
 
-    -- print("D val is ".. D);
+    -- print("D val is ".. D)
 
-    local fStr = BluefSTR(caster:getStat(tpz.mod.STR) - target:getStat(tpz.mod.VIT));
+    local fStr = BluefSTR(caster:getStat(tpz.mod.STR) - target:getStat(tpz.mod.VIT))
     if (fStr > 22) then
-        fStr = 22; -- TODO: Smite of Rage doesn't have this cap applied.
+        fStr = 22 -- TODO: Smite of Rage doesn't have this cap applied.
     end
 
-    -- print("fStr val is ".. fStr);
+    -- print("fStr val is ".. fStr)
 
-    local WSC = BlueGetWsc(caster, params);
+    local WSC = BlueGetWsc(caster, params)
 
-    -- print("wsc val is ".. WSC);
+    -- print("wsc val is ".. WSC)
 
-    local multiplier = params.multiplier;
+    local multiplier = params.multiplier
 
     -- If under CA, replace multiplier with fTP(multiplier, tp150, tp300)
-    local chainAffinity = caster:getStatusEffect(tpz.effect.CHAIN_AFFINITY);
+    local chainAffinity = caster:getStatusEffect(tpz.effect.CHAIN_AFFINITY)
     if chainAffinity ~= nil then
         -- Calculate the total TP available for the fTP multiplier.
-        local tp = caster:getTP() + caster:getMerit(tpz.merit.ENCHAINMENT);
+        local tp = caster:getTP() + caster:getMerit(tpz.merit.ENCHAINMENT)
         if tp > 3000 then
-            tp = 3000;
-        end;
+            tp = 3000
+        end
 
-        multiplier = BluefTP(tp, multiplier, params.tp150, params.tp300);
-    end;
+        multiplier = BluefTP(tp, multiplier, params.tp150, params.tp300)
+    end
 
     -- TODO: Modify multiplier to account for family bonus/penalty
-    local finalD = math.floor(D + fStr + WSC) * multiplier;
+    local finalD = math.floor(D + fStr + WSC) * multiplier
 
-    -- print("Final D is ".. finalD);
+    -- print("Final D is ".. finalD)
 
     ----------------------------------------------
     -- Get the possible pDIF range and hit rate --
     ----------------------------------------------
     if (params.offcratiomod == nil) then -- default to attack. Pretty much every physical spell will use this, Cannonball being the exception.
         params.offcratiomod = caster:getStat(tpz.mod.ATT)
-    end;
+    end
     -- print(params.offcratiomod)
-    local cratio = BluecRatio(params.offcratiomod / target:getStat(tpz.mod.DEF), caster:getMainLvl(), target:getMainLvl());
-    local hitrate = BlueGetHitRate(caster,target,true);
+    local cratio = BluecRatio(params.offcratiomod / target:getStat(tpz.mod.DEF), caster:getMainLvl(), target:getMainLvl())
+    local hitrate = BlueGetHitRate(caster,target,true)
 
-    -- print("Hit rate "..hitrate);
-    -- print("pdifmin "..cratio[1].." pdifmax "..cratio[2]);
+    -- print("Hit rate "..hitrate)
+    -- print("pdifmin "..cratio[1].." pdifmax "..cratio[2])
 
     -------------------------
     -- Perform the attacks --
     -------------------------
-    local hitsdone = 0;
-    local hitslanded = 0;
-    local finaldmg = 0;
+    local hitsdone = 0
+    local hitslanded = 0
+    local finaldmg = 0
 
     while (hitsdone < params.numhits) do
-        local chance = math.random();
+        local chance = math.random()
         if (chance <= hitrate) then -- it hit
             -- TODO: Check for shadow absorbs.
 
             -- Generate a random pDIF between min and max
-            local pdif = math.random((cratio[1]*1000),(cratio[2]*1000));
-            pdif = pdif/1000;
+            local pdif = math.random((cratio[1]*1000),(cratio[2]*1000))
+            pdif = pdif/1000
 
             -- Apply it to our final D
             if (hitsdone == 0) then -- only the first hit benefits from multiplier
-                finaldmg = finaldmg + (finalD * pdif);
+                finaldmg = finaldmg + (finalD * pdif)
             else
-                finaldmg = finaldmg + ((math.floor(D + fStr + WSC)) * pdif); -- same as finalD but without multiplier (it should be 1.0)
+                finaldmg = finaldmg + ((math.floor(D + fStr + WSC)) * pdif) -- same as finalD but without multiplier (it should be 1.0)
             end
 
-            hitslanded = hitslanded + 1;
+            hitslanded = hitslanded + 1
 
             -- increment target's TP (100TP per hit landed)
-            target:addTP(100);
+            target:addTP(100)
         end
 
-        hitsdone = hitsdone + 1;
+        hitsdone = hitsdone + 1
     end
 
-    -- print("Hits landed "..hitslanded.."/"..hitsdone.." for total damage: "..finaldmg);
+    -- print("Hits landed "..hitslanded.."/"..hitsdone.." for total damage: "..finaldmg)
 
-    return finaldmg;
-end;
+    return finaldmg
+end
 
 -- Blue Magical type spells
 
 function BlueMagicalSpell(caster, target, spell, params, statMod)
-    local D = caster:getMainLvl() + 2;
+    local D = caster:getMainLvl() + 2
 
     if (D > params.duppercap) then
-        D = params.duppercap;
+        D = params.duppercap
     end
 
-    local ST = BlueGetWsc(caster, params); -- According to Wiki ST is the same as WSC, essentially Blue mage spells that are magical use the dmg formula of Magical type Weapon skills
+    local ST = BlueGetWsc(caster, params) -- According to Wiki ST is the same as WSC, essentially Blue mage spells that are magical use the dmg formula of Magical type Weapon skills
 
     if (caster:hasStatusEffect(tpz.effect.BURST_AFFINITY)) then
-        ST = ST * 2;
+        ST = ST * 2
     end
 
-    local convergenceBonus = 1.0;
+    local convergenceBonus = 1.0
     if (caster:hasStatusEffect(tpz.effect.CONVERGENCE)) then
-        convergenceEffect = getStatusEffect(tpz.effect.CONVERGENCE);
-        local convLvl = convergenceEffect:getPower();
+        convergenceEffect = getStatusEffect(tpz.effect.CONVERGENCE)
+        local convLvl = convergenceEffect:getPower()
         if (convLvl == 1) then
-            convergenceBonus = 1.05;
+            convergenceBonus = 1.05
         elseif (convLvl == 2) then
-            convergenceBonus = 1.1;
+            convergenceBonus = 1.1
         elseif (convLvl == 3) then
-            convergenceBonus = 1.15;
+            convergenceBonus = 1.15
         end
     end
 
-    local statBonus = 0;
-    local dStat = 0; -- Please make sure to add an additional stat check if there is to be a spell that uses neither INT, MND, or CHR. None currently exist.
+    local statBonus = 0
+    local dStat = 0 -- Please make sure to add an additional stat check if there is to be a spell that uses neither INT, MND, or CHR. None currently exist.
     if (statMod == INT_BASED) then -- Stat mod is INT
         dStat = caster:getStat(tpz.mod.INT) - target:getStat(tpz.mod.INT)
-        statBonus = (dStat)* params.tMultiplier;
+        statBonus = (dStat)* params.tMultiplier
     elseif (statMod == CHR_BASED) then -- Stat mod is CHR
         dStat = caster:getStat(tpz.mod.CHR) - target:getStat(tpz.mod.CHR)
-        statBonus = (dStat)* params.tMultiplier;
+        statBonus = (dStat)* params.tMultiplier
     elseif (statMod == MND_BASED) then -- Stat mod is MND
         dStat = caster:getStat(tpz.mod.MND) - target:getStat(tpz.mod.MND)
-        statBonus = (dStat)* params.tMultiplier;
+        statBonus = (dStat)* params.tMultiplier
     end
 
-    D =(((D + ST) * params.multiplier * convergenceBonus) + statBonus);
+    D =(((D + ST) * params.multiplier * convergenceBonus) + statBonus)
 
     -- At this point according to wiki we apply standard magic attack calculations
 
-    local magicAttack = 1.0;
-    local multTargetReduction = 1.0; -- TODO: Make this dynamically change, temp static till implemented.
-    magicAttack = math.floor(D * multTargetReduction);
+    local magicAttack = 1.0
+    local multTargetReduction = 1.0 -- TODO: Make this dynamically change, temp static till implemented.
+    magicAttack = math.floor(D * multTargetReduction)
 
-    local rparams = {};
-    rparams.diff = dStat;
-    rparams.skillType = tpz.skill.BLUE_MAGIC;
-    magicAttack = math.floor(magicAttack * applyResistance(caster, target, spell, rparams));
+    local rparams = {}
+    rparams.diff = dStat
+    rparams.skillType = tpz.skill.BLUE_MAGIC
+    magicAttack = math.floor(magicAttack * applyResistance(caster, target, spell, rparams))
 
-    dmg = math.floor(addBonuses(caster, spell, target, magicAttack));
+    dmg = math.floor(addBonuses(caster, spell, target, magicAttack))
 
-    caster:delStatusEffectSilent(tpz.effect.BURST_AFFINITY);
+    caster:delStatusEffectSilent(tpz.effect.BURST_AFFINITY)
 
-    return dmg;
-end;
+    return dmg
+end
 
 function BlueFinalAdjustments(caster, target, spell, dmg, params)
     if (dmg < 0) then
@@ -246,53 +246,53 @@ function BlueGetWsc(attacker, params)
     wsc = (attacker:getStat(tpz.mod.STR) * params.str_wsc + attacker:getStat(tpz.mod.DEX) * params.dex_wsc +
          attacker:getStat(tpz.mod.VIT) * params.vit_wsc + attacker:getStat(tpz.mod.AGI) * params.agi_wsc +
          attacker:getStat(tpz.mod.INT) * params.int_wsc + attacker:getStat(tpz.mod.MND) * params.mnd_wsc +
-         attacker:getStat(tpz.mod.CHR) * params.chr_wsc) * BlueGetAlpha(attacker:getMainLvl());
-    return wsc;
-end;
+         attacker:getStat(tpz.mod.CHR) * params.chr_wsc) * BlueGetAlpha(attacker:getMainLvl())
+    return wsc
+end
 
 -- Given the raw ratio value (atk/def) and levels, returns the cRatio (min then max)
 function BluecRatio(ratio,atk_lvl,def_lvl)
     -- Level penalty...
-    local levelcor = 0;
+    local levelcor = 0
     if (atk_lvl < def_lvl) then
-        levelcor = 0.05 * (def_lvl - atk_lvl);
+        levelcor = 0.05 * (def_lvl - atk_lvl)
     end
-    ratio = ratio - levelcor;
+    ratio = ratio - levelcor
 
     -- apply caps
     if (ratio<0) then
-        ratio = 0;
+        ratio = 0
     elseif (ratio>2) then
-        ratio = 2;
+        ratio = 2
     end
 
     -- Obtaining cRatio_MIN
-    local cratiomin = 0;
+    local cratiomin = 0
     if (ratio<1.25) then
-        cratiomin = 1.2 * ratio - 0.5;
+        cratiomin = 1.2 * ratio - 0.5
     elseif (ratio>=1.25 and ratio<=1.5) then
-        cratiomin = 1;
+        cratiomin = 1
     elseif (ratio>1.5 and ratio<=2) then
-        cratiomin = 1.2 * ratio - 0.8;
+        cratiomin = 1.2 * ratio - 0.8
     end
 
     -- Obtaining cRatio_MAX
-    local cratiomax = 0;
+    local cratiomax = 0
     if (ratio<0.5) then
-        cratiomax = 0.4 + 1.2 * ratio;
+        cratiomax = 0.4 + 1.2 * ratio
     elseif (ratio<=0.833 and ratio>=0.5) then
-        cratiomax = 1;
+        cratiomax = 1
     elseif (ratio<=2 and ratio>0.833) then
-        cratiomax = 1.2 * ratio;
+        cratiomax = 1.2 * ratio
     end
-    cratio = {};
+    cratio = {}
     if (cratiomin < 0) then
-        cratiomin = 0;
+        cratiomin = 0
     end
-    cratio[1] = cratiomin;
-    cratio[2] = cratiomax;
-    return cratio;
-end;
+    cratio[1] = cratiomin
+    cratio[2] = cratiomax
+    return cratio
+end
 
 -- Gets the fTP multiplier by applying 2 straight lines between ftp1-ftp2 and ftp2-ftp3
 -- tp - The current TP
@@ -301,150 +301,150 @@ end;
 -- ftp3 - The TP 300% value
 function BluefTP(tp,ftp1,ftp2,ftp3)
     if (tp >= 0 and tp < 1500) then
-        return ftp1 + ( ((ftp2-ftp1)/100) * (tp / 10));
+        return ftp1 + ( ((ftp2-ftp1)/100) * (tp / 10))
     elseif (tp >= 1500 and tp <= 3000) then
         -- generate a straight line between ftp2 and ftp3 and find point @ tp
-        return ftp2 + ( ((ftp3-ftp2)/100) * ((tp-1500) / 10));
+        return ftp2 + ( ((ftp3-ftp2)/100) * ((tp-1500) / 10))
     else
-        print("blue fTP error: TP value is not between 0-3000!");
+        print("blue fTP error: TP value is not between 0-3000!")
     end
-    return 1; -- no ftp mod
-end;
+    return 1 -- no ftp mod
+end
 
 function BluefSTR(dSTR)
-    local fSTR2 = nil;
+    local fSTR2 = nil
     if (dSTR >= 12) then
-        fSTR2 = ((dSTR+4)/2);
+        fSTR2 = ((dSTR+4)/2)
     elseif (dSTR >= 6) then
-        fSTR2 = ((dSTR+6)/2);
+        fSTR2 = ((dSTR+6)/2)
     elseif (dSTR >= 1) then
-        fSTR2 = ((dSTR+7)/2);
+        fSTR2 = ((dSTR+7)/2)
     elseif (dSTR >= -2) then
-        fSTR2 = ((dSTR+8)/2);
+        fSTR2 = ((dSTR+8)/2)
     elseif (dSTR >= -7) then
-        fSTR2 = ((dSTR+9)/2);
+        fSTR2 = ((dSTR+9)/2)
     elseif (dSTR >= -15) then
-        fSTR2 = ((dSTR+10)/2);
+        fSTR2 = ((dSTR+10)/2)
     elseif (dSTR >= -21) then
-        fSTR2 = ((dSTR+12)/2);
+        fSTR2 = ((dSTR+12)/2)
     else
-        fSTR2 = ((dSTR+13)/2);
+        fSTR2 = ((dSTR+13)/2)
     end
 
-    return fSTR2;
-end;
+    return fSTR2
+end
 
 function BlueGetHitRate(attacker,target,capHitRate)
-    local acc = attacker:getACC();
-    local eva = target:getEVA();
+    local acc = attacker:getACC()
+    local eva = target:getEVA()
 
     if (attacker:getMainLvl() > target:getMainLvl()) then -- acc bonus!
-        acc = acc + ((attacker:getMainLvl()-target:getMainLvl())*4);
+        acc = acc + ((attacker:getMainLvl()-target:getMainLvl())*4)
     elseif (attacker:getMainLvl() < target:getMainLvl()) then -- acc penalty :(
-        acc = acc - ((target:getMainLvl()-attacker:getMainLvl())*4);
+        acc = acc - ((target:getMainLvl()-attacker:getMainLvl())*4)
     end
 
-    local hitdiff = 0;
-    local hitrate = 75;
+    local hitdiff = 0
+    local hitrate = 75
     if (acc>eva) then
-    hitdiff = (acc-eva)/2;
+    hitdiff = (acc-eva)/2
     end
     if (eva>acc) then
-    hitdiff = ((-1)*(eva-acc))/2;
+    hitdiff = ((-1)*(eva-acc))/2
     end
 
-    hitrate = hitrate+hitdiff;
-    hitrate = hitrate/100;
+    hitrate = hitrate+hitdiff
+    hitrate = hitrate/100
 
 
     -- Applying hitrate caps
     if (capHitRate) then -- this isn't capped for when acc varies with tp, as more penalties are due
         if (hitrate>0.95) then
-            hitrate = 0.95;
+            hitrate = 0.95
         end
         if (hitrate<0.2) then
-            hitrate = 0.2;
+            hitrate = 0.2
         end
     end
-    return hitrate;
-end;
+    return hitrate
+end
 
 -- Function to stagger duration of effects by using the resistance to change the value
 function getBlueEffectDuration(caster,resist,effect)
-    local duration = 0;
+    local duration = 0
 
     if (resist == 0.125) then
-        resist = 1;
+        resist = 1
     elseif (resist == 0.25) then
-        resist = 2;
+        resist = 2
     elseif (resist == 0.5) then
-        resist = 3;
+        resist = 3
     else
-        resist = 4;
+        resist = 4
     end
 
     if (effect == tpz.effect.BIND) then
-        duration = math.random(0,5) + resist * 5;
+        duration = math.random(0,5) + resist * 5
     elseif (effect == tpz.effect.STUN) then
-        duration = math.random(2,3) + resist;
-        -- printf("Duration of stun is %i",duration);
+        duration = math.random(2,3) + resist
+        -- printf("Duration of stun is %i",duration)
     elseif (effect == tpz.effect.WEIGHT) then
-        duration = math.random(20,24) + resist * 9; -- 20-24
+        duration = math.random(20,24) + resist * 9 -- 20-24
     elseif (effect == tpz.effect.PARALYSIS) then
-        duration = math.random(50,60) + resist * 15; -- 50- 60
+        duration = math.random(50,60) + resist * 15 -- 50- 60
     elseif (effect == tpz.effect.SLOW) then
-        duration = math.random(60,120) + resist * 15; -- 60- 120 -- Needs confirmation but capped max duration based on White Magic Spell Slow
+        duration = math.random(60,120) + resist * 15 -- 60- 120 -- Needs confirmation but capped max duration based on White Magic Spell Slow
     elseif (effect == tpz.effect.SILENCE) then
-        duration = math.random(60,180) + resist * 15; -- 60- 180 -- Needs confirmation but capped max duration based on White Magic Spell Silence
+        duration = math.random(60,180) + resist * 15 -- 60- 180 -- Needs confirmation but capped max duration based on White Magic Spell Silence
     elseif (effect == tpz.effect.POISON) then
-        duration = math.random(20,30) + resist * 9; -- 20-30 -- based on magic spell poison
+        duration = math.random(20,30) + resist * 9 -- 20-30 -- based on magic spell poison
     end
 
-    return duration;
-end;
+    return duration
+end
 
 -- obtains alpha, used for working out WSC
 function BlueGetAlpha(level)
-    local alpha = 1.00;
+    local alpha = 1.00
     if (level <= 5) then
-        alpha = 1.00;
+        alpha = 1.00
     elseif (level <= 11) then
-        alpha = 0.99;
+        alpha = 0.99
     elseif (level <= 17) then
-        alpha = 0.98;
+        alpha = 0.98
     elseif (level <= 23) then
-        alpha = 0.97;
+        alpha = 0.97
     elseif (level <= 29) then
-        alpha = 0.96;
+        alpha = 0.96
     elseif (level <= 35) then
-        alpha = 0.95;
+        alpha = 0.95
     elseif (level <= 41) then
-        alpha = 0.94;
+        alpha = 0.94
     elseif (level <= 47) then
-        alpha = 0.93;
+        alpha = 0.93
     elseif (level <= 53) then
-        alpha = 0.92;
+        alpha = 0.92
     elseif (level <= 59) then
-        alpha = 0.91;
+        alpha = 0.91
     elseif (level <= 61) then
-        alpha = 0.90;
+        alpha = 0.90
     elseif (level <= 63) then
-        alpha = 0.89;
+        alpha = 0.89
     elseif (level <= 65) then
-        alpha = 0.88;
+        alpha = 0.88
     elseif (level <= 67) then
-        alpha = 0.87;
+        alpha = 0.87
     elseif (level <= 69) then
-        alpha = 0.86;
+        alpha = 0.86
     elseif (level <= 71) then
-        alpha = 0.85;
+        alpha = 0.85
     elseif (level <= 73) then
-        alpha = 0.84;
+        alpha = 0.84
     elseif (level <= 75) then
-        alpha = 0.83;
+        alpha = 0.83
     elseif (level <= 99) then
-        alpha = 0.85;
+        alpha = 0.85
     end
-    return alpha;
-end;
+    return alpha
+end
 