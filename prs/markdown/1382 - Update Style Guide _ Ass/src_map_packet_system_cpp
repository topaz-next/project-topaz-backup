@@ -28,7 +28,8 @@ along with this program.  If not, see http://www.gnu.org/licenses/
 #include "../common/timer.h"
 #include "../common/utils.h"
 
-#include <string.h>
+#include <cstring>
+
 #include "alliance.h"
 #include "utils/blueutils.h"
 #include "party.h"
@@ -45,10 +46,12 @@ along with this program.  If not, see http://www.gnu.org/licenses/
 #include "utils/jailutils.h"
 #include "linkshell.h"
 #include "map.h"
+#include "notoriety_container.h"
 #include "roe.h"
+#include "entities/charentity.h"
 #include "entities/mobentity.h"
 #include "entities/npcentity.h"
-#include "entities/charentity.h"
+#include "entities/trustentity.h"
 #include "spell.h"
 #include "utils/synthutils.h"
 #include "trade_container.h"
@@ -637,285 +640,313 @@ void SmallPacket0x017(map_session_data_t* session, CCharEntity* PChar, CBasicPac
 *                                                                       *
 ************************************************************************/
 
-void SmallPacket0x01A(map_session_data_t* session, CCharEntity* PChar, CBasicPacket data)
+void SmallPacket0x01A(map_session_data_t* PSession, CCharEntity* PChar, CBasicPacket data)
 {
     // uint32 ID = data.ref<uint32>(0x04);
     uint16 TargID = data.ref<uint16>(0x08);
-    uint8  action = data.ref<uint8>(0x0A);
+    uint8 action = data.ref<uint8>(0x0A);
 
     switch (action)
     {
-    case 0x00: // trigger
-    {
-        if (PChar->StatusEffectContainer->HasPreventActionEffect())
-            return;
-
-        if (PChar->m_Costume != 0 || PChar->animation == ANIMATION_SYNTH)
+        case 0x00: // trigger
         {
-            PChar->pushPacket(new CReleasePacket(PChar, RELEASE_STANDARD));
-            return;
-        }
+            if (PChar->StatusEffectContainer->HasPreventActionEffect())
+            {
+                return;
+            }
+
+            if (PChar->m_Costume != 0 || PChar->animation == ANIMATION_SYNTH)
+            {
+                PChar->pushPacket(new CReleasePacket(PChar, RELEASE_STANDARD));
+                return;
+            }
 
-        CBaseEntity* PNpc = nullptr;
-        PNpc = PChar->GetEntity(TargID, TYPE_NPC);
+            CBaseEntity* PNpc = nullptr;
+            PNpc = PChar->GetEntity(TargID, TYPE_NPC);
 
-        if (PNpc != nullptr && distance(PNpc->loc.p, PChar->loc.p) <= 10 && (PNpc->PAI->IsSpawned() || PChar->m_moghouseID != 0))
-        {
-            PNpc->PAI->Trigger(PChar->targid);
-        }
+            if (PNpc != nullptr && distance(PNpc->loc.p, PChar->loc.p) <= 10 && (PNpc->PAI->IsSpawned() || PChar->m_moghouseID != 0))
+            {
+                PNpc->PAI->Trigger(PChar->targid);
+            }
 
-        // Releasing a trust
-        // TODO: 0x0c is set to 0x1, not sure if that is relevant or not.
-        CBaseEntity* PTrust = PChar->GetEntity(TargID, TYPE_TRUST);
-        if (PTrust != nullptr)
-        {
-            PChar->RemoveTrust((CTrustEntity*)PTrust);
+            // Releasing a trust
+            // TODO: 0x0c is set to 0x1, not sure if that is relevant or not.
+            if (auto* PTrust = dynamic_cast<CTrustEntity*>(PChar->GetEntity(TargID, TYPE_TRUST)))
+            {
+                PChar->RemoveTrust(PTrust);
+            }
+
+            if (PChar->m_event.EventID == -1)
+            {
+                PChar->m_event.reset();
+                PChar->pushPacket(new CReleasePacket(PChar, RELEASE_STANDARD));
+            }
         }
+        break;
+        case 0x02: // attack
+        {
+            if (PChar->isMounted())
+            {
+                PChar->StatusEffectContainer->DelStatusEffectSilent(EFFECT_MOUNTED);
+            }
 
-        if (PChar->m_event.EventID == -1)
+            PChar->PAI->Engage(TargID);
+        }
+        break;
+        case 0x03: // spellcast
         {
-            PChar->m_event.reset();
-            PChar->pushPacket(new CReleasePacket(PChar, RELEASE_STANDARD));
+            auto spellID = static_cast<SpellID>(data.ref<uint16>(0x0C));
+            PChar->PAI->Cast(TargID, spellID);
         }
-    }
-    break;
-    case 0x02: // attack
-    {
-        if (PChar->isMounted())
+        break;
+        case 0x04: // disengage
         {
-            PChar->StatusEffectContainer->DelStatusEffectSilent(EFFECT_MOUNTED);
+            PChar->PAI->Disengage();
         }
+        break;
+        case 0x05: // call for help
+        {
+            if (PChar->StatusEffectContainer->HasPreventActionEffect())
+            {
+                return;
+            }
 
-        PChar->PAI->Engage(TargID);
-    }
-    break;
-    case 0x03: // spellcast
-    {
-        SpellID spellID = (SpellID)data.ref<uint16>(0x0C);
-        PChar->PAI->Cast(TargID, spellID);
-    }
-    break;
-    case 0x04: // disengage
-    {
-        PChar->PAI->Disengage();
-    }
-    break;
-    case 0x05: // call for help
-    {
-        if(PChar->StatusEffectContainer->HasPreventActionEffect())
-            return;
+            if (auto* PMob = dynamic_cast<CMobEntity*>(PChar->GetBattleTarget()))
+            {
+                if (!PMob->CalledForHelp() && PMob->PEnmityContainer->HasID(PChar->id))
+                {
+                    PMob->CallForHelp(true);
+                    PChar->loc.zone->PushPacket(PChar, CHAR_INRANGE_SELF, new CMessageBasicPacket(PChar, PChar, 0, 0, 19));
+                    return;
+                }
+            }
 
-        if (auto PMob = dynamic_cast<CMobEntity*>(PChar->GetBattleTarget()))
+            PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, 0, 0, 22));
+        }
+        break;
+        case 0x07: // weaponskill
+        {
+            uint16 WSkillID = data.ref<uint16>(0x0C);
+            PChar->PAI->WeaponSkill(TargID, WSkillID);
+        }
+        break;
+        case 0x09: // jobability
+        {
+            uint16 JobAbilityID = data.ref<uint16>(0x0C);
+            PChar->PAI->Ability(TargID, JobAbilityID);
+        }
+        break;
+        case 0x0B: // homepoint
         {
-            if (!PMob->CalledForHelp() && PMob->PEnmityContainer->HasID(PChar->id))
+            if (!PChar->isDead())
             {
-                PMob->CallForHelp(true);
-                PChar->loc.zone->PushPacket(PChar, CHAR_INRANGE_SELF, new CMessageBasicPacket(PChar, PChar, 0, 0, 19));
                 return;
             }
+            charutils::HomePoint(PChar);
         }
-
-        PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, 0, 0, 22));
-    }
-    break;
-    case 0x07: // weaponskill
-    {
-        uint16 WSkillID = data.ref<uint16>(0x0C);
-        PChar->PAI->WeaponSkill(TargID, WSkillID);
-    }
-    break;
-    case 0x09: // jobability
-    {
-        uint16 JobAbilityID = data.ref<uint16>(0x0C);
-        PChar->PAI->Ability(TargID, JobAbilityID);
-    }
-    break;
-    case 0x0B: // homepoint
-    {
-        if (!PChar->isDead())
-            return;
-        charutils::HomePoint(PChar);
-    }
-    break;
-    case 0x0C: // assist
-    {
-        battleutils::assistTarget(PChar, TargID);
-    }
-    break;
-    case 0x0D: // raise menu
-    {
-        if (!PChar->m_hasRaise)
-            return;
-        if (data.ref<uint8>(0x0C) == 0) //ACCEPTED RAISE
-            PChar->Raise();
-        else
-            PChar->m_hasRaise = 0;
-    }
-    break;
-    case 0x0E: // Fishing
-    {
-        if(PChar->StatusEffectContainer->HasPreventActionEffect())
-            return;
-
-        fishingutils::StartFishing(PChar);
-    }
-    break;
-    case 0x0F: // change target
-    {
-        PChar->PAI->ChangeTarget(TargID);
-    }
-    break;
-    case 0x10: // rangedattack
-    {
-        PChar->PAI->RangedAttack(TargID);
-    }
-    break;
-    case 0x11: // chocobo digging
-    {
-        if (!PChar->isMounted())
-            return;
-
-        // bunch of gysahl greens
-        uint8 slotID = PChar->getStorage(LOC_INVENTORY)->SearchItem(4545);
-
-        if (slotID != ERROR_SLOTID)
+        break;
+        case 0x0C: // assist
+        {
+            battleutils::assistTarget(PChar, TargID);
+        }
+        break;
+        case 0x0D: // raise menu
         {
-            // attempt to dig
-            if (luautils::OnChocoboDig(PChar, true))
+            if (!PChar->m_hasRaise)
             {
-                charutils::UpdateItem(PChar, LOC_INVENTORY, slotID, -1);
-
-                PChar->pushPacket(new CInventoryFinishPacket());
-                PChar->pushPacket(new CChocoboDiggingPacket(PChar));
+                return;
+            }
 
-                // dig is possible
-                luautils::OnChocoboDig(PChar, false);
+            if (data.ref<uint8>(0x0C) == 0)
+            { // ACCEPTED RAISE
+                PChar->Raise();
             }
-            else {
-                // unable to dig yet
-                PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, 0, 0, MSGBASIC_WAIT_LONGER));
+            else
+            {
+                PChar->m_hasRaise = 0;
             }
         }
-        else{
-            // You don't have any gysahl greens
-            PChar->pushPacket(new CMessageSystemPacket(4545, 0, 39));
-        }
-    }
-    break;
-    case 0x12: // dismount
-    {
-        if (PChar->StatusEffectContainer->HasPreventActionEffect() || !PChar->isMounted())
-            return;
-
-        PChar->animation = ANIMATION_NONE;
-        PChar->updatemask |= UPDATE_HP;
-        PChar->StatusEffectContainer->DelStatusEffectSilent(EFFECT_MOUNTED);
-    }
-    break;
-    case 0x13: // tractor menu
-    {
-        if (data.ref<uint8>(0x0C) == 0 && PChar->m_hasTractor != 0) //ACCEPTED TRACTOR
+        break;
+        case 0x0E: // Fishing
         {
-            //PChar->PBattleAI->SetCurrentAction(ACTION_RAISE_MENU_SELECTION);
-            PChar->loc.p = PChar->m_StartActionPos;
-            PChar->loc.destination = PChar->getZone();
-            PChar->status = STATUS_DISAPPEAR;
-            PChar->loc.boundary = 0;
-            PChar->clearPacketList();
-            charutils::SendToZone(PChar, 2, zoneutils::GetZoneIPP(PChar->loc.destination));
-        }
+            if (PChar->StatusEffectContainer->HasPreventActionEffect())
+            {
+                return;
+            }
 
-        PChar->m_hasTractor = 0;
-    }
-    break;
-    case 0x14: // complete character update
-    {
-        if (PChar->m_moghouseID != 0)
+            fishingutils::StartFishing(PChar);
+        }
+        break;
+        case 0x0F: // change target
         {
-            PChar->loc.zone->SpawnMoogle(PChar);
+            PChar->PAI->ChangeTarget(TargID);
         }
-        else{
-            PChar->loc.zone->SpawnPCs(PChar);
-            PChar->loc.zone->SpawnNPCs(PChar);
-            PChar->loc.zone->SpawnMOBs(PChar);
+        break;
+        case 0x10: // rangedattack
+        {
+            PChar->PAI->RangedAttack(TargID);
         }
-    }
-    break;
-    case 0x15: break; // ballista - quarry
-    case 0x16: break; // ballista - sprint
-    case 0x18: // blockaid
-    {
-        if (!PChar->StatusEffectContainer->HasStatusEffect(EFFECT_ALLIED_TAGS))
+        break;
+        case 0x11: // chocobo digging
         {
-            uint8 type = data.ref<uint8>(0x0C);
+            if (!PChar->isMounted())
+            {
+                return;
+            }
+
+            // bunch of gysahl greens
+            uint8 slotID = PChar->getStorage(LOC_INVENTORY)->SearchItem(4545);
 
-            if (type == 0x00 && PChar->getBlockingAid()) // /blockaid off
+            if (slotID != ERROR_SLOTID)
             {
-                // Blockaid canceled
-                PChar->pushPacket(new CMessageSystemPacket(0, 0, 222));
-                PChar->setBlockingAid(false);
+                // attempt to dig
+                if (luautils::OnChocoboDig(PChar, true))
+                {
+                    charutils::UpdateItem(PChar, LOC_INVENTORY, slotID, -1);
+
+                    PChar->pushPacket(new CInventoryFinishPacket());
+                    PChar->pushPacket(new CChocoboDiggingPacket(PChar));
+
+                    // dig is possible
+                    luautils::OnChocoboDig(PChar, false);
+                }
+                else
+                {
+                    // unable to dig yet
+                    PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, 0, 0, MSGBASIC_WAIT_LONGER));
+                }
             }
-            else if (type == 0x01 && !PChar->getBlockingAid()) // /blockaid on
+            else
             {
-                // Blockaid activated
-                PChar->pushPacket(new CMessageSystemPacket(0, 0, 221));
-                PChar->setBlockingAid(true);
+                // You don't have any gysahl greens
+                PChar->pushPacket(new CMessageSystemPacket(4545, 0, 39));
             }
-            else if (type == 0x02) // /blockaid
+        }
+        break;
+        case 0x12: // dismount
+        {
+            if (PChar->StatusEffectContainer->HasPreventActionEffect() || !PChar->isMounted())
             {
-                // Blockaid is currently active/inactive
-                PChar->pushPacket(new CMessageSystemPacket(0, 0, PChar->getBlockingAid() ? 223 : 224));
+                return;
             }
+
+            PChar->animation = ANIMATION_NONE;
+            PChar->updatemask |= UPDATE_HP;
+            PChar->StatusEffectContainer->DelStatusEffectSilent(EFFECT_MOUNTED);
         }
-        else
-            PChar->pushPacket(new CMessageSystemPacket(0, 0, 142));
-    }
-    break;
-    case 0x1A: // mounts
-    {
-        uint8 MountID = data.ref<uint8>(0x0C);
+        break;
+        case 0x13: // tractor menu
+        {
+            if (data.ref<uint8>(0x0C) == 0 && PChar->m_hasTractor != 0) // ACCEPTED TRACTOR
+            {
+                // PChar->PBattleAI->SetCurrentAction(ACTION_RAISE_MENU_SELECTION);
+                PChar->loc.p = PChar->m_StartActionPos;
+                PChar->loc.destination = PChar->getZone();
+                PChar->status = STATUS_DISAPPEAR;
+                PChar->loc.boundary = 0;
+                PChar->clearPacketList();
+                charutils::SendToZone(PChar, 2, zoneutils::GetZoneIPP(PChar->loc.destination));
+            }
 
-        if (PChar->animation != ANIMATION_NONE)
-            PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, 0, 0, 71));
-        else if (!PChar->loc.zone->CanUseMisc(MISC_MOUNT))
-            PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, 0, 0, 316));
-        else if (PChar->GetMLevel() < 20)
-            PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, 20, 0, 773));
-        else if (charutils::hasKeyItem(PChar, 3072 + MountID))
+            PChar->m_hasTractor = 0;
+        }
+        break;
+        case 0x14: // complete character update
+        {
+            if (PChar->m_moghouseID != 0)
+            {
+                PChar->loc.zone->SpawnMoogle(PChar);
+            }
+            else
+            {
+                PChar->loc.zone->SpawnPCs(PChar);
+                PChar->loc.zone->SpawnNPCs(PChar);
+                PChar->loc.zone->SpawnMOBs(PChar);
+            }
+        }
+        break;
+        case 0x15: // ballista - quarry
+        case 0x16: // ballista - sprint
+            break;
+        case 0x18: // blockaid
         {
-            if (PChar->PRecastContainer->HasRecast(RECAST_ABILITY, 256, 60))
+            if (!PChar->StatusEffectContainer->HasStatusEffect(EFFECT_ALLIED_TAGS))
             {
-                PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, 0, 0, 94));
+                uint8 type = data.ref<uint8>(0x0C);
 
-                // add recast timer
-                //PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, 0, 0, 202));
-                return;
+                if (type == 0x00 && PChar->getBlockingAid()) // /blockaid off
+                {
+                    // Blockaid canceled
+                    PChar->pushPacket(new CMessageSystemPacket(0, 0, 222));
+                    PChar->setBlockingAid(false);
+                }
+                else if (type == 0x01 && !PChar->getBlockingAid()) // /blockaid on
+                {
+                    // Blockaid activated
+                    PChar->pushPacket(new CMessageSystemPacket(0, 0, 221));
+                    PChar->setBlockingAid(true);
+                }
+                else if (type == 0x02) // /blockaid
+                {
+                    // Blockaid is currently active/inactive
+                    PChar->pushPacket(new CMessageSystemPacket(0, 0, PChar->getBlockingAid() ? 223 : 224));
+                }
             }
-            // Retail prevents mounts if a player has enmity on any mob in the zone, need a function for this
-            for (SpawnIDList_t::iterator it = PChar->SpawnMOBList.begin(); it != PChar->SpawnMOBList.end(); ++it)
+            else
             {
-                CMobEntity* PMob = (CMobEntity*)it->second;
+                PChar->pushPacket(new CMessageSystemPacket(0, 0, 142));
+            }
+        }
+        break;
+        case 0x1A: // mounts
+        {
+            uint8 MountID = data.ref<uint8>(0x0C);
 
-                if (PMob->PEnmityContainer->HasID(PChar->id))
+            if (PChar->animation != ANIMATION_NONE)
+            {
+                PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, 0, 0, 71));
+            }
+            else if (!PChar->loc.zone->CanUseMisc(MISC_MOUNT))
+            {
+                PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, 0, 0, 316));
+            }
+            else if (PChar->GetMLevel() < 20)
+            {
+                PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, 20, 0, 773));
+            }
+            else if (charutils::hasKeyItem(PChar, 3072 + MountID))
+            {
+                if (PChar->PRecastContainer->HasRecast(RECAST_ABILITY, 256, 60))
+                {
+                    PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, 0, 0, 94));
+
+                    // add recast timer
+                    // PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, 0, 0, 202));
+                    return;
+                }
+
+                if (PChar->PNotorietyContainer->hasEnmity())
                 {
                     PChar->pushPacket(new CMessageBasicPacket(PChar, PChar, 0, 0, 339));
                     return;
                 }
+
+                PChar->StatusEffectContainer->AddStatusEffect(
+                    new CStatusEffect(EFFECT_MOUNTED, EFFECT_MOUNTED, (MountID ? ++MountID : 0), 0, 1800),
+                    true);
+                PChar->PRecastContainer->Add(RECAST_ABILITY, 256, 60);
+                PChar->pushPacket(new CCharRecastPacket(PChar));
             }
-            PChar->StatusEffectContainer->AddStatusEffect(new CStatusEffect(EFFECT_MOUNTED, EFFECT_MOUNTED, (MountID ? ++MountID : 0), 0, 1800), true);
-            PChar->PRecastContainer->Add(RECAST_ABILITY, 256, 60);
-            PChar->pushPacket(new CCharRecastPacket(PChar));
         }
+        break;
+        default:
+        {
+            ShowWarning(CL_YELLOW "CLIENT PERFORMING UNHANDLED ACTION %02hX\n" CL_RESET, action);
+            return;
+        }
+        break;
     }
-    break;
-    default:
-    {
-        ShowWarning(CL_YELLOW"CLIENT PERFORMING UNHANDLED ACTION %02hX\n" CL_RESET, action);
-        return;
-    }
-    break;
-    }
-    ShowAction(CL_CYAN"CLIENT %s PERFORMING ACTION %02hX\n" CL_RESET, PChar->GetName(), action);
+    ShowAction(CL_CYAN "CLIENT %s PERFORMING ACTION %02hX\n" CL_RESET, PChar->GetName(), action);
 }
 
 /************************************************************************
@@ -5979,7 +6010,7 @@ void SmallPacket0x102(map_session_data_t* session, CCharEntity* PChar, CBasicPac
 
         uint8 spellToAdd = data.ref<uint8>(0x04); // this is non-zero if client wants to add.
         uint8 spellInQuestion = 0;
-        uint8 spellIndex = -1;
+        int8 spellIndex = -1;
 
         if (spellToAdd == 0x00) {
             for (uint8 i = 0x0C; i <= 0x1F; i++) {
@@ -6544,6 +6575,7 @@ void PacketParserInitialize()
         PacketSize[i] = 0;
         PacketParser[i] = &SmallPacket0x000;
     }
+    // clang-format off
     PacketSize[0x00A] = 0x2E; PacketParser[0x00A] = &SmallPacket0x00A;
     PacketSize[0x00C] = 0x00; PacketParser[0x00C] = &SmallPacket0x00C;
     PacketSize[0x00D] = 0x04; PacketParser[0x00D] = &SmallPacket0x00D;
@@ -6654,6 +6686,7 @@ void PacketParserInitialize()
     PacketSize[0x115] = 0x02; PacketParser[0x115] = &SmallPacket0x115;
     PacketSize[0x116] = 0x02; PacketParser[0x116] = &SmallPacket0xFFF; // not implemented
     PacketSize[0x117] = 0x00; PacketParser[0x117] = &SmallPacket0x117;
+    // clang-format on
 }
 
 /************************************************************************