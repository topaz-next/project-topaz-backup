@@ -22,13 +22,14 @@ along with this program.  If not, see http://www.gnu.org/licenses/
 #include "range_state.h"
 #include "../ai_container.h"
 #include "../../entities/charentity.h"
+#include "../../entities/trustentity.h"
 #include "../../packets/action.h"
 #include "../../utils/battleutils.h"
 #include "../../items/item_weapon.h"
 #include "../../status_effect_container.h"
 #include "../../utils/charutils.h"
 
-CRangeState::CRangeState(CCharEntity* PEntity, uint16 targid) :
+CRangeState::CRangeState(CBattleEntity* PEntity, uint16 targid) :
     CState(PEntity, targid),
     m_PEntity(PEntity)
 {
@@ -47,16 +48,21 @@ CRangeState::CRangeState(CCharEntity* PEntity, uint16 targid) :
     auto delay = m_PEntity->GetRangedWeaponDelay(false);
     delay = battleutils::GetSnapshotReduction(m_PEntity, delay);
 
-    if (charutils::hasTrait(m_PEntity, TRAIT_RAPID_SHOT))
+    // TODO: Allow trusts to use this
+    if (auto PChar = dynamic_cast<CCharEntity*>(m_PEntity))
     {
-        auto chance {m_PEntity->getMod(Mod::RAPID_SHOT) + m_PEntity->PMeritPoints->GetMeritValue(MERIT_RAPID_SHOT_RATE, m_PEntity)};
-        if (tpzrand::GetRandomNumber(100) < chance)
+        if (charutils::hasTrait(PChar, TRAIT_RAPID_SHOT))
         {
-            //reduce delay by 10%-50%
-            delay = (int16)(delay * (10 - tpzrand::GetRandomNumber(1, 6)) / 10.f);
-            m_rapidShot = true;
+            auto chance {PChar->getMod(Mod::RAPID_SHOT) + PChar->PMeritPoints->GetMeritValue(MERIT_RAPID_SHOT_RATE, PChar)};
+            if (tpzrand::GetRandomNumber(100) < chance)
+            {
+                // reduce delay by 10%-50%
+                delay = (int16)(delay * (10 - tpzrand::GetRandomNumber(1, 6)) / 10.f);
+                m_rapidShot = true;
+            }
         }
     }
+
     m_aimTime = std::chrono::milliseconds(delay);
     m_startPos = m_PEntity->loc.p;
 
@@ -95,6 +101,7 @@ bool CRangeState::Update(time_point tick)
         {
             m_errorMsg = std::make_unique<CMessageBasicPacket>(m_PEntity, m_PEntity, 0, 0, MSGBASIC_MOVE_AND_INTERRUPT);
         }
+
         action_t action;
         auto cast_errorMsg = dynamic_cast<CMessageBasicPacket*>(m_errorMsg.get());
         if (m_errorMsg && (!cast_errorMsg || cast_errorMsg->getMessageID() != MSGBASIC_CANNOT_SEE))
@@ -107,12 +114,17 @@ bool CRangeState::Update(time_point tick)
 
             actionTarget_t& actionTarget = actionList.getNewActionTarget();
             actionTarget.animation = ANIMATION_RANGED;
-            m_PEntity->pushPacket(m_errorMsg.release());
+
+            if (auto PChar = dynamic_cast<CCharEntity*>(m_PEntity))
+            {
+                PChar->pushPacket(m_errorMsg.release());
+            }
             m_PEntity->loc.zone->PushPacket(m_PEntity, CHAR_INRANGE_SELF, new CActionPacket(action));
         }
         else
         {
             m_errorMsg.reset();
+
             m_PEntity->OnRangedAttack(*this, action);
             m_PEntity->loc.zone->PushPacket(m_PEntity, CHAR_INRANGE_SELF, new CActionPacket(action));
         }
@@ -138,39 +150,43 @@ bool CRangeState::CanUseRangedAttack(CBattleEntity* PTarget)
         m_errorMsg = std::make_unique<CMessageBasicPacket>(m_PEntity, m_PEntity, 0, 0, MSGBASIC_CANNOT_ATTACK_TARGET);
         return false;
     }
-    CItemWeapon* PRanged = (CItemWeapon*)m_PEntity->getEquip(SLOT_RANGED);
-    CItemWeapon* PAmmo = (CItemWeapon*)m_PEntity->getEquip(SLOT_AMMO);
 
-    if (!((PRanged && PRanged->isType(ITEM_WEAPON)) ||
-        (PAmmo && PAmmo->isThrowing())))
+    if (auto PChar = dynamic_cast<CCharEntity*>(m_PEntity))
     {
-        m_errorMsg = std::make_unique<CMessageBasicPacket>(m_PEntity, m_PEntity, 0, 0, MSGBASIC_NO_RANGED_WEAPON);
-        return false;
-    }
-
-    auto SkillType = PRanged ? PRanged->getSkillType() : PAmmo->getSkillType();
+        CItemWeapon* PRanged = dynamic_cast<CItemWeapon*>(PChar->getEquip(SLOT_RANGED));
+        CItemWeapon* PAmmo = dynamic_cast<CItemWeapon*>(PChar->getEquip(SLOT_AMMO));
 
-    switch (SkillType)
-    {
-        case SKILL_THROWING:
+        if (!((PRanged && PRanged->isType(ITEM_WEAPON)) ||
+              (PAmmo && PAmmo->isThrowing())))
         {
-            // remove barrage, doesn't work here
-            m_PEntity->StatusEffectContainer->DelStatusEffect(EFFECT_BARRAGE);
-            break;
+            m_errorMsg = std::make_unique<CMessageBasicPacket>(PChar, PChar, 0, 0, MSGBASIC_NO_RANGED_WEAPON);
+            return false;
         }
-        case SKILL_ARCHERY:
-        case SKILL_MARKSMANSHIP:
+
+        auto SkillType = PRanged ? PRanged->getSkillType() : PAmmo->getSkillType();
+
+        switch (SkillType)
         {
-            PRanged = (CItemWeapon*)m_PEntity->getEquip(SLOT_AMMO);
-            if (PRanged != nullptr && PRanged->isType(ITEM_WEAPON))
+            case SKILL_THROWING:
             {
+                // remove barrage, doesn't work here
+                PChar->StatusEffectContainer->DelStatusEffect(EFFECT_BARRAGE);
                 break;
             }
-        }
-        default:
-        {
-            m_errorMsg = std::make_unique<CMessageBasicPacket>(m_PEntity, m_PEntity, 0, 0, MSGBASIC_NO_RANGED_WEAPON);
-            return false;
+            case SKILL_ARCHERY:
+            case SKILL_MARKSMANSHIP:
+            {
+                PRanged = dynamic_cast<CItemWeapon*>(PChar->getEquip(SLOT_AMMO));
+                if (PRanged != nullptr && PRanged->isType(ITEM_WEAPON))
+                {
+                    break;
+                }
+            }
+            default:
+            {
+                m_errorMsg = std::make_unique<CMessageBasicPacket>(PChar, PChar, 0, 0, MSGBASIC_NO_RANGED_WEAPON);
+                return false;
+            }
         }
     }
 