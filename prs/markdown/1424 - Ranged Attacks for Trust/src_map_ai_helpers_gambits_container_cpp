@@ -8,17 +8,23 @@
 #include "../../ai/states/ability_state.h"
 #include "../../ai/states/mobskill_state.h"
 #include "../../ai/states/magic_state.h"
+#include "../../ai/states/range_state.h"
 #include "../../ai/states/weaponskill_state.h"
 #include "../../utils/battleutils.h"
 #include "../../utils/trustutils.h"
 
+#include "../controllers/player_controller.h"
+#include "../../weapon_skill.h"
+
 namespace gambits
 {
 
 // Validate gambit before it's inserted into the gambit list
 // Check levels, etc.
 void CGambitsContainer::AddGambit(Gambit_t gambit)
 {
+    TracyZoneScoped;
+
     bool available = true;
     for (auto& action : gambit.actions)
     {
@@ -39,6 +45,7 @@ void CGambitsContainer::AddGambit(Gambit_t gambit)
 void CGambitsContainer::Tick(time_point tick)
 {
     TracyZoneScoped;
+
     if (tick < m_lastAction)
     {
         return;
@@ -47,6 +54,7 @@ void CGambitsContainer::Tick(time_point tick)
     // TODO: Is this necessary?
     // Not already doing something
     if (POwner->PAI->IsCurrentState<CAbilityState>() ||
+        POwner->PAI->IsCurrentState<CRangeState>() ||
         POwner->PAI->IsCurrentState<CMagicState>() ||
         POwner->PAI->IsCurrentState<CWeaponSkillState>() ||
         POwner->PAI->IsCurrentState<CMobSkillState>())
@@ -276,7 +284,11 @@ void CGambitsContainer::Tick(time_point tick)
                 break;
             }
 
-            if (action.reaction == G_REACTION::MA)
+            if (action.reaction == G_REACTION::RATTACK)
+            {
+                controller->RangedAttack(target->targid);
+            }
+            else if (action.reaction == G_REACTION::MA)
             {
                 if (action.select == G_SELECT::SPECIFIC)
                 {
@@ -385,6 +397,7 @@ void CGambitsContainer::Tick(time_point tick)
 bool CGambitsContainer::CheckTrigger(CBattleEntity* trigger_target, Predicate_t& predicate)
 {
     TracyZoneScoped;
+
     auto controller = static_cast<CTrustController*>(POwner->PAI->GetController());
     switch (predicate.condition)
     {
@@ -493,6 +506,7 @@ bool CGambitsContainer::CheckTrigger(CBattleEntity* trigger_target, Predicate_t&
 bool CGambitsContainer::TryTrustSkill()
 {
     TracyZoneScoped;
+
     auto target = POwner->GetBattleTarget();
 
     auto checkTPTrigger = [&]() -> bool
@@ -585,6 +599,42 @@ bool CGambitsContainer::TryTrustSkill()
                 }
                 break;
             }
+            case G_SELECT::SPECIAL_AYAME:
+            {
+                auto PMaster = static_cast<CCharEntity*>(POwner->PMaster);
+                auto PMasterController = static_cast<CPlayerController*>(PMaster->PAI->GetController());
+                auto PMasterLastWeaponSkill = PMasterController->getLastWeaponSkill();
+
+                if (PMasterLastWeaponSkill)
+                {
+                    for (auto& skill : tp_skills)
+                    {
+                        std::list<SKILLCHAIN_ELEMENT> resonanceProperties;
+                        resonanceProperties.push_back((SKILLCHAIN_ELEMENT)PMasterLastWeaponSkill->getPrimarySkillchain());
+                        resonanceProperties.push_back((SKILLCHAIN_ELEMENT)PMasterLastWeaponSkill->getSecondarySkillchain());
+                        resonanceProperties.push_back((SKILLCHAIN_ELEMENT)PMasterLastWeaponSkill->getTertiarySkillchain());
+
+                        std::list<SKILLCHAIN_ELEMENT> skillProperties;
+                        skillProperties.push_back((SKILLCHAIN_ELEMENT)skill.primary);
+                        skillProperties.push_back((SKILLCHAIN_ELEMENT)skill.secondary);
+                        skillProperties.push_back((SKILLCHAIN_ELEMENT)skill.tertiary);
+                        if (SKILLCHAIN_ELEMENT possible_skillchain = battleutils::FormSkillchain(resonanceProperties, skillProperties); possible_skillchain != SC_NONE)
+                        {
+                            if (possible_skillchain >= chosen_skillchain)
+                            {
+                                chosen_skill = skill;
+                                chosen_skillchain = possible_skillchain;
+                            }
+                        }
+                    }
+                }
+                else
+                {
+                    chosen_skill = tp_skills.at(tp_skills.size() - 1);
+                }
+
+                break;
+            }
             default: { break; }
         }
     }