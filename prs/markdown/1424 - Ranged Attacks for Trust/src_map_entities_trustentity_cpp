@@ -36,8 +36,11 @@ along with this program.  If not, see http://www.gnu.org/licenses/
 #include "../ai/states/weaponskill_state.h"
 #include "../ai/states/mobskill_state.h"
 #include "../ai/states/magic_state.h"
+#include "../ai/states/range_state.h"
 #include "../recast_container.h"
 #include "../mob_spell_container.h"
+#include "../status_effect_container.h"
+#include "../attack.h"
 
 CTrustEntity::CTrustEntity(CCharEntity* PChar)
 {
@@ -139,6 +142,231 @@ void CTrustEntity::OnAbility(CAbilityState& state, action_t& action)
     }
 }
 
+void CTrustEntity::OnRangedAttack(CRangeState& state, action_t& action)
+{
+    auto PTarget = static_cast<CBattleEntity*>(state.GetTarget());
+
+    int32 damage = 0;
+    int32 totalDamage = 0;
+
+    action.id = id;
+    action.actiontype = ACTION_RANGED_FINISH;
+
+    actionList_t& actionList = action.getNewActionList();
+    actionList.ActionTargetID = PTarget->id;
+
+    actionTarget_t& actionTarget = actionList.getNewActionTarget();
+    actionTarget.reaction = REACTION_HIT;		//0x10
+    actionTarget.speceffect = SPECEFFECT_HIT;		//0x60 (SPECEFFECT_HIT + SPECEFFECT_RECOIL)
+    actionTarget.messageID = 352;
+
+    /*
+    CItemWeapon* PItem = (CItemWeapon*)this->getEquip(SLOT_RANGED);
+    CItemWeapon* PAmmo = (CItemWeapon*)this->getEquip(SLOT_AMMO);
+
+    bool ammoThrowing = PAmmo ? PAmmo->isThrowing() : false;
+    bool rangedThrowing = PItem ? PItem->isThrowing() : false;
+
+    uint8 slot = SLOT_RANGED;
+
+    if (ammoThrowing)
+    {
+        slot = SLOT_AMMO;
+        PItem = nullptr;
+    }
+    if (rangedThrowing)
+    {
+        PAmmo = nullptr;
+    }
+    */
+
+    uint8 slot = SLOT_RANGED;
+    uint8 shadowsTaken = 0;
+    uint8 hitCount = 1;			// 1 hit by default
+    uint8 realHits = 0;			// to store the real number of hit for tp multipler
+    auto ammoConsumed = 0;
+    bool hitOccured = false;	// track if player hit mob at all
+    bool isSange = false;
+    bool isBarrage = StatusEffectContainer->HasStatusEffect(EFFECT_BARRAGE, 0);
+
+    /*
+    // if barrage is detected, getBarrageShotCount also checks for ammo count
+    if (!ammoThrowing && !rangedThrowing && isBarrage)
+    {
+        hitCount += battleutils::getBarrageShotCount(this);
+    }
+    else if (ammoThrowing && this->StatusEffectContainer->HasStatusEffect(EFFECT_SANGE))
+    {
+        isSange = true;
+        hitCount += getMod(Mod::UTSUSEMI);
+    }
+    */
+
+    // loop for barrage hits, if a miss occurs, the loop will end
+    for (uint8 i = 1; i <= hitCount; ++i)
+    {
+        if (PTarget->StatusEffectContainer->HasStatusEffect(EFFECT_PERFECT_DODGE, 0))
+        {
+            actionTarget.messageID = 32;
+            actionTarget.reaction = REACTION_EVADE;
+            actionTarget.speceffect = SPECEFFECT_NONE;
+            hitCount = i; // end barrage, shot missed
+        }
+        else if (tpzrand::GetRandomNumber(100) < battleutils::GetRangedHitRate(this, PTarget, isBarrage)) // hit!
+        {
+            // absorbed by shadow
+            if (battleutils::IsAbsorbByShadow(PTarget))
+            {
+                shadowsTaken++;
+            }
+            else
+            {
+                bool isCritical = tpzrand::GetRandomNumber(100) < battleutils::GetCritHitRate(this, PTarget, true);
+                float pdif = battleutils::GetRangedDamageRatio(this, PTarget, isCritical);
+
+                if (isCritical)
+                {
+                    actionTarget.speceffect = SPECEFFECT_CRITICAL_HIT;
+                    actionTarget.messageID = 353;
+                }
+
+                // at least 1 hit occured
+                hitOccured = true;
+                realHits++;
+
+                if (isSange)
+                {
+                    // change message to sange
+                    actionTarget.messageID = 77;
+                }
+
+                damage = (int32)((this->GetRangedWeaponDmg() + battleutils::GetFSTR(this, PTarget, slot)) * pdif);
+                /*
+                if (slot == SLOT_RANGED)
+                {
+                    if (state.IsRapidShot())
+                    {
+                        damage = attackutils::CheckForDamageMultiplier(this, PItem, damage, PHYSICAL_ATTACK_TYPE::RAPID_SHOT, SLOT_RANGED);
+                    }
+                    else
+                    {
+                        damage = attackutils::CheckForDamageMultiplier(this, PItem, damage, PHYSICAL_ATTACK_TYPE::RANGED, SLOT_RANGED);
+                    }
+
+                    if (PItem != nullptr)
+                    {
+                        charutils::TrySkillUP(this, (SKILLTYPE)PItem->getSkillType(), PTarget->GetMLevel());
+                    }
+                }
+                else if (slot == SLOT_AMMO && PAmmo != nullptr)
+                {
+                    charutils::TrySkillUP(this, (SKILLTYPE)PAmmo->getSkillType(), PTarget->GetMLevel());
+                }
+                */
+            }
+        }
+        else //miss
+        {
+            actionTarget.reaction = REACTION_EVADE;
+            actionTarget.speceffect = SPECEFFECT_NONE;
+            actionTarget.messageID = 354;
+            hitCount = i; // end barrage, shot missed
+        }
+        /*
+        // check for recycle chance
+        uint16 recycleChance = getMod(Mod::RECYCLE);
+        if (charutils::hasTrait(this, TRAIT_RECYCLE))
+        {
+            recycleChance += PMeritPoints->GetMeritValue(MERIT_RECYCLE, this);
+        }
+
+        // Only remove unlimited shot on hit
+        if (hitOccured && this->StatusEffectContainer->HasStatusEffect(EFFECT_UNLIMITED_SHOT))
+        {
+            StatusEffectContainer->DelStatusEffect(EFFECT_UNLIMITED_SHOT);
+            recycleChance = 100;
+        }
+
+        if (PAmmo != nullptr && tpzrand::GetRandomNumber(100) > recycleChance)
+        {
+            ++ammoConsumed;
+            TrackArrowUsageForScavenge(PAmmo);
+            if (PAmmo->getQuantity() == i)
+            {
+                hitCount = i;
+            }
+        }
+        */
+        totalDamage += damage;
+    }
+
+    // if a hit did occur (even without barrage)
+    if (hitOccured == true)
+    {
+        // any misses with barrage cause remaing shots to miss, meaning we must check Action.reaction
+        if (actionTarget.reaction == REACTION_EVADE && (this->StatusEffectContainer->HasStatusEffect(EFFECT_BARRAGE) || isSange))
+        {
+            actionTarget.messageID = 352;
+            actionTarget.reaction = REACTION_HIT;
+            actionTarget.speceffect = SPECEFFECT_CRITICAL_HIT;
+        }
+
+        actionTarget.param = battleutils::TakePhysicalDamage(this, PTarget, PHYSICAL_ATTACK_TYPE::RANGED, totalDamage, false, slot, realHits, nullptr, true, true);
+
+        // lower damage based on shadows taken
+        if (shadowsTaken)
+        {
+            actionTarget.param = (int32)(actionTarget.param * (1 - ((float)shadowsTaken / realHits)));
+        }
+
+        // absorb message
+        if (actionTarget.param < 0)
+        {
+            actionTarget.param = -(actionTarget.param);
+            actionTarget.messageID = 382;
+        }
+
+        /*
+        //add additional effects
+        //this should go AFTER damage taken
+        //or else sleep effect won't work
+        //battleutils::HandleRangedAdditionalEffect(this,PTarget,&Action);
+        //TODO: move all hard coded additional effect ammo to scripts
+        if ((PAmmo != nullptr && battleutils::GetScaledItemModifier(this, PAmmo, Mod::ADDITIONAL_EFFECT) > 0) ||
+            (PItem != nullptr && battleutils::GetScaledItemModifier(this, PItem, Mod::ADDITIONAL_EFFECT) > 0)) {}
+        luautils::OnAdditionalEffect(this, PTarget, (PAmmo != nullptr ? PAmmo : PItem), &actionTarget, totalDamage);
+         */
+    }
+    else if (shadowsTaken > 0)
+    {
+        // shadows took damage
+        actionTarget.messageID = 0;
+        actionTarget.reaction = REACTION_EVADE;
+        PTarget->loc.zone->PushPacket(PTarget, CHAR_INRANGE_SELF, new CMessageBasicPacket(PTarget, PTarget, 0, shadowsTaken, MSGBASIC_SHADOW_ABSORB));
+    }
+
+    if (actionTarget.speceffect == SPECEFFECT_HIT && actionTarget.param > 0)
+        actionTarget.speceffect = SPECEFFECT_RECOIL;
+
+    // remove barrage effect if present
+    if (this->StatusEffectContainer->HasStatusEffect(EFFECT_BARRAGE, 0)) {
+        StatusEffectContainer->DelStatusEffect(EFFECT_BARRAGE, 0);
+    }
+    else if (isSange)
+    {
+        uint16 power = StatusEffectContainer->GetStatusEffect(EFFECT_SANGE)->GetPower();
+
+        // remove shadows
+        while (realHits-- && tpzrand::GetRandomNumber(100) <= power && battleutils::IsAbsorbByShadow(this));
+
+        StatusEffectContainer->DelStatusEffect(EFFECT_SANGE);
+    }
+    battleutils::ClaimMob(PTarget, this);
+    //battleutils::RemoveAmmo(this, ammoConsumed);
+    // only remove detectables
+    StatusEffectContainer->DelStatusEffectsByFlag(EFFECTFLAG_DETECTABLE);
+}
+
 bool CTrustEntity::ValidTarget(CBattleEntity* PInitiator, uint16 targetFlags)
 {
     if (PInitiator->objtype == TYPE_TRUST && PMaster == PInitiator->PMaster)