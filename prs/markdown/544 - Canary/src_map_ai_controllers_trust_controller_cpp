@@ -23,15 +23,14 @@ along with this program.  If not, see http://www.gnu.org/licenses/
 
 #include "../ai_container.h"
 #include "../../status_effect_container.h"
+#include "../../enmity_container.h"
 #include "../../ai/states/despawn_state.h"
 #include "../../entities/charentity.h"
 #include "../../entities/trustentity.h"
 #include "../../packets/char.h"
-#include "../../../common/utils.h"
 
-CTrustController::CTrustController(CCharEntity* PChar, CTrustEntity* PTrust) : CController(PTrust)
+CTrustController::CTrustController(CCharEntity* PChar, CTrustEntity* PTrust) : CMobController(PTrust)
 {
-    POwner->PAI->PathFind = std::make_unique<CPathFind>(PTrust);
 }
 
 CTrustController::~CTrustController()
@@ -42,21 +41,26 @@ CTrustController::~CTrustController()
     }
     POwner->PAI->PathFind.reset();
     POwner->allegiance = ALLEGIANCE_PLAYER;
+    POwner->PMaster = nullptr;
+
+    m_LastTopEnmity = nullptr;
 }
 
 void CTrustController::Despawn()
 {
-    if (POwner->PMaster)
-    {
-        POwner->PMaster = nullptr;
-    }
-    CController::Despawn();
+    POwner->animation = ANIMATION_DESPAWN;
+    CMobController::Despawn();
 }
 
 void CTrustController::Tick(time_point tick)
 {
     m_Tick = tick;
 
+    if (POwner->PMaster == nullptr)
+    {
+        return;
+    }
+
     if (POwner->PAI->IsEngaged())
     {
         DoCombatTick(tick);
@@ -72,48 +76,158 @@ void CTrustController::DoCombatTick(time_point tick)
     if (!POwner->PMaster->PAI->IsEngaged())
     {
         POwner->PAI->Internal_Disengage();
+        m_LastTopEnmity = nullptr;
+        m_CombatEndTime = m_Tick;
     }
+
     if (POwner->PMaster->GetBattleTargetID() != POwner->GetBattleTargetID())
     {
         POwner->PAI->Internal_ChangeTarget(POwner->PMaster->GetBattleTargetID());
+        m_LastTopEnmity = nullptr;
     }
-    auto PTarget{ POwner->GetBattleTarget() };
+
+    float currentDistance = distance(POwner->loc.p, POwner->PMaster->loc.p);
+    PTarget = POwner->GetBattleTarget();
+    uint8 currentPartyPos = GetPartyPosition();
+
     if (PTarget)
     {
         if (POwner->PAI->CanFollowPath())
         {
             POwner->PAI->PathFind->LookAt(PTarget->loc.p);
             std::unique_ptr<CBasicPacket> err;
-            if (!POwner->CanAttack(PTarget, err))
+            if (!POwner->CanAttack(PTarget, err) && POwner->speed > 0)
             {
-                if (POwner->speed > 0)
+                if (currentDistance < WarpDistance && POwner->PAI->PathFind->PathAround(PTarget->loc.p, PATHFLAG_RUN | PATHFLAG_WALLHACK))
                 {
-                    POwner->PAI->PathFind->PathAround(PTarget->loc.p, 2.0f, PATHFLAG_WALLHACK | PATHFLAG_RUN);
                     POwner->PAI->PathFind->FollowPath();
                 }
+                else if (POwner->GetSpeed() > 0)
+                {
+                    POwner->PAI->PathFind->WarpTo(POwner->PMaster->loc.p, RoamDistance);
+                }
+            }
+            else
+            {
+                for (auto POtherTrust : static_cast<CCharEntity*>(POwner->PMaster)->PTrusts)
+                {
+                    if (POtherTrust != POwner && !POtherTrust->PAI->PathFind->IsFollowingPath() && distance(POtherTrust->loc.p, POwner->loc.p) < 1.0f)
+                    {
+                        auto angle = getangle(POwner->loc.p, PTarget->loc.p) + 64;
+                        auto amount = (currentPartyPos % 2) ? 1.0f : -1.0f;
+                        position_t new_pos{ POwner->loc.p.x - (cosf(rotationToRadian(angle)) * amount),
+                            PTarget->loc.p.y, POwner->loc.p.z + (sinf(rotationToRadian(angle)) * amount), 0, 0 };
+
+                        if (POwner->PAI->PathFind->ValidPosition(new_pos))
+                        {
+                            POwner->PAI->PathFind->PathTo(new_pos, PATHFLAG_RUN | PATHFLAG_WALLHACK);
+                        }
+                        break;
+                    }
+                }
             }
+            POwner->PAI->PathFind->FollowPath();
         }
+
+        auto currentTopEnmity = GetTopEnmity();
+        if (m_LastTopEnmity != currentTopEnmity)
+        {
+            POwner->PAI->EventHandler.triggerListener("ENMITY_CHANGED", POwner, POwner->PMaster, PTarget);
+            m_LastTopEnmity = currentTopEnmity;
+        }
+
+        POwner->PAI->EventHandler.triggerListener("COMBAT_TICK", POwner, POwner->PMaster, PTarget);
     }
 }
 
 void CTrustController::DoRoamTick(time_point tick)
 {
-    if (POwner->PMaster->PAI->IsEngaged())
+    auto PMaster = static_cast<CCharEntity*>(POwner->PMaster);
+    bool trustEngageCondition = (PMaster->GetBattleTarget() && PMaster->GetBattleTarget()->PLastAttacker == PMaster);
+
+    if (PMaster->PAI->IsEngaged() && trustEngageCondition)
     {
-        POwner->PAI->Internal_Engage(POwner->PMaster->GetBattleTargetID());
+        POwner->PAI->Internal_Engage(PMaster->GetBattleTargetID());
     }
 
-    float currentDistance = distance(POwner->loc.p, POwner->PMaster->loc.p);
+    uint8 currentPartyPos = GetPartyPosition();
+    CBattleEntity* PFollowTarget = (GetPartyPosition() > 0) ? (CBattleEntity*)PMaster->PTrusts.at(currentPartyPos - 1) : POwner->PMaster;
+    float currentDistance = distance(POwner->loc.p, PFollowTarget->loc.p);
+
+    for (auto POtherTrust : PMaster->PTrusts)
+    {
+        if (POtherTrust != POwner && distance(POtherTrust->loc.p, POwner->loc.p) < 1.0f && !POwner->PAI->PathFind->IsFollowingPath())
+        {
+            auto angle = getangle(POwner->loc.p, POtherTrust->loc.p) + 64;
+            auto amount = (currentPartyPos % 2) ? 1.0f : -1.0f;
+            position_t new_pos{ POwner->loc.p.x - (cosf(rotationToRadian(angle)) * amount),
+                POtherTrust->loc.p.y, POwner->loc.p.z + (sinf(rotationToRadian(angle)) * amount), 0, 0 };
+
+            if (POwner->PAI->PathFind->ValidPosition(new_pos) && POwner->PAI->PathFind->PathAround(new_pos, RoamDistance, PATHFLAG_RUN | PATHFLAG_WALLHACK))
+            {
+                POwner->PAI->PathFind->FollowPath();
+            }
+            break;
+        }
+    }
 
     if (currentDistance > RoamDistance)
     {
-        if (currentDistance < 35.0f && POwner->PAI->PathFind->PathAround(POwner->PMaster->loc.p, 2.0f, PATHFLAG_RUN | PATHFLAG_WALLHACK))
+        if (currentDistance < WarpDistance && POwner->PAI->PathFind->PathAround(PFollowTarget->loc.p, RoamDistance, PATHFLAG_RUN | PATHFLAG_WALLHACK))
         {
             POwner->PAI->PathFind->FollowPath();
         }
         else if (POwner->GetSpeed() > 0)
         {
-            POwner->PAI->PathFind->WarpTo(POwner->PMaster->loc.p, RoamDistance);
+            POwner->PAI->PathFind->WarpTo(PFollowTarget->loc.p, RoamDistance);
+        }
+    }
+
+    if (POwner->CanRest() &&
+        m_Tick - m_CombatEndTime > 10s &&
+        m_Tick - m_LastHealTickTime > 3s)
+    {
+        if (POwner->Rest(0.03f))
+        {
+            m_LastHealTickTime = m_Tick;
+            POwner->updatemask |= UPDATE_HP;
+        }
+        else if (POwner->Rest(0.05f))
+        {
+            m_LastHealTickTime = m_Tick;
+            POwner->updatemask |= UPDATE_HP;
+        }
+    }
+}
+
+bool CTrustController::Ability(uint16 targid, uint16 abilityid)
+{
+    if (POwner->PAI->CanChangeState())
+    {
+        return POwner->PAI->Internal_Ability(targid, abilityid);
+    }
+    return false;
+}
+
+CBattleEntity* CTrustController::GetTopEnmity()
+{
+    CBattleEntity* PEntity = nullptr;
+    if (auto PMob = dynamic_cast<CMobEntity*>(POwner->PMaster->GetBattleTarget()))
+    {
+        return PMob->PEnmityContainer->GetHighestEnmity();
+    }
+    return PEntity;
+}
+
+uint8 CTrustController::GetPartyPosition()
+{
+    auto& trustList = static_cast<CCharEntity*>(POwner->PMaster)->PTrusts;
+    for (uint8 i = 0; i < trustList.size(); ++i)
+    {
+        if (trustList.at(i)->id == POwner->id)
+        {
+            return i;
         }
     }
+    return 0;
 }