@@ -32,6 +32,12 @@ along with this program.  If not, see http://www.gnu.org/licenses/
 #include "../ai/states/ability_state.h"
 #include "../utils/battleutils.h"
 #include "../utils/trustutils.h"
+#include "../ai/states/attack_state.h"
+#include "../ai/states/weaponskill_state.h"
+#include "../ai/states/mobskill_state.h"
+#include "../ai/states/magic_state.h"
+#include "../recast_container.h"
+#include "../mob_spell_container.h"
 
 CTrustEntity::CTrustEntity(CCharEntity* PChar)
 {
@@ -89,6 +95,50 @@ void CTrustEntity::Spawn()
     ((CCharEntity*)PMaster)->pushPacket(new CTrustSyncPacket((CCharEntity*)PMaster, this));
 }
 
+void CTrustEntity::OnAbility(CAbilityState& state, action_t& action)
+{
+    auto PAbility = state.GetAbility();
+    auto PTarget = static_cast<CBattleEntity*>(state.GetTarget());
+
+    std::unique_ptr<CBasicPacket> errMsg;
+    if (IsValidTarget(PTarget->targid, PAbility->getValidTarget(), errMsg))
+    {
+        if (this != PTarget && distance(this->loc.p, PTarget->loc.p) > PAbility->getRange())
+        {
+            return;
+        }
+        if (battleutils::IsParalyzed(this)) {
+            // display paralyzed
+            loc.zone->PushPacket(this, CHAR_INRANGE_SELF, new CMessageBasicPacket(this, PTarget, 0, 0, MSGBASIC_IS_PARALYZED));
+            return;
+        }
+
+        action.id = this->id;
+        action.actiontype = PAbility->getActionType();
+        //#TODO: unoffset this
+        action.actionid = PAbility->getID() + 16;
+        actionList_t& actionList = action.getNewActionList();
+        actionList.ActionTargetID = PTarget->id;
+        actionTarget_t& actionTarget = actionList.getNewActionTarget();
+        actionTarget.reaction = REACTION_NONE;
+        actionTarget.speceffect = SPECEFFECT_RECOIL;
+        actionTarget.animation = PAbility->getAnimationID();
+        actionTarget.param = 0;
+        auto prevMsg = actionTarget.messageID;
+
+        int32 value = luautils::OnUseAbility(this, PTarget, PAbility, &action);
+        if (prevMsg == actionTarget.messageID) actionTarget.messageID = PAbility->getMessage();
+        if (actionTarget.messageID == 0) actionTarget.messageID = MSGBASIC_USES_JA;
+        actionTarget.param = value;
+
+        if (value < 0)
+        {
+            actionTarget.messageID = ability::GetAbsorbMessage(actionTarget.messageID);
+            actionTarget.param = -value;
+        }
+    }
+}
+
 bool CTrustEntity::ValidTarget(CBattleEntity* PInitiator, uint16 targetFlags)
 {
     if (targetFlags & TARGET_PLAYER && PInitiator->allegiance == allegiance)
@@ -107,4 +157,15 @@ void CTrustEntity::OnDespawn(CDespawnState&)
     }
     FadeOut();
     PAI->EventHandler.triggerListener("DESPAWN", this);
-}
\ No newline at end of file
+}
+
+
+void CTrustEntity::OnCastFinished(CMagicState& state, action_t& action)
+{
+    CBattleEntity::OnCastFinished(state, action);
+
+    auto PSpell = state.GetSpell();
+    auto PTarget = static_cast<CBattleEntity*>(state.GetTarget());
+
+    PRecastContainer->Add(RECAST_MAGIC, static_cast<uint16>(PSpell->getID()), action.recast);
+}