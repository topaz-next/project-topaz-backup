@@ -433,19 +433,19 @@ void LoadMOBList()
                 PMob->attRank = (uint8)Sql_GetIntData(SqlHandle, 57);
                 PMob->accRank = (uint8)Sql_GetIntData(SqlHandle, 58);
 
-                PMob->setModifier(Mod::SLASHRES, (uint16)(Sql_GetFloatData(SqlHandle, 36) * 1000));
-                PMob->setModifier(Mod::PIERCERES, (uint16)(Sql_GetFloatData(SqlHandle, 37) * 1000));
-                PMob->setModifier(Mod::HTHRES, (uint16)(Sql_GetFloatData(SqlHandle, 38) * 1000));
-                PMob->setModifier(Mod::IMPACTRES, (uint16)(Sql_GetFloatData(SqlHandle, 39) * 1000));
-
-                PMob->setModifier(Mod::FIRERES, (int16)((Sql_GetFloatData(SqlHandle, 40) - 1) * -100)); // These are stored as floating percentages
-                PMob->setModifier(Mod::ICERES, (int16)((Sql_GetFloatData(SqlHandle, 41) - 1) * -100)); // and need to be adjusted into modifier units.
-                PMob->setModifier(Mod::WINDRES, (int16)((Sql_GetFloatData(SqlHandle, 42) - 1) * -100)); // Higher RES = lower damage.
-                PMob->setModifier(Mod::EARTHRES, (int16)((Sql_GetFloatData(SqlHandle, 43) - 1) * -100)); // Negatives signify lower resist chance.
-                PMob->setModifier(Mod::THUNDERRES, (int16)((Sql_GetFloatData(SqlHandle, 44) - 1) * -100)); // Positives signify increased resist chance.
-                PMob->setModifier(Mod::WATERRES, (int16)((Sql_GetFloatData(SqlHandle, 45) - 1) * -100));
-                PMob->setModifier(Mod::LIGHTRES, (int16)((Sql_GetFloatData(SqlHandle, 46) - 1) * -100));
-                PMob->setModifier(Mod::DARKRES, (int16)((Sql_GetFloatData(SqlHandle, 47) - 1) * -100));
+                PMob->setModifier( Mod::SLASHSDT, (uint16)(Sql_GetFloatData( SqlHandle, 36) * 1000));
+                PMob->setModifier( Mod::PIERCESDT, (uint16)(Sql_GetFloatData( SqlHandle, 37) * 1000));
+                PMob->setModifier( Mod::HTHSDT, (uint16)(Sql_GetFloatData(SqlHandle, 38) * 1000));
+                PMob->setModifier( Mod::IMPACTSDT, (uint16)(Sql_GetFloatData( SqlHandle, 39) * 1000));
+
+                PMob->setModifier( Mod::FIRESDT, (int16)(Sql_GetFloatData( SqlHandle, 40) * 1000)); // These are stored as floating percentages
+                PMob->setModifier( Mod::ICESDT, (int16)(Sql_GetFloatData( SqlHandle, 41) * 1000)); // and need to be adjusted into modifier units.
+                PMob->setModifier( Mod::WINDSDT, (int16)(Sql_GetFloatData( SqlHandle, 42) * 1000)); // Higher RES = lower damage.
+                PMob->setModifier( Mod::EARTHSDT, (int16)(Sql_GetFloatData( SqlHandle, 43) * 1000)); // Negatives signify lower resist chance.
+                PMob->setModifier( Mod::THUNDERSDT, (int16)(Sql_GetFloatData( SqlHandle, 44) * 1000)); // Positives signify increased resist chance.
+                PMob->setModifier( Mod::WATERSDT, (int16)(Sql_GetFloatData( SqlHandle, 45) * 1000));
+                PMob->setModifier( Mod::LIGHTSDT, (int16)(Sql_GetFloatData( SqlHandle, 46) * 1000));
+                PMob->setModifier( Mod::DARKSDT, (int16)(Sql_GetFloatData( SqlHandle, 47) * 1000));
 
                 PMob->m_Element = (uint8)Sql_GetIntData(SqlHandle, 48);
                 PMob->m_Family = (uint16)Sql_GetIntData(SqlHandle, 49);