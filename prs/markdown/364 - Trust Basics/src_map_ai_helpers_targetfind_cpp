@@ -24,6 +24,7 @@ along with this program.  If not, see http://www.gnu.org/licenses/
 #include <math.h>
 #include "../../entities/charentity.h"
 #include "../../entities/mobentity.h"
+#include "../../entities/trustentity.h"
 #include "../../packets/action.h"
 #include "../../alliance.h"
 #include "../../../common/mmo.h"
@@ -93,12 +94,11 @@ void CTargetFind::findWithinArea(CBattleEntity* PTarget, AOERADIUS radiusType, f
     m_PTarget = PTarget;
     isPlayer = checkIsPlayer(m_PBattleEntity);
 
-    if (isPlayer){
+    if (isPlayer || m_PTarget->objtype == TYPE_TRUST)
+    {
         // handle this as a player
-
         if (m_PMasterTarget->objtype == TYPE_PC)
         {
-
             // players will never need to add whole alliance
             m_findType = FIND_PLAYER_PLAYER;
 
@@ -114,23 +114,34 @@ void CTargetFind::findWithinArea(CBattleEntity* PTarget, AOERADIUS radiusType, f
                     // add party members
                     addAllInParty(m_PMasterTarget, withPet);
                 }
+
+                // add my trust too, if its allowed
+                for (auto* trust : ((CCharEntity*)m_PMasterTarget)->PTrusts)
+                {
+                    if (validEntity((CBattleEntity*)trust))
+                    {
+                        m_targets.push_back((CBattleEntity*)trust);
+                    }
+                }
             }
-            else {
+            else 
+            {
                 // just add myself
                 addEntity(m_PMasterTarget, withPet);
             }
 
         }
-        else {
+        else 
+        {
             m_findType = FIND_PLAYER_MONSTER;
             // special case to add all mobs in range
             addAllInMobList(m_PMasterTarget, false);
         }
 
     }
-    else {
+    else 
+    {
         // handle this as a mob
-
         if (m_PMasterTarget->objtype == TYPE_PC || m_PBattleEntity->allegiance == ALLEGIANCE_PLAYER){
             m_findType = FIND_MONSTER_PLAYER;
         }
@@ -229,6 +240,11 @@ void CTargetFind::addAllInZone(CBattleEntity* PTarget, bool withPet)
 			addEntity(PMob, withPet);
 		}
 	});
+    zoneutils::GetZone(PTarget->getZone())->ForEachTrustInstance(PTarget, [&](CTrustEntity* PTrust){
+		if (PTrust){
+			addEntity(PTrust, withPet);
+		}
+	});
 }
 
 void CTargetFind::addAllInAlliance(CBattleEntity* PTarget, bool withPet)
@@ -241,12 +257,21 @@ void CTargetFind::addAllInAlliance(CBattleEntity* PTarget, bool withPet)
 
 void CTargetFind::addAllInParty(CBattleEntity* PTarget, bool withPet)
 {
-
     PTarget->ForParty([this, withPet](CBattleEntity* PMember)
     {
+        // Add Trust
+        if (PMember->objtype == TYPE_PC)
+        {
+            auto* PChar = (CCharEntity*)PMember;
+            for (auto trust : PChar->PTrusts)
+            {
+                CBattleEntity* PTrust = static_cast<CBattleEntity*>(trust);
+                m_targets.push_back(PTrust);
+            }
+        }
+        
         addEntity(PMember, withPet);
     });
-
 }
 
 void CTargetFind::addAllInEnmityList()
@@ -278,7 +303,6 @@ void CTargetFind::addEntity(CBattleEntity* PTarget, bool withPet)
     {
         m_targets.push_back(PTarget->PPet);
     }
-
 }
 
 CBattleEntity* CTargetFind::findMaster(CBattleEntity* PTarget)
@@ -368,6 +392,10 @@ bool CTargetFind::validEntity(CBattleEntity* PTarget)
 
         }
         else if (m_findType == FIND_MONSTER_MONSTER || m_findType == FIND_PLAYER_PLAYER){
+            if (PTarget->objtype == TYPE_TRUST)
+            {
+                return true;
+            }
             return false;
         }
     }
@@ -463,7 +491,7 @@ bool CTargetFind::canSee(position_t* point)
 
 CBattleEntity* CTargetFind::getValidTarget(uint16 actionTargetID, uint16 validTargetFlags)
 {
-    CBattleEntity* PTarget = (CBattleEntity*)m_PBattleEntity->GetEntity(actionTargetID, TYPE_MOB | TYPE_PC | TYPE_PET);
+    CBattleEntity* PTarget = (CBattleEntity*)m_PBattleEntity->GetEntity(actionTargetID, TYPE_MOB | TYPE_PC | TYPE_PET | TYPE_TRUST);
 
     if (PTarget == nullptr)
     {
@@ -475,6 +503,11 @@ CBattleEntity* CTargetFind::getValidTarget(uint16 actionTargetID, uint16 validTa
         return m_PBattleEntity->PPet;
     }
 
+    if (PTarget->objtype == TYPE_TRUST)
+    {
+        return PTarget;
+    }
+
     if (PTarget->ValidTarget(m_PBattleEntity, validTargetFlags))
     {
         return PTarget;