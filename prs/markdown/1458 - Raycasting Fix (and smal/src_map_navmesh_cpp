@@ -386,8 +386,12 @@ bool CNavMesh::validPosition(const position_t& position)
 bool CNavMesh::raycast(const position_t& start, const position_t& end)
 {
     TracyZoneScoped;
+
     if (start.x == end.x && start.y == end.y && start.z == end.z)
+    {
         return true;
+    }
+
     dtStatus status;
 
     float spos[3];
@@ -401,43 +405,95 @@ bool CNavMesh::raycast(const position_t& start, const position_t& end)
     polyPickExt[1] = 60;
     polyPickExt[2] = 30;
 
-    float snearest[3];
-
     dtQueryFilter filter;
     filter.setIncludeFlags(0xffff);
     filter.setExcludeFlags(0);
 
     dtPolyRef startRef;
-
+    float snearest[3];
     status = m_navMeshQuery.findNearestPoly(spos, polyPickExt, &filter, &startRef, snearest);
 
     if (dtStatusFailed(status))
     {
-        ShowNavError("CNavMesh::raycastPoint start point invalid (%f, %f, %f) (%u)\n", spos[0], spos[1], spos[2], m_zoneID);
+        ShowNavError("CNavMesh::raycast start point invalid (%f, %f, %f) (%u)\n", spos[0], spos[1], spos[2], m_zoneID);
         outputError(status);
         return true;
     }
 
     if (!m_navMesh->isValidPolyRef(startRef))
     {
-        ShowNavError("CNavMesh::raycastPoint startRef is invalid (%f, %f, %f) (%u)\n", start.x, start.y, start.z, m_zoneID);
+        ShowNavError("CNavMesh::raycast startRef is invalid (%f, %f, %f) (%u)\n", start.x, start.y, start.z, m_zoneID);
+        return true;
+    }
+
+    dtPolyRef endRef;
+    float enearest[3];
+    status = m_navMeshQuery.findNearestPoly(epos, polyPickExt, &filter, &endRef, enearest);
+
+    if (dtStatusFailed(status))
+    {
+        ShowNavError("CNavMesh::raycast end point invalid (%f, %f, %f) (%u)\n", epos[0], epos[1], epos[2], m_zoneID);
+        outputError(status);
+        return true;
+    }
+
+    if (!m_navMesh->isValidPolyRef(startRef))
+    {
+        ShowNavError("CNavMesh::raycast endRef is invalid (%f, %f, %f) (%u)\n", end.x, end.y, end.z, m_zoneID);
         return true;
     }
 
     status = m_navMeshQuery.raycast(startRef, spos, epos, &filter, 0, &m_hit);
 
     if (dtStatusFailed(status))
     {
-        ShowNavError("CNavMesh::raycastPoint raycast failed (%f, %f, %f)->(%f, %f, %f) (%u)\n", spos[0], spos[1], spos[2], epos[0], epos[1], epos[2], m_zoneID);
+        ShowNavError("CNavMesh::raycast raycast failed (%f, %f, %f)->(%f, %f, %f) (%u)\n", spos[0], spos[1], spos[2], epos[0], epos[1], epos[2], m_zoneID);
         outputError(status);
         return true;
     }
 
-    // no wall was hit
+    // no wall was hit (success or catastrophic failure)
     if (m_hit.t == FLT_MAX)
     {
         return true;
     }
 
+    // very close to edge of navmesh, look past the mesh for target
+    float distanceToWall = 0.0f;
+    float hitPos[3];
+    float hitNormal[3];
+    status = m_navMeshQuery.findDistanceToWall(endRef, enearest, 50.0f, &filter, &distanceToWall, hitPos, hitNormal);
+    if (dtStatusFailed(status))
+    {
+        ShowNavError("CNavMesh::raycast findDistanceToWall failed (%f, %f, %f) (%u)\n", epos[0], epos[1], epos[2], m_zoneID);
+        outputError(status);
+        return true;
+    }
+
+    if (distanceToWall < 2.5f)
+    {
+        float closest[3];
+        status = m_navMeshQuery.closestPointOnPolyBoundary(startRef, epos, closest);
+        if (dtStatusFailed(status))
+        {
+            ShowNavError("CNavMesh::raycast closestPointOnPolyBoundary failed (%u)\n", m_zoneID);
+            outputError(status);
+            return false;
+        }
+
+        status = m_navMeshQuery.raycast(startRef, spos, closest, &filter, 0, &m_hit);
+
+        if (dtStatusFailed(status))
+        {
+            ShowNavError("CNavMesh::raycast lookOffNavmesh raycast failed (%f, %f, %f)->(%f, %f, %f) (%u)\n", spos[0], spos[1], spos[2], closest[0], closest[1],
+                         closest[2], m_zoneID);
+            outputError(status);
+            return true;
+        }
+
+        // success
+        return m_hit.t == FLT_MAX;
+    }
+
     return false;
 }