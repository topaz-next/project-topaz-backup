@@ -2,20 +2,25 @@
 -- func: getmod <modID>
 -- desc: gets a mod by ID on the player or cursor target
 ---------------------------------------------------------------------------------------------------
+
 require("scripts/globals/status")
+require("scripts/globals/commands")
 
 cmdprops =
 {
     permission = 3,
     parameters = "s"
 }
 
-function error(player, msg)
-    player:PrintToPlayer(msg)
-    player:PrintToPlayer("!getmod <modID>")
-end
+function onTrigger(caller, entity, id)
+    local targ = tpz.commands.getTargetNonNPC(caller, entity, nil)
+    local usage = "!getmod <modID>"
+
+    if (targ == nil) then
+        tpz.commands.error(caller, entity, "You must target or enter a player name, mobID.", usage)
+        return
+    end
 
-function onTrigger(player, id)
     -- invert tpz.mod table
     local modNameByNum = {}
     for k,v in pairs(tpz.mod) do
@@ -36,18 +41,9 @@ function onTrigger(player, id)
         modName = id
     end
     if modName == nil or modId == nil then
-        error(player, "Invalid modID.")
-        return
-    end
-
-    -- validate target
-    local effectTarget = player:getCursorTarget()
-    if effectTarget == nil then
-        effectTarget = player
-    elseif effectTarget:isNPC() then
-        error(player, "Current target is an NPC, which can not have mods.")
+        tpz.commands.error(caller, entity, "Invalid modID.", usage)
         return
     end
 
-    player:PrintToPlayer(string.format("%s's Mod %i (%s) is %i", effectTarget:getName(), modId, modName, effectTarget:getMod(modId)))
+    tpz.commands.print(caller, entity, string.format("%s's Mod %i (%s) is %i", targ:getName(), modId, modName, targ:getMod(modId)))
 end