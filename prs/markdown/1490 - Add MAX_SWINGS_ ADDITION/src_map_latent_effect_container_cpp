@@ -531,13 +531,8 @@ void CLatentEffectContainer::CheckLatentsJobLevel()
     {
         switch (latentEffect.GetConditionsID())
         {
-        case LATENT_JOB_LEVEL_EVEN:
-        case LATENT_JOB_LEVEL_ODD:
-        case LATENT_JOB_MULTIPLE_5:
-        case LATENT_JOB_MULTIPLE_10:
-        case LATENT_JOB_MULTIPLE_13_NIGHT:
-        case LATENT_JOB_LEVEL_BELOW:
-        case LATENT_JOB_LEVEL_ABOVE:
+        case LATENT_JOB_MULTIPLE:
+        case LATENT_JOB_MULTIPLE_AT_NIGHT:
             return ProcessLatentEffect(latentEffect);
             break;
         default:
@@ -946,20 +941,29 @@ bool CLatentEffectContainer::ProcessLatentEffect(CLatentEffect& latentEffect)
         }
         break;
     }
-    case LATENT_JOB_MULTIPLE_5:
-        expression = m_POwner->GetMLevel() % 5 == 0;
-        break;
-    case LATENT_JOB_MULTIPLE_10:
-        expression = m_POwner->GetMLevel() % 10 == 0;
-        break;
-    case LATENT_JOB_MULTIPLE_13_NIGHT:
-        expression = m_POwner->GetMLevel() % 13 == 0 && CVanaTime::getInstance()->SyncTime() == TIME_NIGHT;
-        break;
-    case LATENT_JOB_LEVEL_ODD:
-        expression = m_POwner->GetMLevel() % 2 == 1;
+    case LATENT_JOB_MULTIPLE:
+        // Check if level is odd
+        if (latentEffect.GetConditionsValue() == 0)
+        {
+            expression = m_POwner->GetMLevel() % 2 == 1;
+        }
+        // Check if level is multiple of divisor
+        else
+        {
+            expression = m_POwner->GetMLevel() % latentEffect.GetConditionsValue() == 0;
+        }
         break;
-    case LATENT_JOB_LEVEL_EVEN:
-        expression = m_POwner->GetMLevel() % 2 == 0;
+    case LATENT_JOB_MULTIPLE_AT_NIGHT:
+        if (latentEffect.GetConditionsValue() == 0)
+        {
+            expression = m_POwner->GetMLevel() % 2 == 1 &&
+                CVanaTime::getInstance()->SyncTime() == TIME_NIGHT;
+        }
+        else
+        {
+            expression = m_POwner->GetMLevel() % latentEffect.GetConditionsValue() == 0 &&
+                CVanaTime::getInstance()->SyncTime() == TIME_NIGHT;
+        }
         break;
     case LATENT_WEAPON_DRAWN_HP_UNDER:
         expression = m_POwner->health.hp < latentEffect.GetConditionsValue() && m_POwner->animation == ANIMATION_ATTACK;