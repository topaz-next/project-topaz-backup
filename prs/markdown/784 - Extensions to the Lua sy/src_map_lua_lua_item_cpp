@@ -22,6 +22,7 @@ along with this program.  If not, see http://www.gnu.org/licenses/
 #include "lua_item.h"
 
 #include "../../common/showmsg.h"
+#include "../utils/itemutils.h"
 #include "../items/item.h"
 #include "../items/item_equipment.h"
 #include "../items/item_weapon.h"
@@ -86,6 +87,14 @@ inline int32 CLuaItem::getQuantity(lua_State* L)
     return 1;
 }
 
+inline int32 CLuaItem::getBasePrice(lua_State* L)
+{
+    TPZ_DEBUG_BREAK_IF(m_PLuaItem == nullptr);
+    uint32 basePrice = static_cast<CItem*>(m_PLuaItem)->getBasePrice();
+    lua_pushinteger(L, basePrice);
+    return 1;
+}
+
 inline int32 CLuaItem::getLocationID(lua_State* L)
 {
     TPZ_DEBUG_BREAK_IF(m_PLuaItem == nullptr);
@@ -102,6 +111,14 @@ inline int32 CLuaItem::getSlotID(lua_State* L)
     return 1;
 }
 
+inline int32 CLuaItem::getTrialNumber(lua_State* L)
+{
+    TPZ_DEBUG_BREAK_IF(m_PLuaItem == nullptr);
+    uint16 trialID = static_cast<CItemEquipment*>(m_PLuaItem)->getTrialNumber();
+    lua_pushinteger(L, trialID);
+    return 1;
+}
+
 inline int32 CLuaItem::getWornItem(lua_State* L)
 {
     TPZ_DEBUG_BREAK_IF(m_PLuaItem == nullptr);
@@ -140,6 +157,22 @@ inline int32 CLuaItem::getName(lua_State* L)
     return 1;
 }
 
+inline int32 CLuaItem::getILvl(lua_State* L)
+{
+    TPZ_DEBUG_BREAK_IF(m_PLuaItem == nullptr);
+    uint16 ilvl = static_cast<CItemEquipment*>(m_PLuaItem)->getILvl();
+    lua_pushinteger(L, ilvl);
+    return 1;
+}
+
+inline int32 CLuaItem::getReqLvl(lua_State* L)
+{
+    TPZ_DEBUG_BREAK_IF(m_PLuaItem == nullptr);
+    uint16 lvl = static_cast<CItemEquipment*>(m_PLuaItem)->getReqLvl();
+    lua_pushinteger(L, lvl);
+    return 1;
+}
+
 inline int32 CLuaItem::getMod(lua_State* L)
 {
     TPZ_DEBUG_BREAK_IF(m_PLuaItem == nullptr);
@@ -161,6 +194,13 @@ inline int32 CLuaItem::addMod(lua_State* L)
 
     CItemEquipment* PItem = (CItemEquipment*)m_PLuaItem;
 
+    // Checks if this item is just a pointer created by GetItem()
+    // All item-modifying functions in this file should check this!
+    if(itemutils::IsItemPointer(PItem))
+    {
+        return 0;
+    }
+
     Mod mod = static_cast<Mod>(lua_tointeger(L, 1));
     auto power = (int16)lua_tointeger(L, 2);
 
@@ -291,11 +331,15 @@ Lunar<CLuaItem>::Register_t CLuaItem::methods[] =
     LUNAR_DECLARE_METHOD(CLuaItem,getAHCat),
     LUNAR_DECLARE_METHOD(CLuaItem,getQuantity),
     LUNAR_DECLARE_METHOD(CLuaItem,getLocationID),
+    LUNAR_DECLARE_METHOD(CLuaItem,getBasePrice),
     LUNAR_DECLARE_METHOD(CLuaItem,getSlotID),
+    LUNAR_DECLARE_METHOD(CLuaItem,getTrialNumber),
     LUNAR_DECLARE_METHOD(CLuaItem,getWornItem),
     LUNAR_DECLARE_METHOD(CLuaItem,isType),
     LUNAR_DECLARE_METHOD(CLuaItem,isSubType),
     LUNAR_DECLARE_METHOD(CLuaItem,getName),
+    LUNAR_DECLARE_METHOD(CLuaItem,getILvl),
+    LUNAR_DECLARE_METHOD(CLuaItem,getReqLvl),
     LUNAR_DECLARE_METHOD(CLuaItem,getMod),
     LUNAR_DECLARE_METHOD(CLuaItem,addMod),
     LUNAR_DECLARE_METHOD(CLuaItem,delMod),