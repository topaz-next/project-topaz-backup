@@ -1,100 +1,121 @@
 #include "gambits_container.h"
 
+#include "../../ability.h"
 #include "../../spell.h"
+#include "../../weapon_skill.h"
 #include "../../utils/battleutils.h"
 
-void CGambitsContainer::AddGambit(G_SELECTOR selector, G_TRIGGER trigger, uint16 trigger_condition, G_REACTION reaction, G_REACTION_MODIFIER reaction_mod, uint16 reaction_arg, uint16 retry_delay)
+namespace gambits
+{
+
+// Validate gambit before it's inserted into the gambit list
+// Check levels, etc.
+void CGambitsContainer::AddGambit(Gambit_t gambit)
 {
     bool available = true;
-    if (reaction == G_REACTION::MA && reaction_mod == G_REACTION_MODIFIER::SELECT_SPECIFIC)
+    if (gambit.action.reaction == G_REACTION::MA && gambit.action.select == G_SELECT::SPECIFIC)
     {
-        if (!spell::CanUseSpell(static_cast<CBattleEntity*>(POwner), static_cast<SpellID>(reaction_arg)))
+        if (!spell::CanUseSpell(static_cast<CBattleEntity*>(POwner), static_cast<SpellID>(gambit.action.select_arg)))
         {
             available = false;
         }
     }
     if (available)
     {
-        actions.push_back(Action_t{ selector, trigger, trigger_condition, reaction, reaction_mod, reaction_arg, retry_delay });
+        gambits.push_back(gambit);
     }
 }
 
 void CGambitsContainer::Tick(time_point tick)
 {
-    // Do something every second
-    if (tick < m_lastAction + 1s)
+    if (tick < m_lastAction)
     {
         return;
     }
-    m_lastAction = tick;
+    auto random_offset = static_cast<std::chrono::milliseconds>(tpzrand::GetRandomNumber(1000, 2500));
+    m_lastAction = tick + random_offset;
 
-    // Define some things
     auto controller = static_cast<CTrustController*>(POwner->PAI->GetController());
 
-    for (auto action : actions)
+    for (auto gambit : gambits)
     {
-        if (tick < action.last_used + std::chrono::seconds(action.retry_delay))
+        if (tick < gambit.last_used + std::chrono::seconds(gambit.retry_delay))
         {
-            return;
+            continue;
         }
 
-        auto checkTrigger = [&](CBattleEntity* target, G_TRIGGER trigger, uint16 param) -> bool
+        auto checkTrigger = [&](CBattleEntity* target, Predicate_t& predicate) -> bool
         {
-            switch (trigger)
+            switch (predicate.condition)
             {
-            case HPP_LTE:
+            case G_CONDITION::ALWAYS:
             {
-                return target->GetHPP() <= param;
+                return true;
                 break;
             }
-            case HPP_GTE:
+            case G_CONDITION::HPP_LT:
             {
-                return target->GetHPP() >= param;
+                return target->GetHPP() < predicate.condition_arg;
                 break;
             }
-            case MPP_LTE:
+            case G_CONDITION::HPP_GTE:
             {
-                return target->GetMPP() <= param;
+                return target->GetHPP() >= predicate.condition_arg;
                 break;
             }
-            case TP_GTE:
+            case G_CONDITION::MPP_LT:
             {
-                return target->health.tp >= param;
+                return target->GetMPP() < predicate.condition_arg;
                 break;
             }
-            case STATUS:
+            case G_CONDITION::TP_LT:
             {
-                return target->StatusEffectContainer->HasStatusEffect(static_cast<EFFECT>(param));
+                return target->health.tp < predicate.condition_arg;
                 break;
             }
-            case NOT_STATUS:
+            case G_CONDITION::TP_GTE:
             {
-                return !target->StatusEffectContainer->HasStatusEffect(static_cast<EFFECT>(param));
+                return target->health.tp >= predicate.condition_arg;
                 break;
             }
-            case STATUS_FLAG:
+            case G_CONDITION::STATUS:
             {
-                return target->StatusEffectContainer->HasStatusEffectByFlag(static_cast<EFFECTFLAG>(param));
+                return target->StatusEffectContainer->HasStatusEffect(static_cast<EFFECT>(predicate.condition_arg));
                 break;
             }
-            case NUKE:
+            case G_CONDITION::NOT_STATUS:
             {
-                return true;
+                return !target->StatusEffectContainer->HasStatusEffect(static_cast<EFFECT>(predicate.condition_arg));
+                break;
+            }
+            case G_CONDITION::STATUS_FLAG:
+            {
+                return target->StatusEffectContainer->HasStatusEffectByFlag(static_cast<EFFECTFLAG>(predicate.condition_arg));
+                break;
+            }
+            case G_CONDITION::HAS_TOP_ENMITY:
+            {
+                return (controller->GetTopEnmity()) ? controller->GetTopEnmity()->targid == POwner->targid : false;
+                break;
+            }
+            case G_CONDITION::NOT_HAS_TOP_ENMITY:
+            {
+                return (controller->GetTopEnmity()) ? controller->GetTopEnmity()->targid != POwner->targid : false;
                 break;
             }
-            case SC_AVAILABLE:
+            case G_CONDITION::SC_AVAILABLE:
             {
                 auto PSCEffect = target->StatusEffectContainer->GetStatusEffect(EFFECT_SKILLCHAIN);
                 return PSCEffect && PSCEffect->GetStartTime() + 3s < server_clock::now() && PSCEffect->GetTier() == 0;
                 break;
             }
-            case NOT_SC_AVAILABLE:
+            case G_CONDITION::NOT_SC_AVAILABLE:
             {
                 auto PSCEffect = target->StatusEffectContainer->GetStatusEffect(EFFECT_SKILLCHAIN);
                 return PSCEffect == nullptr;
                 break;
             }
-            case MB_AVAILABLE:
+            case G_CONDITION::MB_AVAILABLE:
             {
                 auto PSCEffect = target->StatusEffectContainer->GetStatusEffect(EFFECT_SKILLCHAIN);
                 return PSCEffect && PSCEffect->GetStartTime() + 3s < server_clock::now() && PSCEffect->GetTier() > 0;
@@ -105,25 +126,26 @@ void CGambitsContainer::Tick(time_point tick)
         };
 
         CBattleEntity* target = nullptr;
-        if (action.selector == G_SELECTOR::SELF)
+        if (gambit.predicate.target == G_TARGET::SELF)
         {
-            target = checkTrigger(POwner, action.trigger, action.trigger_condition) ? POwner : nullptr;
+            target = checkTrigger(POwner, gambit.predicate) ? POwner : nullptr;
         }
-        else if (action.selector == G_SELECTOR::TARGET)
+        else if (gambit.predicate.target == G_TARGET::TARGET)
         {
             auto mob = POwner->GetBattleTarget();
-            target = checkTrigger(mob, action.trigger, action.trigger_condition) ? mob : nullptr;
+            target = checkTrigger(mob, gambit.predicate) ? mob : nullptr;
         }
-        else if (action.selector == G_SELECTOR::PARTY)
+        else if (gambit.predicate.target == G_TARGET::PARTY)
         {
             // TODO: This is very messy, priority are player chars
             CCharEntity* master = static_cast<CCharEntity*>(POwner->PMaster);
             for (uint8 i = 0; i < master->PParty->members.size(); ++i)
             {
                 auto member = master->PParty->members.at(i);
-                if (POwner->loc.zone == member->loc.zone &&
-                    distance(POwner->loc.p, member->loc.p) <= 20.0f &&
-                    checkTrigger(member, action.trigger, action.trigger_condition))
+                if (member->isAlive() &&
+                    POwner->loc.zone == member->loc.zone &&
+                    distance(POwner->loc.p, member->loc.p) <= 15.0f &&
+                    checkTrigger(member, gambit.predicate))
                 {
                     target = member;
                     break;
@@ -134,54 +156,96 @@ void CGambitsContainer::Tick(time_point tick)
                 for (uint8 i = 0; i < master->PTrusts.size(); ++i)
                 {
                     auto member = master->PTrusts.at(i);
-                    if (checkTrigger(member, action.trigger, action.trigger_condition))
+                    if (checkTrigger(member, gambit.predicate))
                     {
                         target = member;
                         break;
                     }
                 }
             }
         }
-
-        if (target)
+        else if (gambit.predicate.target == G_TARGET::MASTER)
+        {
+            target = POwner->PMaster;
+        }
+        else if (gambit.predicate.target == G_TARGET::TANK)
         {
-            if (action.reaction == G_REACTION::MA)
+            /*
+            // TODO: This is awful
+            CBattleEntity* tank = nullptr;
+            CCharEntity* master = static_cast<CCharEntity*>(POwner->PMaster);
+            for (uint8 i = 0; i < master->PParty->members.size(); ++i)
             {
-                if (action.reaction_mod == G_REACTION_MODIFIER::SELECT_SPECIFIC)
+                auto member = master->PParty->members.at(i);
+                auto job = member->GetMJob();
+                if (member->isAlive() &&
+                    POwner->loc.zone == member->loc.zone &&
+                    distance(POwner->loc.p, member->loc.p) <= 15.0f &&
+                    (job == JOB_PLD || job == JOB_RUN || JOB_WAR || JOB_NIN))
                 {
-                    auto spell_id = POwner->SpellContainer->GetAvailable(static_cast<SpellID>(action.reaction_arg));
-                    if (spell_id.has_value())
+                    tank = member;
+                    break;
+                }
+            }
+            if (!tank)
+            {
+                for (uint8 i = 0; i < master->PTrusts.size(); ++i)
+                {
+                    auto member = master->PTrusts.at(i);
+                    auto job = member->GetMJob();
+                    if (job == JOB_PLD || job == JOB_RUN || JOB_WAR || JOB_NIN)
                     {
-                        controller->Cast(target->targid, static_cast<SpellID>(spell_id.value()));
+                        tank = member;
+                        break;
                     }
                 }
-                else if (action.reaction_mod == G_REACTION_MODIFIER::SELECT_HIGHEST)
+            }
+            if (checkTrigger(tank, gambit.predicate))
+            {
+                target = tank;
+                break;
+            }
+            */
+        }
+
+        if (target)
+        {
+            if (gambit.action.reaction == G_REACTION::MA)
+            {
+                if (gambit.action.select == G_SELECT::SPECIFIC)
                 {
-                    auto spell_id = POwner->SpellContainer->GetBestAvailable(static_cast<SPELLFAMILY>(action.reaction_arg));
+                    auto spell_id = POwner->SpellContainer->GetAvailable(static_cast<SpellID>(gambit.action.select_arg));
                     if (spell_id.has_value())
                     {
                         controller->Cast(target->targid, static_cast<SpellID>(spell_id.value()));
                     }
                 }
-                else if (action.reaction_mod == G_REACTION_MODIFIER::SELECT_LOWEST)
+                else if (gambit.action.select == G_SELECT::HIGHEST)
                 {
-                    /*
-                    auto spell_id = POwner->SpellContainer->GetWorstAvailable(static_cast<SPELLFAMILY>(action.reaction_arg));
+                    auto spell_id = POwner->SpellContainer->GetBestAvailable(static_cast<SPELLFAMILY>(gambit.action.select_arg));
                     if (spell_id.has_value())
                     {
                         controller->Cast(target->targid, static_cast<SpellID>(spell_id.value()));
                     }
-                    */
                 }
-                else if (action.reaction_mod == G_REACTION_MODIFIER::SELECT_RANDOM)
+                else if (gambit.action.select == G_SELECT::LOWEST)
+                {
+                    // TODO
+                    //auto spell_id = POwner->SpellContainer->GetWorstAvailable(static_cast<SPELLFAMILY>(gambit.action.select_arg));
+                    //if (spell_id.has_value())
+                    //{
+                    //    controller->Cast(target->targid, static_cast<SpellID>(spell_id.value()));
+                    //}
+                }
+                else if (gambit.action.select == G_SELECT::RANDOM)
                 {
                     auto spell_id = POwner->SpellContainer->GetSpell();
                     if (spell_id.has_value())
                     {
                         controller->Cast(target->targid, static_cast<SpellID>(spell_id.value()));
                     }
                 }
-                else if (action.reaction_mod == G_REACTION_MODIFIER::SELECT_MB_ELEMENT)
+                else if (gambit.action.select == G_SELECT::MB_ELEMENT)
                 {
                     CStatusEffect* PSCEffect = target->StatusEffectContainer->GetStatusEffect(EFFECT_SKILLCHAIN, 0);
                     std::list<SKILLCHAIN_ELEMENT> resonanceProperties;
@@ -211,19 +275,58 @@ void CGambitsContainer::Tick(time_point tick)
                             }
                         }
                     }
-
                     if (spell_id.has_value())
                     {
                         controller->Cast(target->targid, static_cast<SpellID>(spell_id.value()));
                     }
                 }
             }
+            else if (gambit.action.reaction == G_REACTION::JA)
+            {
+                CAbility* PAbility = ability::GetAbility(gambit.action.select_arg);
+                if (PAbility->getValidTarget() == TARGET_SELF)
+                {
+                    target = POwner;
+                }
+
+                if (gambit.action.select == G_SELECT::SPECIFIC)
+                {
+                    controller->Ability(target->targid, PAbility->getID());
+                }
+            }
+            else if (gambit.action.reaction == G_REACTION::WS)
+            {
+                CWeaponSkill* PWeaponSkill = battleutils::GetWeaponSkill(gambit.action.select_arg);
+                if (battleutils::isValidSelfTargetWeaponskill(PWeaponSkill->getID()))
+                {
+                    target = POwner;
+                }
+                else
+                {
+                    target = POwner->GetBattleTarget();
+                }
+
+                if (gambit.action.select == G_SELECT::SPECIFIC)
+                {
+                    controller->WeaponSkill(target->targid, PWeaponSkill->getID());
+                }
+            }
+            else if (gambit.action.reaction == G_REACTION::MS)
+            {
+                if (gambit.action.select == G_SELECT::SPECIFIC)
+                {
+                    auto mob = POwner->GetBattleTarget();
+                    controller->MobSkill(mob->targid, gambit.action.select_arg);
+                }
+            }
 
             // Assume success
-            if (action.retry_delay != 0)
+            if (gambit.retry_delay != 0)
             {
-                action.last_used = tick;
+                gambit.last_used = tick;
             }
         }
     }
 }
+
+} // namespace gambits
\ No newline at end of file