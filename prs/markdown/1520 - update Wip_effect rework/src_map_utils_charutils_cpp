@@ -29,6 +29,7 @@ along with this program.  If not, see http://www.gnu.org/licenses/
 #include <stdio.h>
 #include <string.h>
 #include <array>
+#include <chrono>
 
 #include "../lua/luautils.h"
 
@@ -47,6 +48,7 @@ along with this program.  If not, see http://www.gnu.org/licenses/
 #include "../packets/char_stats.h"
 #include "../packets/char_sync.h"
 #include "../packets/char_update.h"
+#include "../packets/chat_message.h"
 #include "../packets/conquest_map.h"
 #include "../packets/delivery_box.h"
 #include "../packets/inventory_item.h"
@@ -61,7 +63,10 @@ along with this program.  If not, see http://www.gnu.org/licenses/
 #include "../packets/message_special.h"
 #include "../packets/message_standard.h"
 #include "../packets/quest_mission_log.h"
+
+#include "../packets/roe_sparkupdate.h"
 #include "../packets/server_ip.h"
+#include "../packets/timer_bar_util.h"
 
 #include "../ability.h"
 #include "../alliance.h"
@@ -74,12 +79,14 @@ along with this program.  If not, see http://www.gnu.org/licenses/
 #include "../weapon_skill.h"
 #include "../item_container.h"
 #include "../recast_container.h"
+#include "../roe.h"
 #include "../status_effect_container.h"
 #include "../linkshell.h"
 #include "../universal_container.h"
 #include "../latent_effect_container.h"
 #include "../treasure_pool.h"
 #include "../mob_modifier.h"
+#include "../roe.h"
 
 #include "../entities/charentity.h"
 #include "../entities/petentity.h"
@@ -351,10 +358,12 @@ namespace charutils
             "missions,"             // 21
             "assault,"              // 22
             "campaign,"             // 23
-            "playtime,"             // 24
-            "campaign_allegiance,"  // 25
-            "isstylelocked,"        // 26
-            "moghancement "         // 27
+            "eminence,"             // 24
+            "playtime,"             // 25
+            "campaign_allegiance,"  // 26
+            "isstylelocked,"        // 27
+            "moghancement,"         // 28
+            "UNIX_TIMESTAMP(`lastupdate`) " // 29
             "FROM chars "
             "WHERE charid = %u";
 
@@ -429,12 +438,19 @@ namespace charutils
             Sql_GetData(SqlHandle, 23, &campaign, &length);
             memcpy(&PChar->m_campaignLog, campaign, (length > sizeof(PChar->m_campaignLog) ? sizeof(PChar->m_campaignLog) : length));
 
-            PChar->SetPlayTime(Sql_GetUIntData(SqlHandle, 24));
-            PChar->profile.campaign_allegiance = (uint8)Sql_GetIntData(SqlHandle, 25);
-            PChar->setStyleLocked(Sql_GetIntData(SqlHandle, 26) == 1 ? true : false);
-            PChar->SetMoghancement(Sql_GetUIntData(SqlHandle, 27));
+            length = 0;
+            char* eminence = nullptr;
+            Sql_GetData(SqlHandle, 24, &eminence, &length);
+            memcpy(&PChar->m_eminenceLog, eminence, (length > sizeof(PChar->m_eminenceLog) ? sizeof(PChar->m_eminenceLog) : length));
+
+            PChar->SetPlayTime(Sql_GetUIntData(SqlHandle, 25));
+            PChar->profile.campaign_allegiance = (uint8)Sql_GetIntData(SqlHandle, 26);
+            PChar->setStyleLocked(Sql_GetIntData(SqlHandle, 27) == 1 ? true : false);
+            PChar->SetMoghancement(Sql_GetUIntData(SqlHandle, 28));
+            PChar->lastOnline = Sql_GetUIntData(SqlHandle, 29);
         }
 
+        roeutils::onCharLoad(PChar);
         LoadSpells(PChar);
 
         fmtQuery =
@@ -1636,7 +1652,7 @@ namespace charutils
                 case SLOT_SUB:
                 {
                     PChar->look.sub = 0;
-                    PChar->m_Weapons[SLOT_SUB] = itemutils::GetUnarmedItem();           // << equips "nothing" in the sub slot to prevent multi attack exploit
+                    PChar->m_Weapons[SLOT_SUB] = itemutils::GetUnarmedItem(); // << equips "nothing" in the sub slot to prevent multi attack exploit
                     PChar->health.tp = 0;
                     PChar->StatusEffectContainer->DelStatusEffect(EFFECT_AFTERMATH);
                     BuildingCharWeaponSkills(PChar);
@@ -2726,6 +2742,9 @@ namespace charutils
         if ((PChar->WorkingSkills.rank[SkillID] != 0) && !(PChar->WorkingSkills.skill[SkillID] & 0x8000))
         {
             uint16 CurSkill = PChar->RealSkills.skill[SkillID];
+            uint16 CapSkill = battleutils::GetMaxSkill(SkillID, PChar->GetMJob(), PChar->GetMLevel());
+            // Max skill this victim level will allow.
+            // Note this is no longer retail accurate, since now 'decent challenge' mobs allow to cap any skill.
             uint16 MaxSkill = battleutils::GetMaxSkill(SkillID, PChar->GetMJob(), std::min(PChar->GetMLevel(), lvl));
 
             int16  Diff = MaxSkill - CurSkill / 10;
@@ -2775,7 +2794,8 @@ namespace charutils
                     tier -= 1;
                     SkillAmount += 1;
                 }
-                MaxSkill = MaxSkill * 10;
+                // convert to 10th units
+                CapSkill = CapSkill * 10;
 
                 // Do skill amount multiplier (Will only be applied if default setting is changed)
                 if (map_config.skillup_amount_multiplier > 1)
@@ -2787,9 +2807,10 @@ namespace charutils
                     }
                 }
 
-                if (SkillAmount + CurSkill >= MaxSkill)
+                if (SkillAmount + CurSkill >= CapSkill)
                 {
-                    SkillAmount = MaxSkill - CurSkill;
+                    // skill is capped. set blue flag
+                    SkillAmount = CapSkill - CurSkill;
                     PChar->WorkingSkills.skill[SkillID] |= 0x8000;
                 }
 
@@ -3834,6 +3855,11 @@ namespace charutils
 
         if (onLimitMode)
             PChar->pushPacket(new CMenuMeritPacket(PChar));
+
+        if (PMob != PChar) // Only mob kills count for gain EXP records
+        {
+            roeutils::event(ROE_EXPGAIN, PChar, RoeDatagram("exp", exp));
+        }
     }
 
     /************************************************************************
@@ -3985,6 +4011,32 @@ namespace charutils
             PChar->id);
     }
 
+    /************************************************************************
+    *                                                                       *
+    *  Save Eminence Records                                                *
+    *                                                                       *
+    ************************************************************************/
+
+    void SaveEminenceData(CCharEntity* PChar)
+    {
+        if (!roeutils::RoeSystem.RoeEnabled)
+        {
+            return;
+        }
+
+        const char* Query =
+            "UPDATE chars "
+            "SET "
+            "eminence = '%s' "
+            "WHERE charid = %u;";
+
+        char eminenceList[sizeof(PChar->m_eminenceLog) * 2 + 1];
+        Sql_EscapeStringLen(SqlHandle, eminenceList, (const char*)&PChar->m_eminenceLog, sizeof(PChar->m_eminenceLog));
+
+        Sql_Query(SqlHandle, Query, eminenceList, PChar->id);
+        PChar->m_eminenceCache.lastWriteout = static_cast<uint32>(time(nullptr));
+    }
+
     /************************************************************************
     *                                                                       *
     *  Cохраняем список колючевых предметов                                 *
@@ -4576,21 +4628,21 @@ namespace charutils
 
         static const Mod strong[8] = {
             Mod::FIRE_AFFINITY_PERP,
-            Mod::EARTH_AFFINITY_PERP,
-            Mod::WATER_AFFINITY_PERP,
-            Mod::WIND_AFFINITY_PERP,
             Mod::ICE_AFFINITY_PERP,
+            Mod::WIND_AFFINITY_PERP,
+            Mod::EARTH_AFFINITY_PERP,
             Mod::THUNDER_AFFINITY_PERP,
+            Mod::WATER_AFFINITY_PERP,
             Mod::LIGHT_AFFINITY_PERP,
             Mod::DARK_AFFINITY_PERP};
 
         static const WEATHER weatherStrong[8] = {
             WEATHER_HOT_SPELL,
-            WEATHER_DUST_STORM,
-            WEATHER_RAIN,
-            WEATHER_WIND,
             WEATHER_SNOW,
+            WEATHER_WIND,
+            WEATHER_DUST_STORM,
             WEATHER_THUNDER,
+            WEATHER_RAIN,
             WEATHER_AURORAS,
             WEATHER_GLOOM};
 
@@ -4600,7 +4652,7 @@ namespace charutils
 
         reduction = reduction + PChar->getMod(strong[element]);
 
-        if (CVanaTime::getInstance()->getWeekday() == element)
+        if (battleutils::GetDayElement() == element)
         {
             reduction = reduction + PChar->getMod(Mod::DAY_REDUCTION);
         }
@@ -4973,13 +5025,19 @@ namespace charutils
         const char* Query = "UPDATE char_points SET %s = GREATEST(LEAST(%s+%d, %d), 0) WHERE charid = %u;";
 
         Sql_Query(SqlHandle, Query, type, type, amount, max, PChar->id);
+
+        if (strcmp(type, "spark_of_eminence") == 0)
+            PChar->pushPacket(new CRoeSparkUpdatePacket(PChar));
     }
 
     void SetPoints(CCharEntity* PChar, const char* type, int32 amount)
     {
         const char* Query = "UPDATE char_points SET %s = %d WHERE charid = %u;";
 
         Sql_Query(SqlHandle, Query, type, amount, PChar->id);
+
+        if (strcmp(type, "spark_of_eminence") == 0)
+            PChar->pushPacket(new CRoeSparkUpdatePacket(PChar));
     }
 
     int32 GetPoints(CCharEntity* PChar, const char* type)
@@ -5110,4 +5168,95 @@ namespace charutils
         return 0;
     }
 
+    uint16 getWideScanRange(JOBTYPE job, uint8 level)
+    {
+        // Set Widescan range
+        // Distances need verified, based current values off what we had in traits.sql and data at http://wiki.ffxiclopedia.org/wiki/Wide_Scan
+        // NOTE: Widescan was formerly piggy backed onto traits (resist slow) but is not a real trait, any attempt to give it a trait will place a dot on
+        // characters trait menu.
+
+        // Limit to BST and RNG, and try to use old distance values for tiers
+        if (job == JOB_RNG)
+        {
+            // Range for RNG >=80 needs verification.
+            if (level >= 80)
+            {
+                return 350;
+            }
+            else if (level >= 60)
+            {
+                return 300;
+            }
+            else if (level >= 40)
+            {
+                return 250;
+            }
+            else if (level >= 20)
+            {
+                return 200;
+            }
+            else
+            {
+                return 150;
+            }
+        }
+        else if (job == JOB_BST)
+        {
+            if (level >= 80)
+            {
+                return 300;
+            }
+            else if (level >= 60)
+            {
+                return 250;
+            }
+            else if (level >= 40)
+            {
+                return 200;
+            }
+            else if (level >= 20 || map_config.all_jobs_widescan == 1)
+            {
+                return 150;
+            }
+            else
+            {
+                return 50;
+            }
+        }
+
+        // Default to base widescan if not RNG or BST
+        if (map_config.all_jobs_widescan == 1)
+        {
+            return 150;
+        }
+        else
+        {
+            return 0;
+        }
+    }
+
+    uint16 getWideScanRange(CCharEntity* PChar)
+    {
+        // Get maximum widescan range from main job or sub job
+        return std::max(getWideScanRange(PChar->GetMJob(), PChar->GetMLevel()), getWideScanRange(PChar->GetSJob(), PChar->GetSLevel()));
+    }
+
+    void SendTimerPacket(CCharEntity* PChar, uint32 seconds)
+    {
+        auto timerPacket = new CTimerBarUtilPacket();
+        timerPacket->addCountdown(seconds);
+        PChar->pushPacket(timerPacket);
+    }
+
+    void SendTimerPacket(CCharEntity* PChar, duration dur)
+    {
+        auto timeLimitSeconds = static_cast<uint32>(std::chrono::duration_cast<std::chrono::seconds>(dur).count());
+        SendTimerPacket(PChar, timeLimitSeconds);
+    }
+
+    void SendClearTimerPacket(CCharEntity* PChar)
+    {
+        auto timerPacket = new CTimerBarUtilPacket();
+        PChar->pushPacket(timerPacket);
+    }
 }; // namespace charutils