@@ -23,6 +23,7 @@
 
 #include "utils/guildutils.h"
 #include "utils/instanceutils.h"
+#include "roe.h"
 #include "time_server.h"
 #include "timetriggers.h"
 #include "transport.h"
@@ -33,34 +34,38 @@
 #include "entities/charentity.h"
 #include "latent_effect_container.h"
 
-
-int32 time_server(time_point tick,CTaskMgr::CTask* PTask)
+int32 time_server(time_point tick, CTaskMgr::CTask* PTask)
 {
+    TracyZoneScoped;
     TIMETYPE VanadielTOTD = CVanaTime::getInstance()->SyncTime();
     // uint8 WeekDay = (uint8)CVanaTime::getInstance()->getWeekday();
 
-    // weekly update for conquest (sunday at midnight)
-    if (CVanaTime::getInstance()->getSysWeekDay() == 1  && CVanaTime::getInstance()->getSysHour() == 0 && CVanaTime::getInstance()->getSysMinute() == 0)
+    // Weekly update for conquest (sunday at midnight)
+    static time_point lastConquestTally = tick - 1h;
+    static time_point lastConquestUpdate = tick - 1h;
+    if (CVanaTime::getInstance()->getJstWeekDay() == 1  && CVanaTime::getInstance()->getJstHour() == 0 && CVanaTime::getInstance()->getJstMinute() == 0)
     {
-        if (tick > (CVanaTime::getInstance()->lastConquestTally + 1h))
+        if (tick > (lastConquestTally + 1h))
         {
             conquest::UpdateWeekConquest();
-            CVanaTime::getInstance()->lastConquestTally = tick;
+            lastConquestTally = tick;
         }
     }
-    // hourly conquest update
-    else if (CVanaTime::getInstance()->getSysMinute() == 0)
+    // Hourly conquest update
+    else if (CVanaTime::getInstance()->getJstMinute() == 0)
     {
-        if (tick > (CVanaTime::getInstance()->lastConquestUpdate + 1h))
+        if (tick > (lastConquestUpdate + 1h))
         {
             conquest::UpdateConquestSystem();
-            CVanaTime::getInstance()->lastConquestUpdate = tick;
+            lastConquestUpdate = tick;
         }
     }
 
+    // Vanadiel Hour
+    static time_point lastVHourlyUpdate = tick - 4800ms;
     if (CVanaTime::getInstance()->getMinute() == 0)
     {
-        if (tick > (CVanaTime::getInstance()->lastVHourlyUpdate + 4800ms))
+        if (tick > (lastVHourlyUpdate + 4800ms))
         {
 			zoneutils::ForEachZone([](CZone* PZone)
             {
@@ -72,24 +77,40 @@ int32 time_server(time_point tick,CTaskMgr::CTask* PTask)
 				});
 			});
 
-            CVanaTime::getInstance()->lastVHourlyUpdate = tick;
+            lastVHourlyUpdate = tick;
         }
 
     }
 
-    //Midnight
-    if (CVanaTime::getInstance()->getSysHour() == 0 && CVanaTime::getInstance()->getSysMinute() == 0)
+    // JST Midnight
+    static time_point lastTickedJstMidnight = tick - 1h;
+    if (CVanaTime::getInstance()->getJstHour() == 0 && CVanaTime::getInstance()->getJstMinute() == 0)
     {
-        if (tick > (CVanaTime::getInstance()->lastMidnight + 1h))
+        if (tick > (lastTickedJstMidnight + 1h))
         {
+            roeutils::CycleDailyRecords();
             guildutils::UpdateGuildPointsPattern();
-            CVanaTime::getInstance()->lastMidnight = tick;
+            lastTickedJstMidnight = tick;
         }
     }
 
+    // 4-hour RoE Timed blocks
+    static time_point lastTickedRoeBlock = tick - 1h;
+    if (CVanaTime::getInstance()->getJstHour() % 4 == 0 && CVanaTime::getInstance()->getJstMinute() == 0)
+    {
+        if (tick > (lastTickedRoeBlock + 1h))
+        {
+            roeutils::CycleTimedRecords();
+            lastTickedRoeBlock = tick;
+        }
+    }
+
+    // Vanadiel Day
+    static time_point lastVDailyUpdate = tick - 4800ms;
     if (CVanaTime::getInstance()->getHour() == 0 && CVanaTime::getInstance()->getMinute() == 0)
     {
-        if (tick > (CVanaTime::getInstance()->lastVDailyUpdate + 4800ms))
+        TracyZoneScoped;
+        if (tick > (lastVDailyUpdate + 4800ms))
         {
 			zoneutils::ForEachZone([](CZone* PZone)
 			{
@@ -103,12 +124,13 @@ int32 time_server(time_point tick,CTaskMgr::CTask* PTask)
             guildutils::UpdateGuildsStock();
             zoneutils::SavePlayTime();
 
-            CVanaTime::getInstance()->lastVDailyUpdate = tick;
+            lastVDailyUpdate = tick;
         }
     }
 
     if (VanadielTOTD != TIME_NONE)
     {
+        TracyZoneScoped;
         zoneutils::TOTDChange(VanadielTOTD);
 
         if ((VanadielTOTD == TIME_DAY) || (VanadielTOTD == TIME_DUSK) || (VanadielTOTD == TIME_NIGHT))
@@ -127,6 +149,8 @@ int32 time_server(time_point tick,CTaskMgr::CTask* PTask)
     CTriggerHandler::getInstance()->triggerTimer();
     CTransportHandler::getInstance()->TransportTimer();
 
-	instanceutils::CheckInstance();
+    instanceutils::CheckInstance();
+
+    TracyFrameMark;
     return 0;
 }