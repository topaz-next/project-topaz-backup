@@ -126,6 +126,64 @@ uint32 CVanaTime::getSysYearDay()
     return ltm->tm_yday;
 }
 
+uint32 CVanaTime::getJstHour()
+{
+    auto now = time(nullptr) + JST_OFFSET;
+    tm *jtm = gmtime(&now);
+
+    return jtm->tm_hour;
+}
+
+uint32 CVanaTime::getJstMinute()
+{
+    auto now = time(nullptr) + JST_OFFSET;
+    tm *jtm = gmtime(&now);
+
+    return jtm->tm_min;
+}
+
+uint32 CVanaTime::getJstSecond()
+{
+    auto now = time(nullptr) + JST_OFFSET;
+    tm *jtm = gmtime(&now);
+
+    return jtm->tm_sec;
+}
+
+uint32 CVanaTime::getJstWeekDay()
+{
+    auto now = time(nullptr) + JST_OFFSET;
+    tm *jtm = gmtime(&now);
+
+    return jtm->tm_wday;
+}
+
+uint32 CVanaTime::getJstDayOfMonth()
+{
+    auto now = time(nullptr) + JST_OFFSET;
+    tm *jtm = gmtime(&now);
+
+    return jtm->tm_mday;
+}
+
+uint32 CVanaTime::getJstYearDay()
+{
+    auto now = time(nullptr) + JST_OFFSET;
+    tm *jtm = gmtime(&now);
+
+    return jtm->tm_yday;
+}
+
+uint32 CVanaTime::getJstMidnight()
+{
+    auto now = time(nullptr) + JST_OFFSET;
+    tm* jst = gmtime(&now);
+    jst->tm_hour = 0;
+    jst->tm_min = 0;
+    jst->tm_sec = 0;
+    return static_cast<uint32>(timegm(jst) - JST_OFFSET + (60 * 60 * 24));     // Unix timestamp of the upcoming JST midnight
+}
+
 uint32 CVanaTime::getVanaTime()
 {
     //all functions/variables for in game time should be derived from this
@@ -210,13 +268,13 @@ TIMETYPE CVanaTime::SyncTime()
         lastTickedHour = m_vHour;
         switch (m_vHour)
         {
-            case  0: m_TimeType = TIME_NIGHT;   return TIME_MIDNIGHT;
-            case  4: m_TimeType = TIME_NEWDAY;  return TIME_NEWDAY;
-            case  6: m_TimeType = TIME_DAWN;    return TIME_DAWN;
-            case  7: m_TimeType = TIME_DAY;     return TIME_DAY;
-            case 17: m_TimeType = TIME_DUSK;    return TIME_DUSK;
-            case 18: m_TimeType = TIME_EVENING; return TIME_EVENING;
-            case 20: m_TimeType = TIME_NIGHT;   return TIME_NIGHT;
+            case  0: m_TimeType = TIME_MIDNIGHT; return TIME_MIDNIGHT;
+            case  4: m_TimeType = TIME_NEWDAY;   return TIME_NEWDAY;
+            case  6: m_TimeType = TIME_DAWN;     return TIME_DAWN;
+            case  7: m_TimeType = TIME_DAY;      return TIME_DAY;
+            case 17: m_TimeType = TIME_DUSK;     return TIME_DUSK;
+            case 18: m_TimeType = TIME_EVENING;  return TIME_EVENING;
+            case 20: m_TimeType = TIME_NIGHT;    return TIME_NIGHT;
         }
     }
     return TIME_NONE;