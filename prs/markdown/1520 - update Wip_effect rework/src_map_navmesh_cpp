@@ -198,6 +198,7 @@ void CNavMesh::unload()
 
 std::vector<position_t> CNavMesh::findPath(const position_t& start, const position_t& end)
 {
+    TracyZoneScoped;
     std::vector<position_t> ret;
     dtStatus status;
 
@@ -297,6 +298,7 @@ std::vector<position_t> CNavMesh::findPath(const position_t& start, const positi
 
 std::pair<int16, position_t> CNavMesh::findRandomPosition(const position_t& start, float maxRadius)
 {
+    TracyZoneScoped;
     dtStatus status;
 
     float spos[3];
@@ -354,6 +356,7 @@ bool CNavMesh::inWater(const position_t& point)
 
 bool CNavMesh::validPosition(const position_t& position)
 {
+    TracyZoneScoped;
     float spos[3];
     CNavMesh::ToDetourPos(&position, spos);
 
@@ -382,8 +385,13 @@ bool CNavMesh::validPosition(const position_t& position)
 
 bool CNavMesh::raycast(const position_t& start, const position_t& end)
 {
+    TracyZoneScoped;
+
     if (start.x == end.x && start.y == end.y && start.z == end.z)
+    {
         return true;
+    }
+
     dtStatus status;
 
     float spos[3];
@@ -397,34 +405,82 @@ bool CNavMesh::raycast(const position_t& start, const position_t& end)
     polyPickExt[1] = 60;
     polyPickExt[2] = 30;
 
-    float snearest[3];
-
     dtQueryFilter filter;
     filter.setIncludeFlags(0xffff);
     filter.setExcludeFlags(0);
 
     dtPolyRef startRef;
+    float snearest[3];
 
     status = m_navMeshQuery.findNearestPoly(spos, polyPickExt, &filter, &startRef, snearest);
 
     if (dtStatusFailed(status))
     {
-        ShowNavError("CNavMesh::raycastPoint start point invalid (%f, %f, %f) (%u)\n", spos[0], spos[1], spos[2], m_zoneID);
+        ShowNavError("CNavMesh::raycast start point invalid (%f, %f, %f) (%u)\n", spos[0], spos[1], spos[2], m_zoneID);
         outputError(status);
         return true;
     }
 
     if (!m_navMesh->isValidPolyRef(startRef))
     {
-        ShowNavError("CNavMesh::raycastPoint startRef is invalid (%f, %f, %f) (%u)\n", start.x, start.y, start.z, m_zoneID);
+        ShowNavError("CNavMesh::raycast startRef is invalid (%f, %f, %f) (%u)\n", start.x, start.y, start.z, m_zoneID);
+        return true;
+    }
+
+    dtPolyRef endRef;
+    float enearest[3];
+
+    status = m_navMeshQuery.findNearestPoly(epos, polyPickExt, &filter, &endRef, enearest);
+
+    if (dtStatusFailed(status))
+    {
+        ShowNavError("CNavMesh::raycast end point invalid (%f, %f, %f) (%u)\n", epos[0], epos[1], epos[2], m_zoneID);
+        outputError(status);
+        return true;
+    }
+
+    if (!m_navMesh->isValidPolyRef(endRef))
+    {
+        ShowNavError("CNavMesh::raycast endRef is invalid (%f, %f, %f) (%u)\n", end.x, end.y, end.z, m_zoneID);
         return true;
     }
 
+    float distanceToWall = 0.0f;
+    float hitPos[3];
+    float hitNormal[3];
+
+    status = m_navMeshQuery.findDistanceToWall(endRef, enearest, 5.0f, &filter, &distanceToWall, hitPos, hitNormal);
+
+    if (dtStatusFailed(status))
+    {
+        ShowNavError("CNavMesh::raycast findDistanceToWall failed (%f, %f, %f) (%u)\n", epos[0], epos[1], epos[2], m_zoneID);
+        outputError(status);
+        return true;
+    }
+
+    // There is a tiny strip of walkable map at the very edge of walls that
+    // a player can use, but is not part of the navmesh. For a point to be
+    // raycasted to - it needs to be on the navmesh. This will check to
+    // see if the player is "off-mesh" and raycast to the nearest "on-mesh"
+    // point instead. distanceToWall will be 0.0f if the player is "off-mesh".
+    if (distanceToWall < 0.01f)
+    {
+        // Overwrite epos with closest valid point
+        status = m_navMeshQuery.closestPointOnPolyBoundary(startRef, epos, epos);
+
+        if (dtStatusFailed(status))
+        {
+            ShowNavError("CNavMesh::raycast closestPointOnPolyBoundary failed (%u)\n", m_zoneID);
+            outputError(status);
+            return true;
+        }
+    }
+
     status = m_navMeshQuery.raycast(startRef, spos, epos, &filter, 0, &m_hit);
 
     if (dtStatusFailed(status))
     {
-        ShowNavError("CNavMesh::raycastPoint raycast failed (%f, %f, %f)->(%f, %f, %f) (%u)\n", spos[0], spos[1], spos[2], epos[0], epos[1], epos[2], m_zoneID);
+        ShowNavError("CNavMesh::raycast raycast failed (%f, %f, %f)->(%f, %f, %f) (%u)\n", spos[0], spos[1], spos[2], epos[0], epos[1], epos[2], m_zoneID);
         outputError(status);
         return true;
     }