@@ -29,6 +29,7 @@ along with this program.  If not, see http://www.gnu.org/licenses/
 #include <deque>
 #include <mutex>
 #include <bitset>
+#include <unordered_map>
 
 #include "battleentity.h"
 #include "petentity.h"
@@ -141,6 +142,13 @@ struct GearSetMod_t
     uint16	modValue;
 };
 
+enum CHAR_SUBSTATE
+{
+    SUBSTATE_NONE = 0,
+    SUBSTATE_IN_CS,
+    SUBSTATE_LAST,
+};
+
 /************************************************************************
 *                                                                       *
 *                                                                       *
@@ -177,6 +185,7 @@ class CCharEntity : public CBattleEntity
 
     nameflags_t				nameflags;						// флаги перед именем персонажа
     nameflags_t             menuConfigFlags;                // These flags are used for MenuConfig packets. Some nameflags values are duplicated.
+    uint32                  lastOnline {0};                 // UTC Unix Timestamp of the last time char zoned or logged out
     bool                    isNewPlayer();                  // Checks if new player bit is unset.
 
     profile_t				profile;						// профиль персонажа (все, что связывает города и персонажа)
@@ -201,6 +210,8 @@ class CCharEntity : public CBattleEntity
     uint8					m_WeaponSkills[32];
     questlog_t				m_questLog[MAX_QUESTAREA];		// список всех квестов
     missionlog_t			m_missionLog[MAX_MISSIONAREA];	// список миссий
+    eminencelog_t           m_eminenceLog;                  // Record of Eminence log
+    eminencecache_t         m_eminenceCache;                // Caching data for Eminence lookups
     assaultlog_t			m_assaultLog;					// список assault миссий
     campaignlog_t			m_campaignLog;					// список campaign миссий
     uint32					m_lastBcnmTimePrompt;			// the last message prompt in seconds
@@ -310,13 +321,17 @@ class CCharEntity : public CBattleEntity
     bool              m_EffectsChanged;
     time_point        m_LastSynthTime;
 
+    CHAR_SUBSTATE     m_Substate;
+
     int16 addTP(int16 tp) override;
     int32 addHP(int32 hp) override;
     int32 addMP(int32 mp) override;
 
     std::vector<GearSetMod_t> m_GearSetMods;		// The list of gear set mods currently applied to the character.
     std::vector<AuctionHistory_t> m_ah_history;		// AH history list (in the future consider using UContainer)
 
+    std::unordered_map<uint16, uint32> m_PacketRecievedTimestamps;
+
     void SetPlayTime(uint32 playTime);				// Set playtime
     uint32 GetPlayTime(bool needUpdate = true);		// Get playtime
 