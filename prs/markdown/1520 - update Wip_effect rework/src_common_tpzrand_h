@@ -18,14 +18,13 @@ class tpzrand
         mt().seed(seq);
     }
 
-    /*Generates a random number in the half-open interval [min, max)
-    @param min
-    @param max
-    @returns result
-    */
+    // Generates a random number in the half-open interval [min, max)
+    // @param min
+    // @param max
+    // @returns result
     template <typename T>
     static inline typename std::enable_if<std::is_integral<T>::value, T>::type
-        GetRandomNumber(T min, T max)
+    GetRandomNumber(T min, T max)
     {
         if (min == max - 1 || max == min)
         {
@@ -37,7 +36,7 @@ class tpzrand
 
     template<typename T>
     static inline typename std::enable_if<std::is_floating_point<T>::value, T>::type
-        GetRandomNumber(T min, T max)
+    GetRandomNumber(T min, T max)
     {
         if (min == max)
         {
@@ -47,14 +46,39 @@ class tpzrand
         return dist(mt());
     }
 
-    /*Generates a random number in the half-open interval [0, max)
-    @param min
-    @param max
-    @returns result
-    */
+    // Generates a random number in the half-open interval [0, max)
+    // @param min
+    // @param max
+    // @returns result
     template <typename T>
     static inline T GetRandomNumber(T max)
     {
         return GetRandomNumber<T>(0, max);
     }
+
+    // Gets a random element from the given stl-like container (container must have members: at() and size()).
+    // @param container
+    // @returns result
+    template <typename T> static inline typename T::value_type GetRandomElement(T* container)
+    {
+        // NOTE: the specialisation for integral types uses: dist(min, max - 1), so no need to offset container->size()
+        return container->at(GetRandomNumber<std::size_t>(0U, container->size()));
+    }
+
+    // Gets a random element from the given stl-like container (container must have members: at() and size()).
+    // @param container
+    // @returns result
+    template <typename T> static inline typename T::value_type GetRandomElement(T& container)
+    {
+        return GetRandomElement(&container);
+    }
+
+    // Gets a random element from the given initializer_list.
+    // @param initializer_list
+    // @returns result
+    template <typename T> static inline T GetRandomElement(std::initializer_list<T> list)
+    {
+        std::vector<T> container(list);
+        return GetRandomElement(container);
+    }
 };