@@ -13,99 +13,82 @@ on:
       - 'feature/**'
 
 jobs:
-  Linux_Build_32bit:
+  Linux_Build_Clang_64bit:
     runs-on: ubuntu-18.04
     steps:
     - uses: actions/checkout@v1
       with:
-        fetch-depth: 1
-    - name: Install Dependencies
-      run: |
-        sudo apt-get update
-        sudo apt-get install -y software-properties-common g++-8 luajit-5.1-dev libzmq3-dev luarocks python3.7
-    - name: Build C++
-      run: |
-        g++ --version
-        sh autogen.sh  "CFLAGS=-m32" "CXXFLAGS=-m32" "LDFLAGS=-m32"
-        ./configure
-        make -j $(nproc)
-
-  Linux_Build_32bit_CMake:
-    runs-on: ubuntu-18.04
-    steps:
-    - uses: actions/checkout@v1
-      with:
-        fetch-depth: 1
+        fetch-depth: 0
     - name: Install Dependencies
       run: |
         sudo apt-get update
-        sudo apt-get install -y software-properties-common g++-8 luajit-5.1-dev libzmq3-dev luarocks python3.7 cmake
-    - name: Build C++
+        sudo apt-get install -y software-properties-common cmake libmariadb-dev-compat libluajit-5.1-dev libzmq3-dev zlib1g-dev libssl-dev
+    - name: Configure CMake
       run: |
-        g++ --version
+        export CC=/usr/bin/clang
+        export CXX=/usr/bin/clang++
         cmake .
+    - name: Build
+      run: |
         make -j $(nproc)
 
-  Linux_Build_64bit:
+  Linux_Build_GCC_64bit:
     runs-on: ubuntu-18.04
     steps:
     - uses: actions/checkout@v1
       with:
-        fetch-depth: 1
+        fetch-depth: 0
     - name: Install Dependencies
       run: |
         sudo apt-get update
-        sudo apt-get install -y software-properties-common g++-8 luajit-5.1-dev libzmq3-dev luarocks python3.7
-    - name: Build C++
+        sudo apt-get install -y software-properties-common cmake libmariadb-dev-compat libluajit-5.1-dev libzmq3-dev zlib1g-dev libssl-dev
+    - name: Configure CMake
+      run: |
+        export CC=/usr/bin/gcc
+        export CXX=/usr/bin/g++
+        CFLAGS=-m64 CXXFLAGS=-m64 LDFLAGS=-m64 cmake .
+    - name: Build
       run: |
-        g++ --version
-        sh autogen.sh
-        ./configure "CFLAGS=-m64" "CXXFLAGS=-m64" "LDFLAGS=-m64"
         make -j $(nproc)
 
-  Windows_Build_32bit:
+  Windows_Build_2019_32bit:
     runs-on: windows-2019
     env:
       MSBUILD_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\
     steps:
       - uses: actions/checkout@v1
         with:
-          fetch-depth: 1
-      - name: Build Solution
+          fetch-depth: 0
+      - name: Configure CMake
         shell: cmd
+        # windows-2019 CI machine has MySQL installed, need to specific our location by hand
         run: |
-          "%MSBUILD_PATH%\MSBuild.exe" win32/topaz.sln /property:Platform=Win32
-
-  Windows_Build_32bit_CMake:
-    runs-on: windows-2019
-    env:
-      MSBUILD_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\
-    steps:
-      - uses: actions/checkout@v1
-        with:
-          fetch-depth: 1
-      - name: Build Solution
+          cmake -A Win32 . -DMYSQL_INCLUDE_DIR='%CD%/ext/include/mysql' -DMYSQL_LIBRARY='%CD%/ext/lib/libmariadb.lib'
+      - name: Build
         shell: cmd
         run: |
-          cmake . -G "Visual Studio 16 2019"
-          "%MSBUILD_PATH%\MSBuild.exe" topaz.sln
+          cmake --build .
 
-  Windows_Build_64bit:
+  Windows_Build_2019_64bit:
     runs-on: windows-2019
     env:
       MSBUILD_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\
     steps:
       - uses: actions/checkout@v1
         with:
-          fetch-depth: 1
-      - name: Build Solution
+          fetch-depth: 0
+      - name: Configure CMake
         shell: cmd
+        # windows-2019 CI machine has MySQL installed, need to specific our location by hand
         run: |
-          "%MSBUILD_PATH%\MSBuild.exe" win32/topaz.sln /property:Platform=x64
+          cmake -A x64 . -DMYSQL_INCLUDE_DIR='%CD%/ext/include/mysql' -DMYSQL_LIBRARY='%CD%/ext/lib64/libmariadb64.lib'
+      - name: Build
+        shell: cmd
+        run: |
+          cmake --build .
 
   Style_Checks:
     runs-on: ubuntu-20.04
-    if: github.event_name == 'pull_request'
     steps:
     - uses: actions/checkout@v1
       with:
@@ -142,10 +125,10 @@ jobs:
         fi
 
   Full_Startup_Checks:
-    runs-on: ubuntu-18.04
+    runs-on: ubuntu-20.04
     services:
       mysql:
-        image: mysql:5.6
+        image: mariadb
         env:
           MYSQL_DATABASE: tpzdb
           MYSQL_ROOT_PASSWORD: root
@@ -155,16 +138,16 @@ jobs:
     steps:
     - uses: actions/checkout@v1
       with:
-        fetch-depth: 1
+        fetch-depth: 0
     - name: Install Dependencies
       run: |
         sudo apt-get update
-        sudo apt-get install -y software-properties-common mariadb-server-10.1 libmariadb-dev-compat libluajit-5.1-dev libzmq3-dev autoconf pkg-config zlib1g-dev libssl-dev
+        sudo apt-get install -y software-properties-common cmake mariadb-server-10.3 mariadb-client-10.3 libmariadb-dev-compat libluajit-5.1-dev libzmq3-dev zlib1g-dev libssl-dev luarocks python3.7
+    - name: Configure CMake
+      run: |
+        cmake .
     - name: Build Binaies
       run: |
-        g++ --version
-        sh autogen.sh
-        ./configure "CFLAGS=-m64" "CXXFLAGS=-m64" "LDFLAGS=-m64"
         make -j $(nproc)
     - name: Verify MySQL connection from container
       run: |
@@ -181,8 +164,9 @@ jobs:
         cp conf/default/* conf/
     - name: Run services (2 mins)
       env:
-        MYSQL_HOST: mydb
+        MYSQL_HOST: mysql
       run: |
+        ls -l
         screen -d -m -S topaz_connect ./topaz_connect --log login-server.log
         screen -d -m -S topaz_game ./topaz_game --log map-server.log
         screen -d -m -S topaz_search ./topaz_search --log search-server.log
@@ -194,14 +178,14 @@ jobs:
         cat map-server.log
         cat search-server.log
 
-        if grep -q error login-server.log; then
+        if grep -qi "Error" login-server.log; then
             exit -1
         fi
 
-        if grep -q error map-server.log; then
+        if grep -qi "Error" map-server.log; then
             exit -1
         fi
 
-        if grep -q error search-server.log; then
+        if grep -qi "Error" search-server.log; then
             exit -1
         fi