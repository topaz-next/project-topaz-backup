@@ -1,6 +1,7 @@
 ï»¿#include "gambits_container.h"
 
 #include "../../ability.h"
+#include "../../enmity_container.h"
 #include "../../spell.h"
 #include "../../mobskill.h"
 #include "../../weapon_skill.h"
@@ -66,6 +67,11 @@ void CGambitsContainer::Tick(time_point tick)
 
     auto runPredicate = [&](Predicate_t& predicate) -> bool
     {
+        auto isValidMember = [&](CBattleEntity* PPartyTarget) -> bool
+        {
+            return PPartyTarget->isAlive() && POwner->loc.zone == PPartyTarget->loc.zone && distance(POwner->loc.p, PPartyTarget->loc.p) <= 15.0f;
+        };
+
         if (predicate.target == G_TARGET::SELF)
         {
             return CheckTrigger(POwner, predicate);
@@ -76,13 +82,6 @@ void CGambitsContainer::Tick(time_point tick)
         }
         else if (predicate.target == G_TARGET::PARTY)
         {
-            auto isValidMember = [&](CBattleEntity* PPartyTarget) -> bool
-            {
-                return PPartyTarget->isAlive() &&
-                    POwner->loc.zone == PPartyTarget->loc.zone &&
-                    distance(POwner->loc.p, PPartyTarget->loc.p) <= 15.0f;
-            };
-
             auto result = false;
             static_cast<CCharEntity*>(POwner->PMaster)->ForPartyWithTrusts([&](CBattleEntity* PMember)
             {
@@ -91,13 +90,75 @@ void CGambitsContainer::Tick(time_point tick)
                     result = true;
                 }
             });
-
             return result;
         }
         else if (predicate.target == G_TARGET::MASTER)
         {
             return CheckTrigger(POwner->PMaster, predicate);
         }
+        else if (predicate.target == G_TARGET::TANK)
+        {
+            auto result = false;
+            static_cast<CCharEntity*>(POwner->PMaster)->ForPartyWithTrusts([&](CBattleEntity* PMember)
+            {
+                if (isValidMember(PMember) && CheckTrigger(PMember, predicate) && (PMember->GetMJob() == JOB_PLD || PMember->GetMJob() == JOB_RUN))
+                {
+                    result = true;
+                }
+            });
+            return result;
+        }
+        else if (predicate.target == G_TARGET::MELEE)
+        {
+            auto result = false;
+            static_cast<CCharEntity*>(POwner->PMaster)->ForPartyWithTrusts([&](CBattleEntity* PMember)
+            {
+                if (isValidMember(PMember) && CheckTrigger(PMember, predicate) && melee_jobs.find(PMember->GetMJob()) != melee_jobs.end())
+                {
+                    result = true;
+                }
+            });
+            return result;
+        }
+        else if (predicate.target == G_TARGET::RANGED)
+        {
+            auto result = false;
+            static_cast<CCharEntity*>(POwner->PMaster)->ForPartyWithTrusts([&](CBattleEntity* PMember)
+            {
+                if (isValidMember(PMember) && CheckTrigger(PMember, predicate) && (PMember->GetMJob() == JOB_RNG || PMember->GetMJob() == JOB_COR))
+                {
+                    result = true;
+                }
+            });
+            return result;
+        }
+        else if (predicate.target == G_TARGET::CASTER)
+        {
+            auto result = false;
+            static_cast<CCharEntity*>(POwner->PMaster)->ForPartyWithTrusts([&](CBattleEntity* PMember)
+            {
+                if (isValidMember(PMember) && CheckTrigger(PMember, predicate) && caster_jobs.find(PMember->GetMJob()) != caster_jobs.end())
+                {
+                    result = true;
+                }
+            });
+            return result;
+        }
+        else if (predicate.target == G_TARGET::TOP_ENMITY)
+        {
+            auto result = false;
+            if (auto PMob = dynamic_cast<CMobEntity*>(POwner->GetBattleTarget()))
+            {
+                static_cast<CCharEntity*>(POwner->PMaster)->ForPartyWithTrusts([&](CBattleEntity* PMember)
+                {
+                    if (isValidMember(PMember) && CheckTrigger(PMember, predicate) && PMob->PEnmityContainer->GetHighestEnmity() == PMember)
+                    {
+                        result = true;
+                    }
+                });
+            }
+            return result;
+        }
 
         // Fallthrough
         return false;
@@ -124,6 +185,11 @@ void CGambitsContainer::Tick(time_point tick)
             }
             if (!all_predicates_true) { break; }
 
+            auto isValidMember = [this](CBattleEntity* PSettableTarget, CBattleEntity* PPartyTarget)
+            {
+                return !PSettableTarget && PPartyTarget->isAlive() && POwner->loc.zone == PPartyTarget->loc.zone && distance(POwner->loc.p, PPartyTarget->loc.p) <= 15.0f;
+            };
+
             // TODO: This whole section is messy and bonkers
             // Try and extract target out the first predicate
             CBattleEntity* target = nullptr;
@@ -138,16 +204,9 @@ void CGambitsContainer::Tick(time_point tick)
             }
             else if (gambit.predicates[0].target == G_TARGET::PARTY)
             {
-                auto isValidMember = [&](CBattleEntity* PPartyTarget)
-                {
-                    return !target && PPartyTarget->isAlive() &&
-                        POwner->loc.zone == PPartyTarget->loc.zone &&
-                        distance(POwner->loc.p, PPartyTarget->loc.p) <= 15.0f;
-                };
-
                 static_cast<CCharEntity*>(POwner->PMaster)->ForPartyWithTrusts([&](CBattleEntity* PMember)
                 {
-                    if (isValidMember(PMember) && CheckTrigger(PMember, gambit.predicates[0]))
+                    if (isValidMember(target, PMember) && CheckTrigger(PMember, gambit.predicates[0]))
                     {
                         target = PMember;
                     }
@@ -159,7 +218,56 @@ void CGambitsContainer::Tick(time_point tick)
             }
             else if (gambit.predicates[0].target == G_TARGET::TANK)
             {
-                // TODO
+                static_cast<CCharEntity*>(POwner->PMaster)->ForPartyWithTrusts([&](CBattleEntity* PMember)
+                {
+                    if (isValidMember(target, PMember) && CheckTrigger(PMember, gambit.predicates[0]) && (PMember->GetMJob() == JOB_PLD || PMember->GetMJob() == JOB_RUN))
+                    {
+                        target = PMember;
+                    }
+                });
+            }
+            else if (gambit.predicates[0].target == G_TARGET::MELEE)
+            {
+                static_cast<CCharEntity*>(POwner->PMaster)->ForPartyWithTrusts([&](CBattleEntity* PMember)
+                {
+                    if (isValidMember(target, PMember) && CheckTrigger(PMember, gambit.predicates[0]) && melee_jobs.find(PMember->GetMJob()) != melee_jobs.end())
+                    {
+                        target = PMember;
+                    }
+                });
+            }
+            else if (gambit.predicates[0].target == G_TARGET::RANGED)
+            {
+                static_cast<CCharEntity*>(POwner->PMaster)->ForPartyWithTrusts([&](CBattleEntity* PMember)
+                {
+                    if (isValidMember(target, PMember) && CheckTrigger(PMember, gambit.predicates[0]) && (PMember->GetMJob() == JOB_RNG || PMember->GetMJob() == JOB_COR))
+                    {
+                        target = PMember;
+                    }
+                });
+            }
+            else if (gambit.predicates[0].target == G_TARGET::CASTER)
+            {
+                static_cast<CCharEntity*>(POwner->PMaster)->ForPartyWithTrusts([&](CBattleEntity* PMember)
+                {
+                    if (isValidMember(target, PMember) && CheckTrigger(PMember, gambit.predicates[0]) && caster_jobs.find(PMember->GetMJob()) != caster_jobs.end())
+                    {
+                        target = PMember;
+                    }
+                });
+            }
+            else if (gambit.predicates[0].target == G_TARGET::TOP_ENMITY)
+            {
+                if (auto PMob = dynamic_cast<CMobEntity*>(POwner->GetBattleTarget()))
+                {
+                    static_cast<CCharEntity*>(POwner->PMaster)->ForPartyWithTrusts([&](CBattleEntity* PMember)
+                    {
+                        if (isValidMember(target, PMember) && CheckTrigger(PMember, gambit.predicates[0]) && PMob->PEnmityContainer->GetHighestEnmity() == PMember)
+                        {
+                            target = PMember;
+                        }
+                    });
+                }
             }
 
             if (!target)