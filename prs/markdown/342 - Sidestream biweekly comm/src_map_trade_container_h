@@ -25,13 +25,13 @@
 #include "../common/cbasetypes.h"
 #include <vector>
 
-#define CONTAINER_SIZE			17	
-#define TRADE_CONTAINER_SIZE	 8
+#define CONTAINER_SIZE          17
+#define TRADE_CONTAINER_SIZE     8
 
 /************************************************************************
-*																		*
-*																		*
-*																		*
+*                                                                       *
+*                                                                       *
+*                                                                       *
 ************************************************************************/
 
 enum CRAFT_TYPE
@@ -46,45 +46,45 @@ class CTradeContainer
 {
 public:
 
-	CTradeContainer();
+    CTradeContainer();
 
-	uint8	getType();
+    uint8   getType();
     uint8   getCraftType();
-	uint8	getItemsCount();
-	uint8	getSlotCount();									// количество занятых ячеек
-	uint32	getTotalQuantity();								// общее количество предметов (gil считаются за 1)
-	CItem*	getItem(uint8 slotID);
-	uint16	getItemID(uint8 slotID);						
-	uint8	getInvSlotID(uint8 slotID);
-	uint32	getQuantity(uint8 slotID);						// количество предметов в ячейке
-	uint8	getConfirmedStatus(uint8 slotID);
-	uint32	getItemQuantity(uint16 itemID);					// количество предметов одного типа
+    uint8   getItemsCount();
+    uint8   getSlotCount();                                 // количество занятых ячеек
+    uint32  getTotalQuantity();                             // общее количество предметов (gil считаются за 1)
+    CItem*  getItem(uint8 slotID);
+    uint16  getItemID(uint8 slotID);
+    uint8   getInvSlotID(uint8 slotID);
+    uint32  getQuantity(uint8 slotID);                      // количество предметов в ячейке
+    uint8   getConfirmedStatus(uint8 slotID);
+    uint32  getItemQuantity(uint16 itemID);                 // количество предметов одного типа
     uint8   getSize();
 
-	void	setType(uint8 type);
+    void    setType(uint8 type);
     void    setCraftType(uint8 craftType);
-	void	setItemsCount(uint8 count);
-	void	setItem(uint8 slotID, CItem* item);
-	void	setItemID(uint8 slotID, uint16 itemID);
-	void	setInvSlotID(uint8 slotID, uint8 invSlotID);
-	void	setQuantity(uint8 slotID, uint32 quantity);
-	bool	setConfirmedStatus(uint8 slotID, uint8 amount);
-	void	setItem(uint8 slotID, uint16 itemID, uint8 invSlotID, uint32 quantity, CItem* item = nullptr);
+    void    setItemsCount(uint8 count);
+    void    setItem(uint8 slotID, CItem* item);
+    void    setItemID(uint8 slotID, uint16 itemID);
+    void    setInvSlotID(uint8 slotID, uint8 invSlotID);
+    void    setQuantity(uint8 slotID, uint32 quantity);
+    bool    setConfirmedStatus(uint8 slotID, uint32 amount);
+    void    setItem(uint8 slotID, uint16 itemID, uint8 invSlotID, uint32 quantity, CItem* item = nullptr);
     void    setSize(uint8 size);
 
-	void	Clean();										// отчищаем контейнер
+    void    Clean();                                        // отчищаем контейнер
 
 private:
 
-	uint8	m_type;											// тип контейнера (тип кристалла, нация магазина и т.д.)
+    uint8   m_type;                                         // тип контейнера (тип кристалла, нация магазина и т.д.)
     uint8   m_craftType;                                    // The craft synthesis type (CRAFT_TYPE)
-	uint8	m_ItemsCount;									// количество предметов в контейнере (устанавливаем самостоятельно)
+    uint8   m_ItemsCount;                                   // количество предметов в контейнере (устанавливаем самостоятельно)
 
-	std::vector<CItem*>     m_PItem;
-    std::vector<uint8>	    m_slotID;
-    std::vector<uint16>	    m_itemID;
-    std::vector<uint32>	    m_quantity;
-    std::vector<uint8>	    m_confirmed;
+    std::vector<CItem*>     m_PItem;
+    std::vector<uint8>      m_slotID;
+    std::vector<uint16>     m_itemID;
+    std::vector<uint32>     m_quantity;
+    std::vector<uint32>     m_confirmed;
 };
 
 #endif
\ No newline at end of file