@@ -4,28 +4,43 @@ require("scripts/globals/status")
 require("scripts/globals/msg")
 
 function getSummoningSkillOverCap(avatar)
-    local summoner = avatar:getMaster()
-    local summoningSkill = summoner:getSkillLevel(tpz.skill.SUMMONING_MAGIC)
-    local maxSkill = summoner:getMaxSkillLevel(avatar:getMainLvl(), tpz.job.SMN, tpz.skill.SUMMONING_MAGIC)
+local summoner = avatar:getMaster()
+local summoningSkill = summoner:getSkillLevel(tpz.skill.SUMMONING_MAGIC)
+local maxSkill = summoner:getMaxSkillLevel(avatar:getMainLvl(), tpz.job.SMN, tpz.skill.SUMMONING_MAGIC)
+    
     return math.max(summoningSkill - maxSkill, 0)
 end
 
 function AvatarPhysicalMove(avatar, target, skill, numberofhits, accmod, dmgmod, dmgmodsubsequent, tpeffect, mtp100, mtp200, mtp300)
-    local returninfo = {}
-
-    local acc = avatar:getACC() + utils.clamp(getSummoningSkillOverCap(avatar), 0, 200)
-    local eva = target:getEVA()
-    local dmg = avatar:getWeaponDmg()
-    local minFstr, maxFstr = avatarFSTR(avatar:getStat(tpz.mod.STR), target:getStat(tpz.mod.VIT))
-    local ratio = avatar:getStat(tpz.mod.ATT) / target:getStat(tpz.mod.DEF)
-
-    -- Note: Avatars do not have any level correction. This is why they are so good on Wyrms! // https://kegsay.livejournal.com/tag/smn!
-    local hitrate = utils.clamp(acc - eva, 20, 95)
+local returninfo = {}
+
+local acc = avatar:getACC() + utils.clamp(getSummoningSkillOverCap(avatar), 0, 200)
+local eva = target:getEVA()
+local dmg = avatar:getWeaponDmg()
+local minFstr, maxFstr = avatarFSTR(avatar:getStat(tpz.mod.STR), target:getStat(tpz.mod.VIT))
+local ratio = avatar:getStat(tpz.mod.ATT) / target:getStat(tpz.mod.DEF)
+local firstacc = acc + 100
+
+
+-- formula should be 75 + floor( (Accuracy - Evasion)รท2 ) - 2ร(dLVL)
+--  level correction does not apply .
+-- https://web.archive.org/web/20200905213200if_/https://kegsay.livejournal.com/tag/smn!
+local hitdiff = 0
+local hitrate = 75
+local firsthit = 0
+    
+hitdiff = hitrate + math.floor(acc + bonusacc - eva) 
+firsthit = hitrate + math.floor(firstacc + bonusacc - eva) 
+    
+hitrate = hitdiff / 100
+firsthit = firsthit / 100
+hitrate = utils.clamp(hitrate, 0.2, 0.95)
+firsthit = utils.clamp(firsthit, 0.2, 0.95)
 
     -- add on native crit hit rate (guesstimated, it actually follows an exponential curve)
-    local critrate = (avatar:getStat(tpz.mod.DEX) - target:getStat(tpz.mod.AGI)) * 0.005 -- assumes +0.5% crit rate per 1 dDEX
-    critrate = critrate + avatar:getMod(tpz.mod.CRITHITRATE) / 100
-    critrate = utils.clamp(critrate, 0.05, 0.2)
+local critrate = (avatar:getStat(tpz.mod.DEX) - target:getStat(tpz.mod.AGI)) * 0.005 -- assumes +0.5% crit rate per 1 dDEX
+critrate = critrate + avatar:getMod(tpz.mod.CRITHITRATE) / 100
+critrate = utils.clamp(critrate, 0.05, 0.2)
 
     -- Applying pDIF
     if ratio <= 1 then
@@ -46,12 +61,12 @@ function AvatarPhysicalMove(avatar, target, skill, numberofhits, accmod, dmgmod,
     end
 
     -- start the hits
-    local hitsdone = 1
-    local hitslanded = 0
-    local hitdmg = 0
-    local finaldmg = 0
+local hitsdone = 1
+local hitslanded = 0
+local hitdmg = 0
+local finaldmg = 0
 
-    if math.random() < hitrate then
+    if math.random() < firsthit then
         hitdmg = avatarHitDmg(dmg, minRatio, maxRatio, minFstr, maxFstr, critrate)
         finaldmg = finaldmg + hitdmg * dmgmod
         hitslanded = hitslanded + 1