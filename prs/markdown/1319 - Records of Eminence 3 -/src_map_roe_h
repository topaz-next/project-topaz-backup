@@ -47,14 +47,21 @@ enum ROE_EVENT
     ROE_SYNTHSUCCESS = 4,
     ROE_DMGTAKEN = 5,
     ROE_DMGDEALT = 6,
+    ROE_EXPGAIN = 7,
     ROE_NONE // End of enum marker and OOB checkpost. Do not move or remove, place any new types above.
 };
 
+typedef std::array<uint16, 6> RecordTimetable_D;
+typedef std::array<RecordTimetable_D, 7> RecordTimetable_W;
 struct RoeSystemData
 {
     bool RoeEnabled;
+    RecordTimetable_W TimedRecordTable;
     std::bitset<4096> ImplementedRecords;
     std::bitset<4096> RepeatableRecords;
+    std::bitset<4096> DailyRecords;
+    std::vector<uint16> DailyRecordIDs;
+    std::bitset<4096> TimedRecords;
     std::array<uint32, 4096> NotifyThresholds;
 };
 
@@ -74,19 +81,19 @@ enum class RoeDatagramPayload
 struct RoeDatagram
 {
     RoeDatagramPayload type;
-    std::string param;
+    std::string luaKey;
     union data {
         uint32 uinteger;
         CMobEntity* mobEntity;
         CItem* item;
     } data;
 
-    RoeDatagram(std::string param, uint32 id) : param{param}
+    RoeDatagram(std::string param, uint32 id) : luaKey{param}
     {
         this->type = RoeDatagramPayload::uinteger;
         this->data.uinteger = id;
     }
-    RoeDatagram(std::string param, CMobEntity* PMob) : param{param}
+    RoeDatagram(std::string param, CMobEntity* PMob) : luaKey{param}
     {
         this->type = RoeDatagramPayload::mob;
         this->data.mobEntity = PMob;
@@ -99,22 +106,30 @@ namespace roeutils
 {
 extern RoeSystemData RoeSystem;
 
-void init();
-int32 RegisterHandler(lua_State* L);
-int32 ParseRecords(lua_State* L);
+void   init();
+int32  ParseRecords(lua_State* L);
+int32  ParseTimedSchedule(lua_State* L);
 
-bool event(ROE_EVENT eventID, CCharEntity* PChar, RoeDatagramList payload);
-bool event(ROE_EVENT eventID, CCharEntity* PChar, RoeDatagram payload);
-bool event(ROE_EVENT eventID, CCharEntity* PChar);
+bool   event(ROE_EVENT eventID, CCharEntity* PChar, const RoeDatagramList& payload);
+bool   event(ROE_EVENT eventID, CCharEntity* PChar, const RoeDatagram& payload);
 
-void SetEminenceRecordCompletion(CCharEntity* PChar, uint16 recordID, bool newStatus);
-bool GetEminenceRecordCompletion(CCharEntity* PChar, uint16 recordID);
-bool AddEminenceRecord(CCharEntity* PChar, uint16 recordID);
-bool DelEminenceRecord(CCharEntity* PChar, uint16 recordID);
-bool HasEminenceRecord(CCharEntity* PChar, uint16 recordID);
-bool SetEminenceRecordProgress(CCharEntity* PChar, uint16 recordID, uint32 progress);
+void   SetEminenceRecordCompletion(CCharEntity* PChar, uint16 recordID, bool newStatus);
+bool   GetEminenceRecordCompletion(CCharEntity* PChar, uint16 recordID);
+bool   AddEminenceRecord(CCharEntity* PChar, uint16 recordID);
+bool   DelEminenceRecord(CCharEntity* PChar, uint16 recordID);
+bool   HasEminenceRecord(CCharEntity* PChar, uint16 recordID);
+bool   SetEminenceRecordProgress(CCharEntity* PChar, uint16 recordID, uint32 progress);
 uint32 GetEminenceRecordProgress(CCharEntity* PChar, uint16 recordID);
 
+void   onCharLoad(CCharEntity* PChar);
+
+void   ClearDailyRecords(CCharEntity* PChar);
+void   CycleDailyRecords();
+
+uint16 GetActiveTimedRecord();
+void   AddActiveTimedRecord(CCharEntity* PChar);
+void   CycleTimedRecords();
+
 } /* namespace roe */
 
 #endif /* SRC_MAP_ROE_H_ */