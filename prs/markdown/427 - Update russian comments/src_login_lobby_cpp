@@ -1,4 +1,4 @@
-﻿/*
+/*
 ===========================================================================
 
   Copyright (c) 2010-2015 Darkstar Dev Teams
@@ -35,12 +35,6 @@
 int32 login_lobbydata_fd;
 int32 login_lobbyview_fd;
 
-/************************************************************************
-*                                                                       *
-*                                                                       *
-*                                                                       *
-************************************************************************/
-
 int32 connect_client_lobbydata(int32 listenfd)
 {
     int32 fd = 0;
@@ -56,12 +50,6 @@ int32 connect_client_lobbydata(int32 listenfd)
     return -1;
 }
 
-/************************************************************************
-*                                                                       *
-*                                                                       *
-*                                                                       *
-************************************************************************/
-
 int32 lobbydata_parse(int32 fd)
 {
     login_session_data_t* sd = (login_session_data_t*)session[fd]->session_data;
@@ -125,7 +113,7 @@ int32 lobbydata_parse(int32 fd)
 
                 unsigned char CharList[2500];
                 memset(CharList, 0, sizeof(CharList));
-                //запись зарезервированных чисел
+                // Store the reserved numbers.
                 CharList[0] = 0xE0; CharList[1] = 0x08;
                 CharList[4] = 0x49; CharList[5] = 0x58; CharList[6] = 0x46; CharList[7] = 0x46; CharList[8] = 0x20;
 
@@ -176,8 +164,8 @@ int32 lobbydata_parse(int32 fd)
                 uList[0] = 0x03;
 
                 int i = 0;
-                //Считывание информации о конкректном персонаже
-                //Загрузка всей необходимой информации о персонаже из базы
+                // Read information about a specific character.
+                // Extract all the necessary information about the character from the database.
                 while (Sql_NextRow(SqlHandle) != SQL_NO_DATA)
                 {
                     char* strCharName = nullptr;
@@ -336,7 +324,7 @@ int32 lobbydata_parse(int32 fd)
 
                         memcpy(MainReservePacket, ReservePacket, ref<uint8>(ReservePacket, 0));
 
-                        // необходиму одалять сессию, необработанную игровым сервером
+                        // If the session was not processed by the game server, then it must be deleted.
                         Sql_Query(SqlHandle, "DELETE FROM accounts_sessions WHERE accid = %u and client_port = 0", sd->accid);
 
                         char session_key[sizeof(key3) * 2 + 1];
@@ -346,10 +334,10 @@ int32 lobbydata_parse(int32 fd)
 
                         if (Sql_Query(SqlHandle, fmtQuery, sd->accid, charid, session_key, ZoneIP, ZonePort, sd->client_addr, (uint8)session[sd->login_lobbyview_fd]->ver_mismatch) == SQL_ERROR)
                         {
-                            //отправляем клиенту сообщение об ошибке
+                            // Send error message to the client.
                             LOBBBY_ERROR_MESSAGE(ReservePacket);
-                            // устанавливаем код ошибки
-                            // Unable to connect to world server. Specified operation failed
+                            // Set the error code:
+                            //     Unable to connect to world server. Specified operation failed
                             ref<uint16>(ReservePacket, 32) = 305;
                             memcpy(MainReservePacket, ReservePacket, ref<uint8>(ReservePacket, 0));
                         }
@@ -368,8 +356,8 @@ int32 lobbydata_parse(int32 fd)
                 {
                     //either there is no character for this charid/accid, or there is no zone for this char's zone
                     LOBBBY_ERROR_MESSAGE(ReservePacket);
-                    // устанавливаем код ошибки
-                    // Unable to connect to world server. Specified operation failed
+                    // Set the error code:
+                    //     Unable to connect to world server. Specified operation failed
                     ref<uint16>(ReservePacket, 32) = 305;
                     memcpy(MainReservePacket, ReservePacket, ref<uint8>(ReservePacket, 0));
                 }
@@ -388,7 +376,7 @@ int32 lobbydata_parse(int32 fd)
 
                 if (SendBuffSize == 0x24)
                 {
-                    // выходим в случае ошибки без разрыва соединения
+                    // In the event of an error, exit without breaking the connection.
                     return -1;
                 }
 
@@ -426,12 +414,6 @@ int32 lobbydata_parse(int32 fd)
     return 0;
 };
 
-/************************************************************************
-*                                                                       *
-*                                                                       *
-*                                                                       *
-************************************************************************/
-
 int32 do_close_lobbydata(login_session_data_t *loginsd, int32 fd)
 {
     if (loginsd != nullptr)
@@ -455,12 +437,6 @@ int32 do_close_lobbydata(login_session_data_t *loginsd, int32 fd)
     return -1;
 }
 
-/************************************************************************
-*                                                                       *
-*                                                                       *
-*                                                                       *
-************************************************************************/
-
 int32 connect_client_lobbyview(int32 listenfd)
 {
     int32 fd = 0;
@@ -474,12 +450,6 @@ int32 connect_client_lobbyview(int32 listenfd)
     return -1;
 }
 
-/************************************************************************
-*                                                                       *
-*                                                                       *
-*                                                                       *
-************************************************************************/
-
 int32 lobbyview_parse(int32 fd)
 {
     login_session_data_t* sd = (login_session_data_t*)session[fd]->session_data;
@@ -580,11 +550,11 @@ int32 lobbyview_parse(int32 fd)
                     }
                 }
 
-                //Хеширование пакета, и запись значения Хеш функции в пакет
+                // Hash the packet data and then write the value of the hash into the packet.
                 unsigned char Hash[16];
                 md5(MainReservePacket, Hash, sendsize);
                 memcpy(MainReservePacket + 12, Hash, 16);
-                //Запись итогового пакета
+                // Finalize the packet.
                 session[fd]->wdata.assign((const char*)MainReservePacket, sendsize);
                 session[fd]->ver_mismatch = ver_mismatch;
                 RFIFOSKIP(fd, session[fd]->rdata.size());
@@ -610,8 +580,8 @@ int32 lobbyview_parse(int32 fd)
                 RFIFOSKIP(fd, session[fd]->rdata.size());
                 RFIFOFLUSH(fd);
 
-                //Выполнение удаления персонажа из основных таблиц
-                //Достаточно удалить значение из таблицы chars, все остальное сделает mysql-сервер
+                // Perform character deletion from the database. It is sufficient to remove the
+                // value from the `chars` table. The mysql server will handle the rest.
 
                 const char *pfmtQuery = "DELETE FROM chars WHERE charid = %i AND accid = %i";
                 Sql_Query(SqlHandle, pfmtQuery, CharID, sd->accid);
@@ -785,28 +755,16 @@ int32 lobbyview_parse(int32 fd)
     return 0;
 };
 
-/************************************************************************
-*                                                                       *
-*                                                                       *
-*                                                                       *
-************************************************************************/
-
 int32 do_close_lobbyview(login_session_data_t* sd, int32 fd)
 {
     ShowInfo(CL_WHITE"lobbyview_parse" CL_RESET": " CL_WHITE"%s" CL_RESET" shutdown the socket\n", sd->login);
     do_close_tcp(fd);
     return 0;
 }
 
-/************************************************************************
-*                                                                       *
-*                                                                       *
-*                                                                       *
-************************************************************************/
-
 int32 lobby_createchar(login_session_data_t *loginsd, int8 *buf)
 {
-    // инициализируем генератор случайных чисел
+    // Seed the random number generator.
     srand(clock());
     char_mini createchar;
 
@@ -873,12 +831,6 @@ int32 lobby_createchar(login_session_data_t *loginsd, int8 *buf)
     return 0;
 };
 
-/************************************************************************
-*                                                                       *
-*                                                                       *
-*                                                                       *
-************************************************************************/
-
 int32 lobby_createchar_save(uint32 accid, uint32 charid, char_mini* createchar)
 {
     const char* Query = "INSERT INTO chars(charid,accid,charname,pos_zone,nation) VALUES(%u,%u,'%s',%u,%u);";
@@ -907,9 +859,6 @@ int32 lobby_createchar_save(uint32 accid, uint32 charid, char_mini* createchar)
         return -1;
     }
 
-
-
-
     // people reported char creation errors, here is a fix.
 
     Query = "INSERT INTO char_exp(charid) VALUES(%u) \
@@ -936,17 +885,12 @@ int32 lobby_createchar_save(uint32 accid, uint32 charid, char_mini* createchar)
             ON DUPLICATE KEY UPDATE charid = charid;";
     if (Sql_Query(SqlHandle, Query, charid, createchar->m_mjob) == SQL_ERROR) return -1;
 
-
-
     //hot fix
     Query = "DELETE FROM char_inventory WHERE charid = %u";
     if (Sql_Query(SqlHandle, Query, charid) == SQL_ERROR) return -1;
 
     Query = "INSERT INTO char_inventory(charid) VALUES(%u);";
     if (Sql_Query(SqlHandle, Query, charid, createchar->m_mjob) == SQL_ERROR) return -1;
 
-
-
-
     return 0;
 }