@@ -2185,7 +2185,7 @@ namespace battleutils
 
     /************************************************************************
     *                                                                       *
-    *  Calculate Probability attack will hit (20% min cap - 95% max cap)    *
+    *  Calculate Probability attack will hit (20% min cap - 95~99% max cap) *
     *  attackNumber: 0=main, 1=sub, 2=kick                                  *
     *                                                                       *
     ************************************************************************/
@@ -2197,12 +2197,12 @@ namespace battleutils
         if (PAttacker->objtype == TYPE_PC && ((PAttacker->StatusEffectContainer->HasStatusEffect(EFFECT_SNEAK_ATTACK) && (behind(PAttacker->loc.p, PDefender->loc.p, 64) || PAttacker->StatusEffectContainer->HasStatusEffect(EFFECT_HIDE))) ||
             (charutils::hasTrait((CCharEntity*)PAttacker, TRAIT_ASSASSIN) && PAttacker->StatusEffectContainer->HasStatusEffect(EFFECT_TRICK_ATTACK) && battleutils::getAvailableTrickAttackChar(PAttacker, PDefender))))
         {
-            hitrate = 100; //attack with SA active or TA/Assassin cannot miss
+            hitrate = 100; // Attack with SA active or TA/Assassin cannot miss
         }
         else
         {
-            //ShowDebug("Accuracy mod before direction checks: %d\n", offsetAccuracy);
-            //Check For Ambush Merit - Melee
+            // ShowDebug("Accuracy mod before direction checks: %d\n", offsetAccuracy);
+            // Check For Ambush Merit - Melee
             if (PAttacker->objtype == TYPE_PC && (charutils::hasTrait((CCharEntity*)PAttacker, TRAIT_AMBUSH)) && behind(PAttacker->loc.p, PDefender->loc.p, 64))
             {
                 offsetAccuracy += ((CCharEntity*)PAttacker)->PMeritPoints->GetMeritValue(MERIT_AMBUSH, (CCharEntity*)PAttacker);
@@ -2227,18 +2227,89 @@ namespace battleutils
             {
                 offsetAccuracy -= PDefender->StatusEffectContainer->GetStatusEffect(EFFECT_YONIN)->GetPower();
             }
-            //ShowDebug("Accuracy mod after direction checks: %d\n", offsetAccuracy);
+            // ShowDebug("Accuracy mod after direction checks: %d\n", offsetAccuracy);
 
-            hitrate = hitrate + (PAttacker->ACC(attackNumber, offsetAccuracy) - PDefender->EVA()) / 2 + (PAttacker->GetMLevel() - PDefender->GetMLevel()) * 2;
 
+            // Hit Rate (%) = 75 + floor( (Accuracy - Evasion)/2 ) + 2*(dLVL)
+            // For Avatars negative penalties for level correction seem to be ignored for attack and likely for accuracy,
+            // bonuses cap at level diff of 38 based on this testing: 
+            // https://www.bluegartr.com/threads/114636-Monster-Avatar-Pet-damage
+
+            // Floor because hitrate can only be integer values
+            // https://www.bluegartr.com/threads/68786-Dexterity-s-impact-on-critical-hits?p=3209015&viewfull=1#post3209015
+
+            uint16 attackerAcc = PAttacker->ACC(attackNumber, offsetAccuracy);
+
+            // Enlight gives an ACC bonus not a hit rate bonus, ACC bonus is equal to damage dealt
             if (PAttacker->StatusEffectContainer->HasStatusEffect(EFFECT_ENLIGHT))
             {
-                hitrate += PAttacker->getMod(Mod::ENSPELL_DMG);
+                attackerAcc += PAttacker->getMod(Mod::ENSPELL_DMG);
+            }
+
+            hitrate += static_cast<int32>(std::floor((attackerAcc - PDefender->EVA()) / 2));
+
+            // Level correction does not happen in Adoulin zones, Legion, or zones in Escha/Reisenjima
+            // https://www.bg-wiki.com/bg/PDIF#Level_Correction_Function_.28cRatio.29
+            uint16 zoneId = PAttacker->getZone();
+            
+            // All zones from Adoulin onward have an id of 256+
+            // This includes Escha/Reisenjima and the new Dynamis zones
+            // (Not a post Adoulin Zone) && (Not Legion_A)
+            bool shouldApplyLevelCorrection = (zoneId < 256) && (zoneId != 183);
+
+            if (shouldApplyLevelCorrection) {
+                uint8 dLvl = PAttacker->GetMLevel() - PDefender->GetMLevel();
+                // Skip penalties for avatars, this should likely be all pets and mobs but I have no proof
+                // of this for ACC, ATT level correction for Pets/Avatars is the same as mobs though.
+                bool isPet = PAttacker->objtype == TYPE_PET;
+                bool isAvatar = false;
+                
+                if (isPet) {
+                    CPetEntity* petEntity = dynamic_cast<CPetEntity*>(PAttacker);
+                    isAvatar = petEntity->getPetType() == PETTYPE_AVATAR;
+                }
+
+                if (isAvatar)
+                {
+                    if (dLvl > 0)
+                    {
+                        // Avatars have a known level difference cap of 38
+                        hitrate += static_cast<int16>(std::min(dLvl, (uint8)38) * 2);
+                    }
+                }
+                else
+                {
+                    // Everything else has no known caps, though it's likely 38 like avatars
+                    hitrate += static_cast<int16>(dLvl * 2);
+                }
+            }
+
+            // https://www.bg-wiki.com/bg/Hit_Rate
+            // Update Notes: https://forum.square-enix.com/ffxi/threads/45365?p=534537#post534537
+            // The maximum accuracy of one-handed weapons equipped as the main weapon has been increased from 95% to 99%.
+            // * Owing to this change, the maximum accuracy of abilities that rely on main weapon accuracy has also been raised from 95% to 99%.
+            // Further, some monster damage types have been changed from hand-to-hand to blunt.* Fellows and alter egos enjoy this benefit as well.
+            // The maximum accuracy of beastmaster familiars, wyverns, avatars, and automatons has been increased from 95% to 99%.
+            // * In line with this change, familiars summoned using the following items have had their damage types changed from hand-to-hand to blunt.
+            // Carrot Broth / Famous Carrot Broth / Bug Broth / Quadav Bug Broth / Berbal Broth / Singing Herbal Broth / Carrion Broth / 
+            // Cold Carrion Broth / Meat Broth / Warm Meat Broth / Tree Sap / Scarlet Sap / Fish Broth / Fish Oil Broth / Seedbed Soil / Sun Water / 
+            // Grasshopper Broth / Noisy Grasshopper Broth / Mole Broth / Lively Mole Broth / Blood Broth / Clear Blood Broth / Antica Broth / Fragrant Antica Broth
+
+            int32 maxHitRate = 99;
+            auto targ_weapon = dynamic_cast<CItemWeapon*>(PAttacker->m_Weapons[SLOT_MAIN]);
+
+            // As far as I can tell kick attacks fall under Hand-to-Hand so ignoring them and letting them go to 99
+            bool isOffhand = attackNumber == 1;
+            bool isTwoHanded = targ_weapon && targ_weapon->isTwoHanded();
+
+            if (isOffhand || isTwoHanded)
+            {
+                maxHitRate = 95;
             }
 
-            hitrate = std::clamp(hitrate, 20, 95);
+            hitrate = std::clamp(hitrate, 20, maxHitRate);
         }
-        return (uint8)hitrate;
+        return static_cast<uint8>(hitrate);
     }
     uint8 GetHitRate(CBattleEntity* PAttacker, CBattleEntity* PDefender)
     {
@@ -2268,7 +2339,6 @@ namespace battleutils
         }
         else if (PAttacker->objtype == TYPE_PC && (!ignoreSneakTrickAttack) && PAttacker->StatusEffectContainer->HasStatusEffect(EFFECT_SNEAK_ATTACK))
         {
-
             if (behind(PAttacker->loc.p, PDefender->loc.p, 64) || PAttacker->StatusEffectContainer->HasStatusEffect(EFFECT_HIDE))
             {
                 crithitrate = 100;
@@ -2282,7 +2352,7 @@ namespace battleutils
         }
         else
         {
-            //apply merit mods and traits
+            // apply merit mods and traits
             if (PAttacker->objtype == TYPE_PC)
             {
                 CCharEntity* PCharAttacker = static_cast<CCharEntity*>(PAttacker);
@@ -2298,10 +2368,12 @@ namespace battleutils
                 }
             }
 
+            // ShowDebug("Crit rate mod before Innin/Yonin: %d\n", crithitrate);
             if (PDefender->objtype == TYPE_PC)
             {
                 crithitrate -= ((CCharEntity*)PDefender)->PMeritPoints->GetMeritValue(MERIT_ENEMY_CRIT_RATE, (CCharEntity*)PDefender);
             }
+
             // Check for Innin crit rate bonus from behind target
             if (PAttacker->StatusEffectContainer->HasStatusEffect(EFFECT_INNIN) && behind(PAttacker->loc.p, PDefender->loc.p, 64))
             {
@@ -2313,17 +2385,62 @@ namespace battleutils
                 crithitrate -= PDefender->StatusEffectContainer->GetStatusEffect(EFFECT_YONIN)->GetPower();
             }
 
-            int32 attackerdex = PAttacker->DEX();
-            int32 defenderagi = PDefender->AGI();
-
-            int32 dDEX = std::clamp(attackerdex - defenderagi, 0, 50);
+            // ShowDebug("Crit rate mod after Innin/Yonin: %d\n", crithitrate);
 
-            crithitrate += (dDEX * 30) / 100 + PAttacker->getMod(Mod::CRITHITRATE) + PDefender->getMod(Mod::ENEMYCRITRATE);
+            crithitrate += GetDexCritBonus(PAttacker, PDefender);
+            crithitrate += PAttacker->getMod(Mod::CRITHITRATE);
+            crithitrate += PDefender->getMod(Mod::ENEMYCRITRATE);
             crithitrate = std::clamp(crithitrate, 0, 100);
         }
         return (uint8)crithitrate;
     }
 
+    int8 GetDexCritBonus(CBattleEntity* PAttacker, CBattleEntity* PDefender)
+    {
+        // https://www.bg-wiki.com/bg/Critical_Hit_Rate
+        int32 attackerdex = PAttacker->DEX();
+        int32 defenderagi = PDefender->AGI();
+        int32 dDex = attackerdex - defenderagi;
+        int32 dDexAbs = std::abs(dDex);
+        int32 sign = 1;
+        
+        if (dDex < 0)
+        {
+            // Target has higher AGI so this will be a decrease to crit rate
+            sign = -1;
+        }
+
+        // Default to +0 crit rate for a delta of 0-6
+        int32 critRate = 0;
+        if (dDexAbs > 39) 
+        {
+            // 40-50: (dDEX-35)
+            critRate = dDexAbs - (int32)35;
+        }
+        else if (dDexAbs > 29)
+        {
+            // 30-39: +4
+            critRate = 4;
+        }
+        else if (dDexAbs > 19)
+        {
+            // 20-29: +3
+            critRate = 3;
+        }
+        else if (dDexAbs > 13)
+        {
+            // 14-19: +2
+            critRate = 2;
+        }
+        else if (dDexAbs > 6)
+        {
+            critRate = 1;
+        }
+
+        // Crit rate delta from stats caps at +-15
+        return std::min(critRate, static_cast<int32>(15)) * sign;
+    }
+
     /************************************************************************
     *                                                                       *
     *   Formula for calculating damage ratio                                *
@@ -2332,99 +2449,204 @@ namespace battleutils
 
     float GetDamageRatio(CBattleEntity* PAttacker, CBattleEntity* PDefender, bool isCritical, float bonusAttPercent)
     {
-        // used to apply a % of attack bonus
-        float attPercentBonus = 0;
-        if (bonusAttPercent >= 1)
-            attPercentBonus = PAttacker->ATT() * bonusAttPercent;
-
-        //wholly possible for DEF to be near 0 with the amount of debuffs/effects now.
-        float ratio = (float)(PAttacker->ATT() + attPercentBonus) / (float)((PDefender->DEF() == 0) ? 1 : PDefender->DEF());
-        float cRatioMax = 0;
-        float cRatioMin = 0;
-        float ratioCap = 2.0f;
-
-        if (PAttacker->objtype == TYPE_PC)
+        uint16 attack = PAttacker->ATT();
+        // Bonus attack currently only from footwork
+        if (bonusAttPercent >= 1) 
         {
-            ratioCap = isCritical ? 3 : 2.25f;
+            attack = static_cast<uint16>(attack * bonusAttPercent);
         }
-        if (PAttacker->objtype == TYPE_MOB)
+
+        // Wholly possible for DEF to be near 0 with the amount of debuffs/effects now.
+        uint16 defense = PDefender->DEF();
+        if (defense == 0)
         {
-            ratioCap = 4.f;
+            defense = 1;
         }
 
-        ratio = std::clamp<float>(ratio, 0, ratioCap);
+        // https://www.bg-wiki.com/bg/PDIF
+        // https://www.bluegartr.com/threads/127523-pDIF-Changes-(Feb.-10th-2016)
+        float ratio = (static_cast<float>(attack)) / (static_cast<float>(defense));
         float cRatio = ratio;
-        if (PAttacker->objtype == TYPE_PC)
-        {
-            if (PAttacker->GetMLevel() < PDefender->GetMLevel())
-            {
-                cRatio -= 0.050f * (PDefender->GetMLevel() - PAttacker->GetMLevel());
+
+        // Level correction does not happen in Adoulin zones, Legion, or zones in Escha/Reisenjima
+        // Level correction is only a penalty to players, a player does not get any bonus for fighting lower level monsters
+        // Level correct does give bonuses to Monsters and Avatars. For Avatars it caps at a level difference of 38
+        // I am going to assume that the 38 level difference cap applies to monsters as well
+        // https://www.bluegartr.com/threads/114636-Monster-Avatar-Pet-damage
+        // This thread references the level correction cap for avatars and states that penalties are ignored for avatars
+        // Monster pDIF = Avatar pDIF = Pet pDIF
+        // Based on these points we know monsters and avatars ignore penalties from level correct and only get bonuses so
+        // I believe it is safe to assume all pets do this.
+
+        uint16 zoneId = PAttacker->getZone();
+        // All zones from Adoulin onward have an id of 256+
+        // This includes Escha/Reisenjima and the new Dynamis zones
+        // (Not a post Adoulin Zone) && (Not Legion_A)
+        bool shouldApplyLevelCorrection = (zoneId < 256) && (zoneId != 183);
+
+        ENTITYTYPE attackerType = PAttacker->objtype;
+
+        uint8 attackerLvl = PAttacker->GetMLevel();
+        uint8 defenderLvl = PDefender->GetMLevel();
+        uint8 dLvl = std::abs(attackerLvl - defenderLvl);
+        float correction = static_cast<float>(dLvl) * 0.05f;
+
+        // Assuming the cap for mobs is the same as Avatars
+        // Cap at 38 level diff so 38*0.05 = 1.9
+        float cappedCorrection = std::min(correction, 1.9f);
+        
+        if (shouldApplyLevelCorrection)
+        {
+            // Players only get penalties
+            if (attackerType == TYPE_PC)
+            {
+                if (attackerLvl < defenderLvl)
+                {
+                    // Screw the players, no known cap
+                    cRatio -= correction;
+                }
             }
-        }
-        else
-        {
-            if (PAttacker->GetMLevel() > PDefender->GetMLevel())
+            // Mobs, Avatars and pets only get bonuses, no penalties (or they are calculated differently)
+            else if (attackerType == TYPE_MOB || attackerType == TYPE_PET)
             {
-                cRatio += 0.050f * (PAttacker->GetMLevel() - PDefender->GetMLevel());
+                if (attackerLvl > defenderLvl)
+                {
+                    cRatio += cappedCorrection;
+                }
             }
         }
 
+        float wRatio = cRatio;
+        
         if (isCritical)
         {
-            cRatio += 1;
+            wRatio += 1;
         }
 
-        cRatio = std::clamp<float>(cRatio, 0, ratioCap);
+        float qRatio = wRatio;
+        float upperLimit = 0.0f;
+        float lowerLimit = 0.0f;
+
+        // https://www.bg-wiki.com/bg/PDIF
+        // Pre-Randomized values excluding Damage Limit+ trait
+        // Damage Limit+ trait adds 0.1/rank to these values
+        // type : non-crit : crit
+        // 1H : 3.25 : 4.25
+        // H2H & GK : 3.5 : 4.5
+        // 2H : 3.75 : 4.75
+        // Scythe : 4 : 5
+        // Archery & Throwing : 3.25 : 3.25*1.25
+        // Marksmanship : 3.5 : 3.5*1.25
+        
+        // https://www.bluegartr.com/threads/114636-Monster-Avatar-Pet-damage
+        // Monster pDIF = Avatar pDIF = Pet pDIF
+
+        auto targ_weapon = dynamic_cast<CItemWeapon*>(PAttacker->m_Weapons[SLOT_MAIN]);
 
-        if ((0 <= cRatio) && (cRatio < 0.5)) {
-            cRatioMax = cRatio + 0.5f;
+        // Default for 1H is 3.25
+        float maxRatio = 3.25f;
+
+        if (attackerType == TYPE_MOB || attackerType == TYPE_PET)
+        {
+            // Mobs and pets cap at 4.25 regardless of crit so no need to bother with crits for the max
+            maxRatio = 4.25f;
         }
-        else if ((0.5 <= cRatio) && (cRatio <= 0.7)) {
-            cRatioMax = 1;
+        else
+        {
+            // If null ignore the checks and fallback to 1H values
+            if (targ_weapon)
+            {
+                if (targ_weapon->isHandToHand() || targ_weapon->getSkillType() == SKILL_GREAT_KATANA)
+                {
+                    maxRatio = 3.5f;
+                }
+                else if (targ_weapon->getSkillType() == SKILL_SCYTHE)
+                {
+                    maxRatio = 4.0f;
+                }
+                else if (targ_weapon->isTwoHanded())
+                {
+                    maxRatio = 3.75f;
+                }
+            }
+            // Skipping Ranged since that is handled in a separate function
+            
+            // Default to 1H and check for +1 to max from crit
+            if (isCritical)
+            {
+                maxRatio += 1.0f;
+            }
         }
-        else if ((0.7 < cRatio) && (cRatio <= 1.2)) {
-            cRatioMax = cRatio + 0.3f;
+
+        // https://www.bg-wiki.com/bg/Damage_Limit+
+        // There is an additional step here but I am skipping it for now because we do not have the data in the database.
+        // The Damage Limit+ trait adds 0.1 to the maxRatio per trait level so a level 80 DRK would get maxRatio += 0.5
+        
+        if (wRatio < 0.5)
+        {
+            upperLimit = std::max(wRatio + 0.5f, 0.5f);
         }
-        else if ((1.2 < cRatio) && (cRatio <= 1.5)) {
-            cRatioMax = (cRatio * 0.25f) + cRatio;
+        else if (wRatio < 0.7)
+        {
+            upperLimit = 1;
         }
-        else if ((1.5 < cRatio) && (cRatio <= 2.625)) {
-            cRatioMax = cRatio + 0.375f;
+        else if (wRatio < 1.2)
+        {
+            upperLimit = wRatio + 0.3f;
         }
-        else if ((2.625 < cRatio) && (cRatio <= 3.25)) {
-            cRatioMax = 3;
+        else if (wRatio < 1.5)
+        {
+            upperLimit = wRatio * 1.25f;
         }
-        else {
-            cRatioMax = cRatio;
+        else
+        {
+            upperLimit = std::min(wRatio + 0.375f, maxRatio);
         }
 
-        if ((0 <= cRatio) && (cRatio < 0.38)) {
-            cRatioMin = 0;
+        if (wRatio < 0.38)
+        {
+            lowerLimit = std::max(wRatio, 0.5f);
         }
-        else if ((0.38 <= cRatio) && (cRatio <= 1.25)) {
-            cRatioMin = cRatio * (float)(1176 / 1024) - (float)(448 / 1024);
+        else if (wRatio < 1.25)
+        {
+            lowerLimit = (wRatio * (1176.0f/1024.0f)) - (448.0f/1024.0f);
         }
-        else if ((1.25 < cRatio) && (cRatio <= 1.51)) {
-            cRatioMin = 1;
+        else if (wRatio < 1.51)
+        {
+            lowerLimit = 1.0f;
         }
-        else if ((1.51 < cRatio) && (cRatio <= 2.44)) {
-            cRatioMin = cRatio * (float)(1176 / 1024) - (float)(775 / 1024);
+        else if (wRatio < 2.44)
+        {
+            lowerLimit = (wRatio * (1176.0f/1024.0f)) - (755.0f/1024.0f);
         }
-        else {
-            cRatioMin = cRatio - 0.375f;
+        else
+        {
+            lowerLimit = std::min(wRatio - 0.375f, maxRatio);
         }
 
-        float pDIF = tpzrand::GetRandomNumber(cRatioMin, cRatioMax);
+        // https://www.bg-wiki.com/bg/Damage_Limit+
+        // See: "Physical damage limit +n%" is a multiplier to the total pDIF cap. 
+        // There is one more step here that I am skipping for Physical Damage +% from gear and augments.
+        // I don't believe support for this modifier exists yet in the project.
+        // Physical Damage +% (PDL) is a flat % increase to the final pDIF cap value
+        // Meaning if a player has PDL+10% and an uppwerLimit of 1 then this would become 1.1
+        // upperLimit = upperLimit * 1.1
+
+        qRatio = tpzrand::GetRandomNumber(lowerLimit, upperLimit);
+
+        float pDIF = qRatio * tpzrand::GetRandomNumber(1.f, 1.05f);
 
         if (isCritical)
         {
+            // Crit Attack Bonus caps at +100% and is a flat increase to final crit damage
+            // so this is change to increase pDIF and not the qRatio
             int16 criticaldamage = PAttacker->getMod(Mod::CRIT_DMG_INCREASE) - PDefender->getMod(Mod::CRIT_DEF_BONUS);
+
             criticaldamage = std::clamp<int16>(criticaldamage, 0, 100);
             pDIF *= ((100 + criticaldamage) / 100.0f);
         }
 
-        //x1.00 ~ x1.05 final multiplier, giving max value 3*1.05 -> 3.15
-        return pDIF * tpzrand::GetRandomNumber(1.f, 1.05f);
+        return pDIF;
     }
 
     /************************************************************************
@@ -2437,33 +2659,33 @@ namespace battleutils
         int32 fstr = 0;
         float dif = (float)(PAttacker->STR() - PDefender->VIT());
         if (dif >= 12) {
-            fstr = (int32)((dif + 4) / 2);
+            fstr = static_cast<int32>((dif + 4) / 2);
         }
         else if (dif >= 6) {
-            fstr = (int32)((dif + 6) / 2);
+            fstr = static_cast<int32>((dif + 6) / 2);
         }
         else if (dif >= 1) {
-            fstr = (int32)((dif + 7) / 2);
+            fstr = static_cast<int32>((dif + 7) / 2);
         }
         else if (dif >= -2) {
-            fstr = (int32)((dif + 8) / 2);
+            fstr = static_cast<int32>((dif + 8) / 2);
         }
         else if (dif >= -7) {
-            fstr = (int32)((dif + 9) / 2);
+            fstr = static_cast<int32>((dif + 9) / 2);
         }
         else if (dif >= -15) {
-            fstr = (int32)((dif + 10) / 2);
+            fstr = static_cast<int32>((dif + 10) / 2);
         }
         else if (dif >= -21) {
-            fstr = (int32)((dif + 12) / 2);
+            fstr = static_cast<int32>((dif + 12) / 2);
         }
         else {
-            fstr = (int32)((dif + 13) / 2);
+            fstr = static_cast<int32>((dif + 13) / 2);
         }
         if (SlotID == SLOT_RANGED)
         {
             rank = PAttacker->GetRangedWeaponRank();
-            //different caps than melee weapons
+            // Different caps than melee weapons
             if (fstr <= (-rank * 2))
                 return (-rank * 2);
 
@@ -2484,10 +2706,31 @@ namespace battleutils
             {
                 rank = PAttacker->GetSubWeaponRank();
             }
-            // everything else
+            // Everything else
             if (fstr <= (-rank))
                 return (-rank);
 
+            // https://www.bluegartr.com/threads/114636-Monster-Avatar-Pet-damage
+            // fSTR has no upper cap for Avatars, this is likely true for monsters and all pets.
+            // Since I can only confirm Avatars and this has a much larger impact on balance I will
+            // Only change this logic for Avatars pending further testing.
+
+            ENTITYTYPE attackerType = PAttacker->objtype;
+            bool isAvatar = false;
+
+            if (attackerType == TYPE_PET)
+            {
+                if (CPetEntity* petEntity = dynamic_cast<CPetEntity*>(PAttacker))
+                {
+                    isAvatar = petEntity->getPetType() == PETTYPE_AVATAR;
+                }
+            }
+
+            if (isAvatar)
+            {
+                return fstr;
+            }
+
             if ((fstr > (-rank)) && (fstr <= rank + 8))
                 return fstr;
             else