@@ -60,8 +60,8 @@ CAlliance::CAlliance(uint32 id): m_AllianceID(id), aLeader(nullptr)
 {
 }
 
-void CAlliance::dissolveAlliance(bool playerInitiated) 
-{   
+void CAlliance::dissolveAlliance(bool playerInitiated)
+{
     if (playerInitiated)
     {
         //Sql_Query(SqlHandle, "UPDATE accounts_parties SET allianceid = 0, partyflag = partyflag & ~%d WHERE allianceid = %u;", ALLIANCE_LEADER | PARTY_SECOND | PARTY_THIRD, m_AllianceID);
@@ -74,7 +74,7 @@ void CAlliance::dissolveAlliance(bool playerInitiated)
     {
         Sql_Query(SqlHandle, "UPDATE accounts_parties JOIN accounts_sessions USING (charid) \
                         SET allianceid = 0, partyflag = partyflag & ~%d \
-                        WHERE allianceid = %u AND IF(%u = 0 AND %u = 0, true, server_addr = %u AND server_port = %u);", 
+                        WHERE allianceid = %u AND IF(%u = 0 AND %u = 0, true, server_addr = %u AND server_port = %u);",
                         ALLIANCE_LEADER | PARTY_SECOND | PARTY_THIRD, m_AllianceID, map_ip.s_addr, map_port, map_ip.s_addr, map_port);
         //first kick out the third party if it exsists
         CParty* party = nullptr;
@@ -105,8 +105,8 @@ void CAlliance::dissolveAlliance(bool playerInitiated)
 }
 
 
-uint32 CAlliance::partyCount(void) 
-{	
+uint32 CAlliance::partyCount(void)
+{
     int ret = Sql_Query(SqlHandle, "SELECT * FROM accounts_parties WHERE allianceid = %d GROUP BY partyid;", m_AllianceID, PARTY_SECOND | PARTY_THIRD);
 
     if (ret != SQL_ERROR)
@@ -116,11 +116,11 @@ uint32 CAlliance::partyCount(void)
     return 0;
 }
 
-void CAlliance::removeParty(CParty * party) 
+void CAlliance::removeParty(CParty * party)
 {
 
     //if main party then pass alliance lead to the next (d/c fix)
-    if (this->getMainParty() == party) 
+    if (this->getMainParty() == party)
     {
         int ret = Sql_Query(SqlHandle, "SELECT charname FROM accounts_sessions JOIN chars ON accounts_sessions.charid = chars.charid \
                                 JOIN accounts_parties ON accounts_parties.charid = chars.charid WHERE allianceid = %u AND partyflag & %d \
@@ -136,7 +136,7 @@ void CAlliance::removeParty(CParty * party)
             return;
         }
     }
-    
+
     delParty(party);
 
     Sql_Query(SqlHandle, "UPDATE accounts_parties SET allianceid = 0, partyflag = partyflag & ~%d WHERE partyid = %u;", ALLIANCE_LEADER | PARTY_SECOND | PARTY_THIRD, party->GetPartyID());
@@ -207,7 +207,7 @@ void CAlliance::addParty(CParty * party)
 {
 	party->m_PAlliance = this;
 	partyList.push_back(party);
-	
+
     uint8 newparty = 0;
 
     int ret = Sql_Query(SqlHandle, "SELECT partyflag & %d FROM accounts_parties WHERE allianceid = %d ORDER BY partyflag & %d ASC;", PARTY_SECOND | PARTY_THIRD, m_AllianceID, PARTY_SECOND | PARTY_THIRD);
@@ -275,13 +275,13 @@ void CAlliance::pushParty(CParty* PParty, uint8 number)
     }
 }
 
-CParty* CAlliance::getMainParty() 
-{	
+CParty* CAlliance::getMainParty()
+{
 	return aLeader;
 }
 
 //Assigns a party leader for the party
-void CAlliance::setMainParty(CParty * aLeader) 
+void CAlliance::setMainParty(CParty * aLeader)
 {
 	this->aLeader = aLeader;
 }
@@ -298,7 +298,7 @@ void CAlliance::assignAllianceLeader(const char* name)
         Sql_Query(SqlHandle, "UPDATE accounts_parties SET allianceid = %u WHERE allianceid = %u;", charid, m_AllianceID);
         m_AllianceID = charid;
 
-        //in case leader's on another server 
+        //in case leader's on another server
         this->aLeader = nullptr;
 
         for (auto PParty : partyList)
@@ -312,4 +312,4 @@ void CAlliance::assignAllianceLeader(const char* name)
 
         Sql_Query(SqlHandle, "UPDATE accounts_parties SET partyflag = partyflag | %d WHERE charid = %u", ALLIANCE_LEADER, charid);
     }
-}
\ No newline at end of file
+}