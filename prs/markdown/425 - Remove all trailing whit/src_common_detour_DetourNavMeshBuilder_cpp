@@ -76,18 +76,18 @@ static void calcExtends(BVItem* items, const int /*nitems*/, const int imin, con
 	bmin[0] = items[imin].bmin[0];
 	bmin[1] = items[imin].bmin[1];
 	bmin[2] = items[imin].bmin[2];
-	
+
 	bmax[0] = items[imin].bmax[0];
 	bmax[1] = items[imin].bmax[1];
 	bmax[2] = items[imin].bmax[2];
-	
+
 	for (int i = imin+1; i < imax; ++i)
 	{
 		const BVItem& it = items[i];
 		if (it.bmin[0] < bmin[0]) bmin[0] = it.bmin[0];
 		if (it.bmin[1] < bmin[1]) bmin[1] = it.bmin[1];
 		if (it.bmin[2] < bmin[2]) bmin[2] = it.bmin[2];
-		
+
 		if (it.bmax[0] > bmax[0]) bmax[0] = it.bmax[0];
 		if (it.bmax[1] > bmax[1]) bmax[1] = it.bmax[1];
 		if (it.bmax[2] > bmax[2]) bmax[2] = it.bmax[2];
@@ -115,31 +115,31 @@ static void subdivide(BVItem* items, int nitems, int imin, int imax, int& curNod
 {
 	int inum = imax - imin;
 	int icur = curNode;
-	
+
 	dtBVNode& node = nodes[curNode++];
-	
+
 	if (inum == 1)
 	{
 		// Leaf
 		node.bmin[0] = items[imin].bmin[0];
 		node.bmin[1] = items[imin].bmin[1];
 		node.bmin[2] = items[imin].bmin[2];
-		
+
 		node.bmax[0] = items[imin].bmax[0];
 		node.bmax[1] = items[imin].bmax[1];
 		node.bmax[2] = items[imin].bmax[2];
-		
+
 		node.i = items[imin].i;
 	}
 	else
 	{
 		// Split
 		calcExtends(items, nitems, imin, imax, node.bmin, node.bmax);
-		
+
 		int	axis = longestAxis(node.bmax[0] - node.bmin[0],
 							   node.bmax[1] - node.bmin[1],
 							   node.bmax[2] - node.bmin[2]);
-		
+
 		if (axis == 0)
 		{
 			// Sort along x-axis
@@ -155,14 +155,14 @@ static void subdivide(BVItem* items, int nitems, int imin, int imax, int& curNod
 			// Sort along z-axis
 			qsort(items+imin, inum, sizeof(BVItem), compareItemZ);
 		}
-		
+
 		int isplit = imin+inum/2;
-		
+
 		// Left
 		subdivide(items, nitems, imin, isplit, curNode, nodes);
 		// Right
 		subdivide(items, nitems, isplit, imax, curNode, nodes);
-		
+
 		int iescape = curNode - icur;
 		// Negative index means escape.
 		node.i = -iescape;
@@ -185,18 +185,18 @@ static int createBVTree(const unsigned short* verts, const int /*nverts*/,
 		it.bmin[0] = it.bmax[0] = verts[p[0]*3+0];
 		it.bmin[1] = it.bmax[1] = verts[p[0]*3+1];
 		it.bmin[2] = it.bmax[2] = verts[p[0]*3+2];
-		
+
 		for (int j = 1; j < nvp; ++j)
 		{
 			if (p[j] == MESH_NULL_IDX) break;
 			unsigned short x = verts[p[j]*3+0];
 			unsigned short y = verts[p[j]*3+1];
 			unsigned short z = verts[p[j]*3+2];
-			
+
 			if (x < it.bmin[0]) it.bmin[0] = x;
 			if (y < it.bmin[1]) it.bmin[1] = y;
 			if (z < it.bmin[2]) it.bmin[2] = z;
-			
+
 			if (x > it.bmax[0]) it.bmax[0] = x;
 			if (y > it.bmax[1]) it.bmax[1] = y;
 			if (z > it.bmax[2]) it.bmax[2] = z;
@@ -205,12 +205,12 @@ static int createBVTree(const unsigned short* verts, const int /*nverts*/,
 		it.bmin[1] = (unsigned short)dtMathFloorf((float)it.bmin[1]*ch/cs);
 		it.bmax[1] = (unsigned short)dtMathCeilf((float)it.bmax[1]*ch/cs);
 	}
-	
+
 	int curNode = 0;
 	subdivide(items, npolys, 0, npolys, curNode, nodes);
-	
+
 	dtFree(items);
-	
+
 	return curNode;
 }
 
@@ -219,9 +219,9 @@ static unsigned char classifyOffMeshPoint(const float* pt, const float* bmin, co
 	static const unsigned char XP = 1<<0;
 	static const unsigned char ZP = 1<<1;
 	static const unsigned char XM = 1<<2;
-	static const unsigned char ZM = 1<<3;	
+	static const unsigned char ZM = 1<<3;
 
-	unsigned char outcode = 0; 
+	unsigned char outcode = 0;
 	outcode |= (pt[0] >= bmax[0]) ? XP : 0;
 	outcode |= (pt[2] >= bmax[2]) ? ZP : 0;
 	outcode |= (pt[0] < bmin[0])  ? XM : 0;
@@ -239,13 +239,13 @@ static unsigned char classifyOffMeshPoint(const float* pt, const float* bmin, co
 	case XP|ZM: return 7;
 	};
 
-	return 0xff;	
+	return 0xff;
 }
 
 // TODO: Better error handling.
 
 /// @par
-/// 
+///
 /// The output data array is allocated using the detour allocator (dtAlloc()).  The method
 /// used to free the memory will be determined by how the tile is added to the navigation
 /// mesh.
@@ -263,13 +263,13 @@ bool dtCreateNavMeshData(dtNavMeshCreateParams* params, unsigned char** outData,
 		return false;
 
 	const int nvp = params->nvp;
-	
+
 	// Classify off-mesh connection points. We store only the connections
 	// whose start point is inside the tile.
 	unsigned char* offMeshConClass = 0;
 	int storedOffMeshConCount = 0;
 	int offMeshConLinkCount = 0;
-	
+
 	if (params->offMeshConCount > 0)
 	{
 		offMeshConClass = (unsigned char*)dtAlloc(sizeof(unsigned char)*params->offMeshConCount*2, DT_ALLOC_TEMP);
@@ -279,7 +279,7 @@ bool dtCreateNavMeshData(dtNavMeshCreateParams* params, unsigned char** outData,
 		// Find tight heigh bounds, used for culling out off-mesh start locations.
 		float hmin = FLT_MAX;
 		float hmax = -FLT_MAX;
-		
+
 		if (params->detailVerts && params->detailVertsCount)
 		{
 			for (int i = 0; i < params->detailVertsCount; ++i)
@@ -331,11 +331,11 @@ bool dtCreateNavMeshData(dtNavMeshCreateParams* params, unsigned char** outData,
 				storedOffMeshConCount++;
 		}
 	}
-	
+
 	// Off-mesh connectionss are stored as polygons, adjust values.
 	const int totPolyCount = params->polyCount + storedOffMeshConCount;
 	const int totVertCount = params->vertCount + storedOffMeshConCount*2;
-	
+
 	// Find portal edges which are at tile borders.
 	int edgeCount = 0;
 	int portalCount = 0;
@@ -346,7 +346,7 @@ bool dtCreateNavMeshData(dtNavMeshCreateParams* params, unsigned char** outData,
 		{
 			if (p[j] == MESH_NULL_IDX) break;
 			edgeCount++;
-			
+
 			if (p[nvp+j] & 0x8000)
 			{
 				unsigned short dir = p[nvp+j] & 0xf;
@@ -357,7 +357,7 @@ bool dtCreateNavMeshData(dtNavMeshCreateParams* params, unsigned char** outData,
 	}
 
 	const int maxLinkCount = edgeCount + portalCount*2 + offMeshConLinkCount*2;
-	
+
 	// Find unique detail vertices.
 	int uniqueDetailVertCount = 0;
 	int detailTriCount = 0;
@@ -396,7 +396,7 @@ bool dtCreateNavMeshData(dtNavMeshCreateParams* params, unsigned char** outData,
 			detailTriCount += nv-2;
 		}
 	}
-	
+
 	// Calculate data size
 	const int headerSize = dtAlign4(sizeof(dtMeshHeader));
 	const int vertsSize = dtAlign4(sizeof(float)*3*totVertCount);
@@ -407,19 +407,19 @@ bool dtCreateNavMeshData(dtNavMeshCreateParams* params, unsigned char** outData,
 	const int detailTrisSize = dtAlign4(sizeof(unsigned char)*4*detailTriCount);
 	const int bvTreeSize = params->buildBvTree ? dtAlign4(sizeof(dtBVNode)*params->polyCount*2) : 0;
 	const int offMeshConsSize = dtAlign4(sizeof(dtOffMeshConnection)*storedOffMeshConCount);
-	
+
 	const int dataSize = headerSize + vertsSize + polysSize + linksSize +
 						 detailMeshesSize + detailVertsSize + detailTrisSize +
 						 bvTreeSize + offMeshConsSize;
-						 
+
 	unsigned char* data = (unsigned char*)dtAlloc(sizeof(unsigned char)*dataSize, DT_ALLOC_PERM);
 	if (!data)
 	{
 		dtFree(offMeshConClass);
 		return false;
 	}
 	memset(data, 0, dataSize);
-	
+
 	unsigned char* d = data;
 	dtMeshHeader* header = (dtMeshHeader*)d; d += headerSize;
 	float* navVerts = (float*)d; d += vertsSize;
@@ -430,8 +430,8 @@ bool dtCreateNavMeshData(dtNavMeshCreateParams* params, unsigned char** outData,
 	unsigned char* navDTris = (unsigned char*)d; d += detailTrisSize;
 	dtBVNode* navBvtree = (dtBVNode*)d; d += bvTreeSize;
 	dtOffMeshConnection* offMeshCons = (dtOffMeshConnection*)d; d += offMeshConsSize;
-	
-	
+
+
 	// Store header
 	header->magic = DT_NAVMESH_MAGIC;
 	header->version = DT_NAVMESH_VERSION;
@@ -454,10 +454,10 @@ bool dtCreateNavMeshData(dtNavMeshCreateParams* params, unsigned char** outData,
 	header->walkableClimb = params->walkableClimb;
 	header->offMeshConCount = storedOffMeshConCount;
 	header->bvNodeCount = params->buildBvTree ? params->polyCount*2 : 0;
-	
+
 	const int offMeshVertsBase = params->vertCount;
 	const int offMeshPolyBase = params->polyCount;
-	
+
 	// Store vertices
 	// Mesh vertices
 	for (int i = 0; i < params->vertCount; ++i)
@@ -482,7 +482,7 @@ bool dtCreateNavMeshData(dtNavMeshCreateParams* params, unsigned char** outData,
 			n++;
 		}
 	}
-	
+
 	// Store polygons
 	// Mesh polys
 	const unsigned short* src = params->polys;
@@ -517,7 +517,7 @@ bool dtCreateNavMeshData(dtNavMeshCreateParams* params, unsigned char** outData,
 				// Normal connection
 				p->neis[j] = src[nvp+j]+1;
 			}
-			
+
 			p->vertCount++;
 		}
 		src += nvp*2;
@@ -601,7 +601,7 @@ bool dtCreateNavMeshData(dtNavMeshCreateParams* params, unsigned char** outData,
 		createBVTree(params->verts, params->vertCount, params->polys, params->polyCount,
 					 nvp, params->cs, params->ch, params->polyCount*2, navBvtree);
 	}
-	
+
 	// Store Off-Mesh connections.
 	n = 0;
 	for (int i = 0; i < params->offMeshConCount; ++i)
@@ -623,30 +623,30 @@ bool dtCreateNavMeshData(dtNavMeshCreateParams* params, unsigned char** outData,
 			n++;
 		}
 	}
-		
+
 	dtFree(offMeshConClass);
-	
+
 	*outData = data;
 	*outDataSize = dataSize;
-	
+
 	return true;
 }
 
 bool dtNavMeshHeaderSwapEndian(unsigned char* data, const int /*dataSize*/)
 {
 	dtMeshHeader* header = (dtMeshHeader*)data;
-	
+
 	int swappedMagic = DT_NAVMESH_MAGIC;
 	int swappedVersion = DT_NAVMESH_VERSION;
 	dtSwapEndian(&swappedMagic);
 	dtSwapEndian(&swappedVersion);
-	
+
 	if ((header->magic != DT_NAVMESH_MAGIC || header->version != DT_NAVMESH_VERSION) &&
 		(header->magic != swappedMagic || header->version != swappedVersion))
 	{
 		return false;
 	}
-		
+
 	dtSwapEndian(&header->magic);
 	dtSwapEndian(&header->version);
 	dtSwapEndian(&header->x);
@@ -680,9 +680,9 @@ bool dtNavMeshHeaderSwapEndian(unsigned char* data, const int /*dataSize*/)
 
 /// @par
 ///
-/// @warning This function assumes that the header is in the correct endianess already. 
-/// Call #dtNavMeshHeaderSwapEndian() first on the data if the data is expected to be in wrong endianess 
-/// to start with. Call #dtNavMeshHeaderSwapEndian() after the data has been swapped if converting from 
+/// @warning This function assumes that the header is in the correct endianess already.
+/// Call #dtNavMeshHeaderSwapEndian() first on the data if the data is expected to be in wrong endianess
+/// to start with. Call #dtNavMeshHeaderSwapEndian() after the data has been swapped if converting from
 /// native to foreign endianess.
 bool dtNavMeshDataSwapEndian(unsigned char* data, const int /*dataSize*/)
 {
@@ -692,7 +692,7 @@ bool dtNavMeshDataSwapEndian(unsigned char* data, const int /*dataSize*/)
 		return false;
 	if (header->version != DT_NAVMESH_VERSION)
 		return false;
-	
+
 	// Patch header pointers.
 	const int headerSize = dtAlign4(sizeof(dtMeshHeader));
 	const int vertsSize = dtAlign4(sizeof(float)*3*header->vertCount);
@@ -703,7 +703,7 @@ bool dtNavMeshDataSwapEndian(unsigned char* data, const int /*dataSize*/)
 	const int detailTrisSize = dtAlign4(sizeof(unsigned char)*4*header->detailTriCount);
 	const int bvtreeSize = dtAlign4(sizeof(dtBVNode)*header->bvNodeCount);
 	const int offMeshLinksSize = dtAlign4(sizeof(dtOffMeshConnection)*header->offMeshConCount);
-	
+
 	unsigned char* d = data + headerSize;
 	float* verts = (float*)d; d += vertsSize;
 	dtPoly* polys = (dtPoly*)d; d += polysSize;
@@ -713,7 +713,7 @@ bool dtNavMeshDataSwapEndian(unsigned char* data, const int /*dataSize*/)
 	/*unsigned char* detailTris = (unsigned char*)d;*/ d += detailTrisSize;
 	dtBVNode* bvTree = (dtBVNode*)d; d += bvtreeSize;
 	dtOffMeshConnection* offMeshCons = (dtOffMeshConnection*)d; d += offMeshLinksSize;
-	
+
 	// Vertices
 	for (int i = 0; i < header->vertCount*3; ++i)
 	{
@@ -742,7 +742,7 @@ bool dtNavMeshDataSwapEndian(unsigned char* data, const int /*dataSize*/)
 		dtSwapEndian(&pd->vertBase);
 		dtSwapEndian(&pd->triBase);
 	}
-	
+
 	// Detail verts
 	for (int i = 0; i < header->detailVertCount*3; ++i)
 	{
@@ -770,6 +770,6 @@ bool dtNavMeshDataSwapEndian(unsigned char* data, const int /*dataSize*/)
 		dtSwapEndian(&con->rad);
 		dtSwapEndian(&con->poly);
 	}
-	
+
 	return true;
 }