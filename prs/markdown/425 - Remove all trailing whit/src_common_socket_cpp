@@ -42,7 +42,7 @@
 /////////////////////////////////////////////////////////////////////
 #if defined(WIN32)
 /////////////////////////////////////////////////////////////////////
-// windows portability layer 
+// windows portability layer
 
 typedef int socklen_t;
 
@@ -78,7 +78,7 @@ int sock2fd(SOCKET s)
 
 /// Inserts the socket into the global array of sockets.
 /// Returns a new fd associated with the socket.
-/// If there are too many sockets it closes the socket, sets an error and 
+/// If there are too many sockets it closes the socket, sets an error and
 //  returns -1 instead.
 /// Since fd 0 is reserved, it returns values in the range [1,FD_SETSIZE[.
 ///
@@ -361,7 +361,7 @@ bool _vsocket_init(void)
 
 	sFD_ZERO(&readfds);
 
-	
+
 
 	// initialise last send-receive tick
 	last_tick = time(NULL);
@@ -1025,8 +1025,8 @@ int delete_session(int fd)
  *--------------------------------------*/
 void set_nonblocking(int fd, unsigned long yes)
 {
-	// FIONBIO Use with a nonzero argp parameter to enable the nonblocking mode of socket s. 
-	// The argp parameter is zero if nonblocking is to be disabled. 
+	// FIONBIO Use with a nonzero argp parameter to enable the nonblocking mode of socket s.
+	// The argp parameter is zero if nonblocking is to be disabled.
 	if( sIoctl(fd, FIONBIO, &yes) != 0 )
 		ShowError("set_nonblocking: Failed to set socket #%d to non-blocking mode (code %d) - Please report this!!!\n", fd, sErrno);
 }
@@ -1067,7 +1067,7 @@ int32 makeBind_udp(uint32 ip, uint16 port)
 	server_address.sin_port        = htons(port);
 
 	result = sBind(fd, (struct sockaddr*)&server_address, sizeof(server_address));
-	if( result == SOCKET_ERROR ) 
+	if( result == SOCKET_ERROR )
     {
 		ShowError("make_listen_bind: bind failed (socket #%d, code %d)!\n", fd, sErrno);
         do_final(EXIT_FAILURE);