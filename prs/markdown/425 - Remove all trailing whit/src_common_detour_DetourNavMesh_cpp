@@ -39,7 +39,7 @@ inline bool overlapSlabs(const float* amin, const float* amax,
 	const float maxx = dtMin(amax[0]-px,bmax[0]-px);
 	if (minx > maxx)
 		return false;
-	
+
 	// Check vertical overlap.
 	const float ad = (amax[1]-amin[1]) / (amax[0]-amin[0]);
 	const float ak = amin[1] - ad*amin[0];
@@ -51,16 +51,16 @@ inline bool overlapSlabs(const float* amin, const float* amax,
 	const float bmaxy = bd*maxx + bk;
 	const float dmin = bminy - aminy;
 	const float dmax = bmaxy - amaxy;
-		
+
 	// Crossing segments always overlap.
 	if (dmin*dmax < 0)
 		return true;
-		
+
 	// Check for overlap at endpoints.
 	const float thr = dtSqr(py*2);
 	if (dmin*dmin <= thr || dmax*dmax <= thr)
 		return true;
-		
+
 	return false;
 }
 
@@ -177,9 +177,9 @@ The general build process is as follows:
 Notes:
 
 - This class is usually used in conjunction with the dtNavMeshQuery class for pathfinding.
-- Technically, all navigation meshes are tiled. A 'solo' mesh is simply a navigation mesh initialized 
+- Technically, all navigation meshes are tiled. A 'solo' mesh is simply a navigation mesh initialized
   to have only a single tile.
-- This class does not implement any asynchronous methods. So the ::dtStatus result of all methods will 
+- This class does not implement any asynchronous methods. So the ::dtStatus result of all methods will
   always contain either a success or failure flag.
 
 @see dtNavMeshQuery, dtCreateNavMeshData, dtNavMeshCreateParams, #dtAllocNavMesh, #dtFreeNavMesh
@@ -220,20 +220,20 @@ dtNavMesh::~dtNavMesh()
 	dtFree(m_posLookup);
 	dtFree(m_tiles);
 }
-		
+
 dtStatus dtNavMesh::init(const dtNavMeshParams* params)
 {
 	memcpy(&m_params, params, sizeof(dtNavMeshParams));
 	dtVcopy(m_orig, params->orig);
 	m_tileWidth = params->tileWidth;
 	m_tileHeight = params->tileHeight;
-	
+
 	// Init tiles
 	m_maxTiles = params->maxTiles;
 	m_tileLutSize = dtNextPow2(params->maxTiles/4);
 	if (!m_tileLutSize) m_tileLutSize = 1;
 	m_tileLutMask = m_tileLutSize-1;
-	
+
 	m_tiles = (dtMeshTile*)dtAlloc(sizeof(dtMeshTile)*m_maxTiles, DT_ALLOC_PERM);
 	if (!m_tiles)
 		return DT_FAILURE | DT_OUT_OF_MEMORY;
@@ -249,7 +249,7 @@ dtStatus dtNavMesh::init(const dtNavMeshParams* params)
 		m_tiles[i].next = m_nextFree;
 		m_nextFree = &m_tiles[i];
 	}
-	
+
 	// Init ID generator values.
 #ifndef DT_POLYREF64
 	m_tileBits = dtIlog2(dtNextPow2((unsigned int)params->maxTiles));
@@ -260,7 +260,7 @@ dtStatus dtNavMesh::init(const dtNavMeshParams* params)
 	if (m_saltBits < 10)
 		return DT_FAILURE | DT_INVALID_PARAM;
 #endif
-	
+
 	return DT_SUCCESS;
 }
 
@@ -279,7 +279,7 @@ dtStatus dtNavMesh::init(unsigned char* data, const int dataSize, const int flag
 	params.tileHeight = header->bmax[2] - header->bmin[2];
 	params.maxTiles = 1;
 	params.maxPolys = header->polyCount;
-	
+
 	dtStatus status = init(&params);
 	if (dtStatusFailed(status))
 		return status;
@@ -302,18 +302,18 @@ int dtNavMesh::findConnectingPolys(const float* va, const float* vb,
 								   dtPolyRef* con, float* conarea, int maxcon) const
 {
 	if (!tile) return 0;
-	
+
 	float amin[2] = {}, amax[2] = {};
 	calcSlabEndPoints(va,vb, amin,amax, side);
 	const float apos = getSlabCoord(va, side);
 
-	// Remove links pointing to 'side' and compact the links array. 
+	// Remove links pointing to 'side' and compact the links array.
     float bmin[2] = {}, bmax[2] = {};
 	unsigned short m = DT_EXT_LINK | (unsigned short)side;
 	int n = 0;
-	
+
 	dtPolyRef base = getPolyRefBase(tile);
-	
+
 	for (int i = 0; i < tile->header->polyCount; ++i)
 	{
 		dtPoly* poly = &tile->polys[i];
@@ -322,20 +322,20 @@ int dtNavMesh::findConnectingPolys(const float* va, const float* vb,
 		{
 			// Skip edges which do not point to the right side.
 			if (poly->neis[j] != m) continue;
-			
+
 			const float* vc = &tile->verts[poly->verts[j]*3];
 			const float* vd = &tile->verts[poly->verts[(j+1) % nv]*3];
 			const float bpos = getSlabCoord(vc, side);
-			
+
 			// Segments are not close enough.
 			if (dtAbs(apos-bpos) > 0.01f)
 				continue;
-			
+
 			// Check if the segments touch.
 			calcSlabEndPoints(vc,vd, bmin,bmax, side);
-			
+
 			if (!overlapSlabs(amin,amax, bmin,bmax, 0.01f, tile->header->walkableClimb)) continue;
-			
+
 			// Add return value.
 			if (n < maxcon)
 			{
@@ -388,26 +388,26 @@ void dtNavMesh::unconnectExtLinks(dtMeshTile* tile, dtMeshTile* target)
 void dtNavMesh::connectExtLinks(dtMeshTile* tile, dtMeshTile* target, int side)
 {
 	if (!tile) return;
-	
+
 	// Connect border links.
 	for (int i = 0; i < tile->header->polyCount; ++i)
 	{
 		dtPoly* poly = &tile->polys[i];
 
 		// Create new links.
 //		unsigned short m = DT_EXT_LINK | (unsigned short)side;
-		
+
 		const int nv = poly->vertCount;
 		for (int j = 0; j < nv; ++j)
 		{
 			// Skip non-portal edges.
 			if ((poly->neis[j] & DT_EXT_LINK) == 0)
 				continue;
-			
+
 			const int dir = (int)(poly->neis[j] & 0xff);
 			if (side != -1 && dir != side)
 				continue;
-			
+
 			// Create new links
 			const float* va = &tile->verts[poly->verts[j]*3];
 			const float* vb = &tile->verts[poly->verts[(j+1) % nv]*3];
@@ -423,7 +423,7 @@ void dtNavMesh::connectExtLinks(dtMeshTile* tile, dtMeshTile* target, int side)
 					link->ref = nei[k];
 					link->edge = (unsigned char)j;
 					link->side = (unsigned char)dir;
-					
+
 					link->next = poly->firstLink;
 					poly->firstLink = idx;
 
@@ -455,11 +455,11 @@ void dtNavMesh::connectExtLinks(dtMeshTile* tile, dtMeshTile* target, int side)
 void dtNavMesh::connectExtOffMeshLinks(dtMeshTile* tile, dtMeshTile* target, int side)
 {
 	if (!tile) return;
-	
+
 	// Connect off-mesh links.
 	// We are interested on links which land from target tile to this tile.
 	const unsigned char oppositeSide = (side == -1) ? 0xff : (unsigned char)dtOppositeTile(side);
-	
+
 	for (int i = 0; i < target->header->offMeshConCount; ++i)
 	{
 		dtOffMeshConnection* targetCon = &target->offMeshCons[i];
@@ -470,22 +470,22 @@ void dtNavMesh::connectExtOffMeshLinks(dtMeshTile* tile, dtMeshTile* target, int
 		// Skip off-mesh connections which start location could not be connected at all.
 		if (targetPoly->firstLink == DT_NULL_LINK)
 			continue;
-		
+
 		const float ext[3] = { targetCon->rad, target->header->walkableClimb, targetCon->rad };
-		
+
 		// Find polygon to connect to.
 		const float* p = &targetCon->pos[3];
 		float nearestPt[3];
 		dtPolyRef ref = findNearestPolyInTile(tile, p, ext, nearestPt);
 		if (!ref)
 			continue;
-		// findNearestPoly may return too optimistic results, further check to make sure. 
+		// findNearestPoly may return too optimistic results, further check to make sure.
 		if (dtSqr(nearestPt[0]-p[0])+dtSqr(nearestPt[2]-p[2]) > dtSqr(targetCon->rad))
 			continue;
 		// Make sure the location is on current mesh.
 		float* v = &target->verts[targetPoly->verts[1]*3];
 		dtVcopy(v, nearestPt);
-				
+
 		// Link off-mesh connection to target poly.
 		unsigned int idx = allocLink(target);
 		if (idx != DT_NULL_LINK)
@@ -499,7 +499,7 @@ void dtNavMesh::connectExtOffMeshLinks(dtMeshTile* tile, dtMeshTile* target, int
 			link->next = targetPoly->firstLink;
 			targetPoly->firstLink = idx;
 		}
-		
+
 		// Link target poly to off-mesh connection.
 		if (targetCon->flags & DT_OFFMESH_CON_BIDIR)
 		{
@@ -535,7 +535,7 @@ void dtNavMesh::connectIntLinks(dtMeshTile* tile)
 
 		if (poly->getType() == DT_POLYTYPE_OFFMESH_CONNECTION)
 			continue;
-			
+
 		// Build edge links backwards so that the links will be
 		// in the linked list from lowest index to highest.
 		for (int j = poly->vertCount-1; j >= 0; --j)
@@ -555,30 +555,30 @@ void dtNavMesh::connectIntLinks(dtMeshTile* tile)
 				link->next = poly->firstLink;
 				poly->firstLink = idx;
 			}
-		}			
+		}
 	}
 }
 
 void dtNavMesh::baseOffMeshLinks(dtMeshTile* tile)
 {
 	if (!tile) return;
-	
+
 	dtPolyRef base = getPolyRefBase(tile);
-	
+
 	// Base off-mesh connection start points.
 	for (int i = 0; i < tile->header->offMeshConCount; ++i)
 	{
 		dtOffMeshConnection* con = &tile->offMeshCons[i];
 		dtPoly* poly = &tile->polys[con->poly];
-	
+
 		const float ext[3] = { con->rad, tile->header->walkableClimb, con->rad };
-		
+
 		// Find polygon to connect to.
 		const float* p = &con->pos[0]; // First vertex
 		float nearestPt[3];
 		dtPolyRef ref = findNearestPolyInTile(tile, p, ext, nearestPt);
 		if (!ref) continue;
-		// findNearestPoly may return too optimistic results, further check to make sure. 
+		// findNearestPoly may return too optimistic results, further check to make sure.
 		if (dtSqr(nearestPt[0]-p[0])+dtSqr(nearestPt[2]-p[2]) > dtSqr(con->rad))
 			continue;
 		// Make sure the location is on current mesh.
@@ -599,7 +599,7 @@ void dtNavMesh::baseOffMeshLinks(dtMeshTile* tile)
 			poly->firstLink = idx;
 		}
 
-		// Start end-point is always connect back to off-mesh connection. 
+		// Start end-point is always connect back to off-mesh connection.
 		unsigned int tidx = allocLink(tile);
 		if (tidx != DT_NULL_LINK)
 		{
@@ -622,7 +622,7 @@ void dtNavMesh::closestPointOnPoly(dtPolyRef ref, const float* pos, float* close
 	const dtMeshTile* tile = 0;
 	const dtPoly* poly = 0;
 	getTileAndPolyByRefUnsafe(ref, &tile, &poly);
-	
+
 	// Off-mesh connections don't have detail polygons.
 	if (poly->getType() == DT_POLYTYPE_OFFMESH_CONNECTION)
 	{
@@ -636,18 +636,18 @@ void dtNavMesh::closestPointOnPoly(dtPolyRef ref, const float* pos, float* close
 			*posOverPoly = false;
 		return;
 	}
-	
+
 	const unsigned int ip = (unsigned int)(poly - tile->polys);
 	const dtPolyDetail* pd = &tile->detailMeshes[ip];
-	
+
 	// Clamp point to be inside the polygon.
-	float verts[DT_VERTS_PER_POLYGON*3];	
+	float verts[DT_VERTS_PER_POLYGON*3];
 	float edged[DT_VERTS_PER_POLYGON];
 	float edget[DT_VERTS_PER_POLYGON];
 	const int nv = poly->vertCount;
 	for (int i = 0; i < nv; ++i)
 		dtVcopy(&verts[i*3], &tile->verts[poly->verts[i]*3]);
-	
+
 	dtVcopy(closest, pos);
 	if (!dtDistancePtPolyEdgesSqr(pos, verts, nv, edged, edget))
 	{
@@ -665,7 +665,7 @@ void dtNavMesh::closestPointOnPoly(dtPolyRef ref, const float* pos, float* close
 		const float* va = &verts[imin*3];
 		const float* vb = &verts[((imin+1)%nv)*3];
 		dtVlerp(closest, va, vb, edget[imin]);
-		
+
 		if (posOverPoly)
 			*posOverPoly = false;
 	}
@@ -674,7 +674,7 @@ void dtNavMesh::closestPointOnPoly(dtPolyRef ref, const float* pos, float* close
 		if (posOverPoly)
 			*posOverPoly = true;
 	}
-	
+
 	// Find height at the location.
 	for (int j = 0; j < pd->triCount; ++j)
 	{
@@ -703,11 +703,11 @@ dtPolyRef dtNavMesh::findNearestPolyInTile(const dtMeshTile* tile,
 	float bmin[3], bmax[3];
 	dtVsub(bmin, center, extents);
 	dtVadd(bmax, center, extents);
-	
+
 	// Get nearby polygons from proximity grid.
 	dtPolyRef polys[128];
 	int polyCount = queryPolygonsInTile(tile, bmin, bmax, polys, 128);
-	
+
 	// Find nearest polygon amongst the nearby polygons.
 	dtPolyRef nearest = 0;
 	float nearestDistanceSqr = FLT_MAX;
@@ -726,21 +726,21 @@ dtPolyRef dtNavMesh::findNearestPolyInTile(const dtMeshTile* tile,
 		if (posOverPoly)
 		{
 			d = dtAbs(diff[1]) - tile->header->walkableClimb;
-			d = d > 0 ? d*d : 0;			
+			d = d > 0 ? d*d : 0;
 		}
 		else
 		{
 			d = dtVlenSqr(diff);
 		}
-		
+
 		if (d < nearestDistanceSqr)
 		{
 			dtVcopy(nearestPt, closestPtPoly);
 			nearestDistanceSqr = d;
 			nearest = ref;
 		}
 	}
-	
+
 	return nearest;
 }
 
@@ -754,7 +754,7 @@ int dtNavMesh::queryPolygonsInTile(const dtMeshTile* tile, const float* qmin, co
 		const float* tbmin = tile->header->bmin;
 		const float* tbmax = tile->header->bmax;
 		const float qfac = tile->header->bvQuantFactor;
-		
+
 		// Calculate quantized box
 		unsigned short bmin[3], bmax[3];
 		// dtClamp query box to world box.
@@ -771,21 +771,21 @@ int dtNavMesh::queryPolygonsInTile(const dtMeshTile* tile, const float* qmin, co
 		bmax[0] = (unsigned short)(qfac * maxx + 1) | 1;
 		bmax[1] = (unsigned short)(qfac * maxy + 1) | 1;
 		bmax[2] = (unsigned short)(qfac * maxz + 1) | 1;
-		
+
 		// Traverse tree
 		dtPolyRef base = getPolyRefBase(tile);
 		int n = 0;
 		while (node < end)
 		{
 			const bool overlap = dtOverlapQuantBounds(bmin, bmax, node->bmin, node->bmax);
 			const bool isLeafNode = node->i >= 0;
-			
+
 			if (isLeafNode && overlap)
 			{
 				if (n < maxPolys)
 					polys[n++] = base | (dtPolyRef)node->i;
 			}
-			
+
 			if (overlap || isLeafNode)
 				node++;
 			else
@@ -794,7 +794,7 @@ int dtNavMesh::queryPolygonsInTile(const dtMeshTile* tile, const float* qmin, co
 				node += escapeIndex;
 			}
 		}
-		
+
 		return n;
 	}
 	else
@@ -835,7 +835,7 @@ int dtNavMesh::queryPolygonsInTile(const dtMeshTile* tile, const float* qmin, co
 ///
 /// The lastRef parameter is used to restore a tile with the same tile
 /// reference it had previously used.  In this case the #dtPolyRef's for the
-/// tile will be restored to the same values they were before the tile was 
+/// tile will be restored to the same values they were before the tile was
 /// removed.
 ///
 /// @see dtCreateNavMeshData, #removeTile
@@ -848,11 +848,11 @@ dtStatus dtNavMesh::addTile(unsigned char* data, int dataSize, int flags,
 		return DT_FAILURE | DT_WRONG_MAGIC;
 	if (header->version != DT_NAVMESH_VERSION)
 		return DT_FAILURE | DT_WRONG_VERSION;
-		
+
 	// Make sure the location is free.
 	if (getTileAt(header->x, header->y, header->layer))
 		return DT_FAILURE;
-		
+
 	// Allocate a tile.
 	dtMeshTile* tile = 0;
 	if (!lastRef)
@@ -895,12 +895,12 @@ dtStatus dtNavMesh::addTile(unsigned char* data, int dataSize, int flags,
 	// Make sure we could allocate a tile.
 	if (!tile)
 		return DT_FAILURE | DT_OUT_OF_MEMORY;
-	
+
 	// Insert tile into the position lut.
 	int h = computeTileHash(header->x, header->y, m_tileLutMask);
 	tile->next = m_posLookup[h];
 	m_posLookup[h] = tile;
-	
+
 	// Patch header pointers.
 	const int headerSize = dtAlign4(sizeof(dtMeshHeader));
 	const int vertsSize = dtAlign4(sizeof(float)*3*header->vertCount);
@@ -911,7 +911,7 @@ dtStatus dtNavMesh::addTile(unsigned char* data, int dataSize, int flags,
 	const int detailTrisSize = dtAlign4(sizeof(unsigned char)*4*header->detailTriCount);
 	const int bvtreeSize = dtAlign4(sizeof(dtBVNode)*header->bvNodeCount);
 	const int offMeshLinksSize = dtAlign4(sizeof(dtOffMeshConnection)*header->offMeshConCount);
-	
+
 	unsigned char* d = data + headerSize;
 	tile->verts = (float*)d; d += vertsSize;
 	tile->polys = (dtPoly*)d; d += polysSize;
@@ -945,7 +945,7 @@ dtStatus dtNavMesh::addTile(unsigned char* data, int dataSize, int flags,
 	static const int MAX_NEIS = 32;
 	dtMeshTile* neis[MAX_NEIS];
 	int nneis;
-	
+
 	// Connect with layers in current tile.
 	nneis = getTilesAt(header->x, header->y, neis, MAX_NEIS);
 	for (int j = 0; j < nneis; ++j)
@@ -958,7 +958,7 @@ dtStatus dtNavMesh::addTile(unsigned char* data, int dataSize, int flags,
 		connectExtOffMeshLinks(tile, neis[j], -1);
 		connectExtOffMeshLinks(neis[j], tile, -1);
 	}
-	
+
 	// Connect with neighbour tiles.
 	for (int i = 0; i < 8; ++i)
 	{
@@ -971,10 +971,10 @@ dtStatus dtNavMesh::addTile(unsigned char* data, int dataSize, int flags,
 			connectExtOffMeshLinks(neis[j], tile, dtOppositeTile(i));
 		}
 	}
-	
+
 	if (result)
 		*result = getTileRef(tile);
-	
+
 	return DT_SUCCESS;
 }
 
@@ -1018,7 +1018,7 @@ int dtNavMesh::getNeighbourTilesAt(const int x, const int y, const int side, dtM
 int dtNavMesh::getTilesAt(const int x, const int y, dtMeshTile** tiles, const int maxTiles) const
 {
 	int n = 0;
-	
+
 	// Find tile based on hash.
 	int h = computeTileHash(x,y,m_tileLutMask);
 	dtMeshTile* tile = m_posLookup[h];
@@ -1033,7 +1033,7 @@ int dtNavMesh::getTilesAt(const int x, const int y, dtMeshTile** tiles, const in
 		}
 		tile = tile->next;
 	}
-	
+
 	return n;
 }
 
@@ -1044,7 +1044,7 @@ int dtNavMesh::getTilesAt(const int x, const int y, dtMeshTile** tiles, const in
 int dtNavMesh::getTilesAt(const int x, const int y, dtMeshTile const** tiles, const int maxTiles) const
 {
 	int n = 0;
-	
+
 	// Find tile based on hash.
 	int h = computeTileHash(x,y,m_tileLutMask);
 	dtMeshTile* tile = m_posLookup[h];
@@ -1059,7 +1059,7 @@ int dtNavMesh::getTilesAt(const int x, const int y, dtMeshTile const** tiles, co
 		}
 		tile = tile->next;
 	}
-	
+
 	return n;
 }
 
@@ -1172,7 +1172,7 @@ dtStatus dtNavMesh::removeTile(dtTileRef ref, unsigned char** data, int* dataSiz
 	dtMeshTile* tile = &m_tiles[tileIndex];
 	if (tile->salt != tileSalt)
 		return DT_FAILURE | DT_INVALID_PARAM;
-	
+
 	// Remove tile from hash lookup.
 	int h = computeTileHash(tile->header->x,tile->header->y,m_tileLutMask);
 	dtMeshTile* prev = 0;
@@ -1190,29 +1190,29 @@ dtStatus dtNavMesh::removeTile(dtTileRef ref, unsigned char** data, int* dataSiz
 		prev = cur;
 		cur = cur->next;
 	}
-	
+
 	// Remove connections to neighbour tiles.
 	// Create connections with neighbour tiles.
 	static const int MAX_NEIS = 32;
 	dtMeshTile* neis[MAX_NEIS];
 	int nneis;
-	
+
 	// Connect with layers in current tile.
 	nneis = getTilesAt(tile->header->x, tile->header->y, neis, MAX_NEIS);
 	for (int j = 0; j < nneis; ++j)
 	{
 		if (neis[j] == tile) continue;
 		unconnectExtLinks(neis[j], tile);
 	}
-	
+
 	// Connect with neighbour tiles.
 	for (int i = 0; i < 8; ++i)
 	{
 		nneis = getNeighbourTilesAt(tile->header->x, tile->header->y, i, neis, MAX_NEIS);
 		for (int j = 0; j < nneis; ++j)
 			unconnectExtLinks(neis[j], tile);
 	}
-		
+
 	// Reset tile.
 	if (tile->flags & DT_TILE_FREE_DATA)
 	{
@@ -1274,7 +1274,7 @@ dtTileRef dtNavMesh::getTileRef(const dtMeshTile* tile) const
 /// {
 ///     const dtPoly* p = &tile->polys[i];
 ///     const dtPolyRef ref = base | (dtPolyRef)i;
-///     
+///
 ///     // Use the reference to access the polygon data.
 /// }
 /// @endcode
@@ -1318,15 +1318,15 @@ dtStatus dtNavMesh::storeTileState(const dtMeshTile* tile, unsigned char* data,
 	const int sizeReq = getTileStateSize(tile);
 	if (maxDataSize < sizeReq)
 		return DT_FAILURE | DT_BUFFER_TOO_SMALL;
-		
+
 	dtTileState* tileState = (dtTileState*)data; data += dtAlign4(sizeof(dtTileState));
 	dtPolyState* polyStates = (dtPolyState*)data; data += dtAlign4(sizeof(dtPolyState) * tile->header->polyCount);
-	
+
 	// Store tile state.
 	tileState->magic = DT_NAVMESH_STATE_MAGIC;
 	tileState->version = DT_NAVMESH_STATE_VERSION;
 	tileState->ref = getTileRef(tile);
-	
+
 	// Store per poly state.
 	for (int i = 0; i < tile->header->polyCount; ++i)
 	{
@@ -1335,7 +1335,7 @@ dtStatus dtNavMesh::storeTileState(const dtMeshTile* tile, unsigned char* data,
 		s->flags = p->flags;
 		s->area = p->getArea();
 	}
-	
+
 	return DT_SUCCESS;
 }
 
@@ -1350,18 +1350,18 @@ dtStatus dtNavMesh::restoreTileState(dtMeshTile* tile, const unsigned char* data
 	const int sizeReq = getTileStateSize(tile);
 	if (maxDataSize < sizeReq)
 		return DT_FAILURE | DT_INVALID_PARAM;
-	
+
 	const dtTileState* tileState = (const dtTileState*)data; data += dtAlign4(sizeof(dtTileState));
 	const dtPolyState* polyStates = (const dtPolyState*)data; data += dtAlign4(sizeof(dtPolyState) * tile->header->polyCount);
-	
+
 	// Check that the restore is possible.
 	if (tileState->magic != DT_NAVMESH_STATE_MAGIC)
 		return DT_FAILURE | DT_WRONG_MAGIC;
 	if (tileState->version != DT_NAVMESH_STATE_VERSION)
 		return DT_FAILURE | DT_WRONG_VERSION;
 	if (tileState->ref != getTileRef(tile))
 		return DT_FAILURE | DT_INVALID_PARAM;
-	
+
 	// Restore per poly state.
 	for (int i = 0; i < tile->header->polyCount; ++i)
 	{
@@ -1370,24 +1370,24 @@ dtStatus dtNavMesh::restoreTileState(dtMeshTile* tile, const unsigned char* data
 		p->flags = s->flags;
 		p->setArea(s->area);
 	}
-	
+
 	return DT_SUCCESS;
 }
 
 /// @par
 ///
-/// Off-mesh connections are stored in the navigation mesh as special 2-vertex 
-/// polygons with a single edge. At least one of the vertices is expected to be 
-/// inside a normal polygon. So an off-mesh connection is "entered" from a 
-/// normal polygon at one of its endpoints. This is the polygon identified by 
+/// Off-mesh connections are stored in the navigation mesh as special 2-vertex
+/// polygons with a single edge. At least one of the vertices is expected to be
+/// inside a normal polygon. So an off-mesh connection is "entered" from a
+/// normal polygon at one of its endpoints. This is the polygon identified by
 /// the prevRef parameter.
 dtStatus dtNavMesh::getOffMeshConnectionPolyEndPoints(dtPolyRef prevRef, dtPolyRef polyRef, float* startPos, float* endPos) const
 {
 	unsigned int salt, it, ip;
 
 	if (!polyRef)
 		return DT_FAILURE;
-	
+
 	// Get current polygon
 	decodePolyId(polyRef, salt, it, ip);
 	if (it >= (unsigned int)m_maxTiles) return DT_FAILURE | DT_INVALID_PARAM;
@@ -1402,7 +1402,7 @@ dtStatus dtNavMesh::getOffMeshConnectionPolyEndPoints(dtPolyRef prevRef, dtPolyR
 
 	// Figure out which way to hand out the vertices.
 	int idx0 = 0, idx1 = 1;
-	
+
 	// Find link that points to first vertex.
 	for (unsigned int i = poly->firstLink; i != DT_NULL_LINK; i = tile->links[i].next)
 	{
@@ -1416,7 +1416,7 @@ dtStatus dtNavMesh::getOffMeshConnectionPolyEndPoints(dtPolyRef prevRef, dtPolyR
 			break;
 		}
 	}
-	
+
 	dtVcopy(startPos, &tile->verts[poly->verts[idx0]*3]);
 	dtVcopy(endPos, &tile->verts[poly->verts[idx1]*3]);
 
@@ -1427,18 +1427,18 @@ dtStatus dtNavMesh::getOffMeshConnectionPolyEndPoints(dtPolyRef prevRef, dtPolyR
 const dtOffMeshConnection* dtNavMesh::getOffMeshConnectionByRef(dtPolyRef ref) const
 {
 	unsigned int salt, it, ip;
-	
+
 	if (!ref)
 		return 0;
-	
+
 	// Get current polygon
 	decodePolyId(ref, salt, it, ip);
 	if (it >= (unsigned int)m_maxTiles) return 0;
 	if (m_tiles[it].salt != salt || m_tiles[it].header == 0) return 0;
 	const dtMeshTile* tile = &m_tiles[it];
 	if (ip >= (unsigned int)tile->header->polyCount) return 0;
 	const dtPoly* poly = &tile->polys[ip];
-	
+
 	// Make sure that the current poly is indeed off-mesh link.
 	if (poly->getType() != DT_POLYTYPE_OFFMESH_CONNECTION)
 		return 0;
@@ -1459,10 +1459,10 @@ dtStatus dtNavMesh::setPolyFlags(dtPolyRef ref, unsigned short flags)
 	dtMeshTile* tile = &m_tiles[it];
 	if (ip >= (unsigned int)tile->header->polyCount) return DT_FAILURE | DT_INVALID_PARAM;
 	dtPoly* poly = &tile->polys[ip];
-	
+
 	// Change flags.
 	poly->flags = flags;
-	
+
 	return DT_SUCCESS;
 }
 
@@ -1478,7 +1478,7 @@ dtStatus dtNavMesh::getPolyFlags(dtPolyRef ref, unsigned short* resultFlags) con
 	const dtPoly* poly = &tile->polys[ip];
 
 	*resultFlags = poly->flags;
-	
+
 	return DT_SUCCESS;
 }
 
@@ -1492,9 +1492,9 @@ dtStatus dtNavMesh::setPolyArea(dtPolyRef ref, unsigned char area)
 	dtMeshTile* tile = &m_tiles[it];
 	if (ip >= (unsigned int)tile->header->polyCount) return DT_FAILURE | DT_INVALID_PARAM;
 	dtPoly* poly = &tile->polys[ip];
-	
+
 	poly->setArea(area);
-	
+
 	return DT_SUCCESS;
 }
 
@@ -1508,9 +1508,9 @@ dtStatus dtNavMesh::getPolyArea(dtPolyRef ref, unsigned char* resultArea) const
 	const dtMeshTile* tile = &m_tiles[it];
 	if (ip >= (unsigned int)tile->header->polyCount) return DT_FAILURE | DT_INVALID_PARAM;
 	const dtPoly* poly = &tile->polys[ip];
-	
+
 	*resultArea = poly->getArea();
-	
+
 	return DT_SUCCESS;
 }
 