@@ -6326,7 +6326,7 @@ inline int32 CLuaBaseEntity::addMission(lua_State *L)
     TPZ_DEBUG_BREAK_IF(lua_isnil(L, 2) || !lua_isnumber(L, 2));
 
     uint8 missionLogID = (uint8)lua_tointeger(L, lua_isnumber(L, 1) ? 1 : -1);
-    uint8 MissionID = (uint8)lua_tointeger(L, 2);
+    uint16 MissionID = (uint16)lua_tointeger(L, 2);
 
     if (missionLogID < MAX_MISSIONAREA && MissionID < MAX_MISSIONID)
     {
@@ -6369,13 +6369,13 @@ inline int32 CLuaBaseEntity::delMission(lua_State *L)
     TPZ_DEBUG_BREAK_IF(lua_isnil(L, 2) || !lua_isnumber(L, 2));
 
     uint8 missionLogID = (uint8)lua_tointeger(L, lua_isnumber(L, 1) ? 1 : -1);
-    uint8 MissionID = (uint8)lua_tointeger(L, 2);
+    uint16 MissionID = (uint16)lua_tointeger(L, 2);
 
     if (missionLogID < MAX_MISSIONAREA && MissionID < MAX_MISSIONID)
     {
         CCharEntity* PChar = (CCharEntity*)m_PBaseEntity;
 
-        auto current = (uint8)PChar->m_missionLog[missionLogID].current;
+        auto current = (uint16)PChar->m_missionLog[missionLogID].current;
         bool complete = (missionLogID == MISSION_COP || MissionID >= 64) ? false : PChar->m_missionLog[missionLogID].complete[MissionID];
 
         if (current == MissionID)
@@ -6417,11 +6417,11 @@ inline int32 CLuaBaseEntity::getCurrentMission(lua_State *L)
     TPZ_DEBUG_BREAK_IF(lua_isnil(L, -1) || !lua_isnumber(L, -1));
 
     uint8 missionLogID = (uint8)lua_tointeger(L, -1);
-    uint8 MissionID = 0;
+    uint16 MissionID = 0;
 
     if (missionLogID < MAX_MISSIONAREA)
     {
-        MissionID = (uint8)((CCharEntity*)m_PBaseEntity)->m_missionLog[missionLogID].current;
+        MissionID = (uint16)((CCharEntity*)m_PBaseEntity)->m_missionLog[missionLogID].current;
     }
     else
     {
@@ -6452,7 +6452,7 @@ inline int32 CLuaBaseEntity::hasCompletedMission(lua_State *L)
     TPZ_DEBUG_BREAK_IF(lua_isnil(L, 2) || !lua_isnumber(L, 2));
 
     uint8 missionLogID = (uint8)lua_tointeger(L, lua_isnumber(L, 1) ? 1 : -1);
-    uint8 MissionID = (uint8)lua_tointeger(L, 2);
+    uint16 MissionID = (uint16)lua_tointeger(L, 2);
 
     bool complete = false;
 
@@ -6490,7 +6490,7 @@ inline int32 CLuaBaseEntity::completeMission(lua_State *L)
     TPZ_DEBUG_BREAK_IF(lua_isnil(L, 2) || !lua_isnumber(L, 2));
 
     uint8 missionLogID = (uint8)lua_tointeger(L, lua_isnumber(L, 1) ? 1 : -1);
-    uint8 MissionID = (uint8)lua_tointeger(L, 2);
+    uint16 MissionID = (uint16)lua_tointeger(L, 2);
 
     if (missionLogID < MAX_MISSIONAREA && MissionID < MAX_MISSIONID)
     {
@@ -6520,6 +6520,106 @@ inline int32 CLuaBaseEntity::completeMission(lua_State *L)
     return 0;
 }
 
+/************************************************************************
+*  Function: setMissionLogEx()
+*  Purpose : Sets mission log extra data to correctly track progress in branching missions.
+*  Example : player:setMissionLogEx(tpz.mission.log_id.COP, tpz.mission.logEx.ULMIA, 14)
+*  Notes   : 
+************************************************************************/
+
+inline int32 CLuaBaseEntity::setMissionLogEx(lua_State *L)
+{
+    TPZ_DEBUG_BREAK_IF(m_PBaseEntity == nullptr);
+    TPZ_DEBUG_BREAK_IF(m_PBaseEntity->objtype != TYPE_PC);
+
+    TPZ_DEBUG_BREAK_IF(lua_isnil(L, 1) || !lua_isnumber(L, 1));
+    TPZ_DEBUG_BREAK_IF(lua_isnil(L, 2) || !lua_isnumber(L, 2));
+
+    CCharEntity* PChar = (CCharEntity*)m_PBaseEntity;
+    uint8 missionLogID = (uint8)lua_tointeger(L, 1);
+    if (missionLogID >= MAX_MISSIONAREA)
+    {
+        ShowError(CL_RED"Lua::setMissionLogEx: missionLogID %i is invalid\n" CL_RESET, missionLogID);
+        return 0;
+    }
+    int32 n = lua_gettop(L);
+    if (n == 3)
+    {
+        uint8 missionLogExPos = (uint8)lua_tointeger(L, 2);
+        if (missionLogExPos > 7)
+        {
+            ShowError(CL_RED"Lua::setMissionLogEx: position %i is invalid\n" CL_RESET, missionLogExPos);
+            return 0;
+        }
+        uint8 missionLogExValue = (uint8)lua_tointeger(L, 3);
+        if (missionLogExValue > 0xF)
+        {
+            ShowError(CL_RED"Lua::setMissionLogEx: value %i is invalid\n" CL_RESET, missionLogExValue);
+            return 0;
+        }
+        uint32 logEx = (PChar->m_missionLog[missionLogID].logExUpper << 16) | PChar->m_missionLog[missionLogID].logExLower;
+        uint32 mask = ~(0xF << (4 * missionLogExPos));
+
+        logEx &= mask;
+        logEx |= missionLogExValue << (4 * missionLogExPos);
+        PChar->m_missionLog[missionLogID].logExLower = logEx;
+        PChar->m_missionLog[missionLogID].logExUpper = logEx >> 16;
+        PChar->pushPacket(new CQuestMissionLogPacket(PChar, missionLogID, LOG_MISSION_CURRENT));
+    }
+    else if (n == 2)
+    {
+        uint32 missionLogExValue = (uint32)lua_tointeger(L, 2);
+        PChar->m_missionLog[missionLogID].logExLower = missionLogExValue;
+        PChar->m_missionLog[missionLogID].logExUpper = missionLogExValue >> 16;
+    }
+
+    charutils::SaveMissionsList(PChar);
+
+    return 0;
+}
+
+/************************************************************************
+*  Function: getMissionLogEx()
+*  Purpose : Gets mission log extra data.
+*  Example : player:getMissionLogEx(tpz.mission.log_id.COP, tpz.mission.logEx.ULMIA)
+*  Notes   :  If arg2 isn't provided, the whole 32 bits are returned.
+************************************************************************/
+
+inline int32 CLuaBaseEntity::getMissionLogEx(lua_State *L)
+{
+    TPZ_DEBUG_BREAK_IF(m_PBaseEntity == nullptr);
+    TPZ_DEBUG_BREAK_IF(m_PBaseEntity->objtype != TYPE_PC);
+
+    TPZ_DEBUG_BREAK_IF(lua_isnil(L, 1) || !lua_isnumber(L, 1));
+
+    CCharEntity* PChar = (CCharEntity*)m_PBaseEntity;
+    uint8 missionLogID = (uint8)lua_tointeger(L, 1);
+    if (missionLogID < MAX_MISSIONAREA)
+    {
+        uint32 logEx = (PChar->m_missionLog[missionLogID].logExUpper << 16) | PChar->m_missionLog[missionLogID].logExLower;
+        if (lua_isnumber(L, 2))
+        {
+            uint8 missionLogExPos = (uint8)lua_tointeger(L, 2);
+            if (missionLogExPos > 7)
+            {
+                ShowError(CL_RED"Lua::getMissionLogEx: position %i is invalid\n" CL_RESET, missionLogExPos);
+                return 0;
+            }
+            lua_pushinteger(L, ((logEx >> (4 * missionLogExPos)) & 0xF));
+        }
+        else
+        {
+            lua_pushinteger(L, logEx);
+        }
+    }
+    else
+    {
+        ShowError(CL_RED"Lua::getMissionLogEx: missionLogID %i is invalid\n" CL_RESET, missionLogID);
+        return 0;
+    }
+    return 1;
+}
+
 /************************************************************************
 *  Function: addAssault()
 *  Purpose : Adds an assault mission to the player's log
@@ -14287,6 +14387,8 @@ Lunar<CLuaBaseEntity>::Register_t CLuaBaseEntity::methods[] =
     LUNAR_DECLARE_METHOD(CLuaBaseEntity,getCurrentMission),
     LUNAR_DECLARE_METHOD(CLuaBaseEntity,hasCompletedMission),
     LUNAR_DECLARE_METHOD(CLuaBaseEntity,completeMission),
+    LUNAR_DECLARE_METHOD(CLuaBaseEntity,setMissionLogEx),
+    LUNAR_DECLARE_METHOD(CLuaBaseEntity,getMissionLogEx),
 
     LUNAR_DECLARE_METHOD(CLuaBaseEntity,addAssault),
     LUNAR_DECLARE_METHOD(CLuaBaseEntity,delAssault),